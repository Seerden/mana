{"version":3,"sources":["hooks/state.js","hooks/auth.js","context/LoginContext.js","hooks/routerHooks.js","helpers/db.api.js","components/login/Login.jsx","wrappers/Private.jsx","wrappers/PrivateRoute.jsx","components/layout/Header.jsx","components/layout/Footer.jsx","helpers/review.api.js","context/ReviewContext.js","components/review/ReviewCard.jsx","components/review/PreReview.jsx","components/review/PostReview.jsx","components/review/Timer.jsx","components/review/ReviewInfo.jsx","hooks/useRequest.js","helpers/apiHandlers.js","components/review/Review.jsx","context/ListContext.js","components/list/ListTermDeleteButton.jsx","helpers/time.js","components/list/TermHistory.jsx","components/list/ListTerm.jsx","components/list/List.jsx","helpers/list.api.js","components/user/User.jsx","components/lists/ListsItem.jsx","components/lists/Lists.jsx","components/newlist/NewListTerm.jsx","components/newlist/NewList.jsx","components/Test.js","components/Home.jsx","components/register/Register.jsx","components/App.jsx","index.js"],"names":["useLogState","name","state","setState","useEffect","console","log","handleFormBlur","e","t","currentTarget","value","storeUser","username","action","localStorage","setItem","getItem","removeItem","LoginContext","createContext","LoginProvider","memo","props","useState","currentUser","setCurrentUser","Provider","login","user","logout","children","useRouteProps","location","useLocation","navigate","useNavigate","params","useParams","axios","defaults","withCredentials","Login","_user","_setUser","useContext","auth","setAuth","response","setResponse","err","setErr","post","then","r","data","catch","useAuthenticateUser","authResponse","className","htmlFor","autoComplete","onBlur","type","onClick","to","Private","Component","component","setComponent","isLoggedIn","setIsLoggedIn","key","Date","now","PrivateRoute","rest","element","Header","HeaderLoggedIn","id","HeaderLoggedOut","Footer","href","src","process","width","height","alt","makeReviewList","terms","n","shuffled","makeList","j","copy","indices","i","length","Math","floor","random","push","ReviewContext","ReviewProvider","settings","direction","started","reviewContext","setReviewContext","ReviewCard","term","side","setSide","flipping","setFlipping","fade","setFade","window","addEventListener","handleArrowUpDownKeyup","removeEventListener","setTimeout","includes","code","flip","duration","PreReview","buttons","setButtons","directionButtons","setDirectionButtons","map","num","SettingsButton","uuidv4","handleSettingsChange","d","current","target","selected","String","style","color","backgroundColor","PostReview","sessionStart","sessionEnd","list","formatDate","date","dayjs","format","owner","extend","relativeTime","Timer","start","timer","setTimer","elapsed","setElapsed","timerInterval","setInterval","round","clearInterval","fromNow","title","ReviewInfo","numTerms","progress","useRequest","handleResponse","handleError","mounted","useRef","request","setRequest","error","setError","loading","setLoading","source","CancelToken","executeRequest","res","status","cancel","next","authorizeUser","default","handleGetList","query","get","handlePutList","getList","putList","body","put","Review","end","session","setSession","setList","useReducer","payload","slice","newIndex","newTerms","currentTerm","shift","splice","futureTerms","reduceFutureTerms","currentCard","setCurrentCard","setProgress","failRef","passRef","setGetRequest","content","setPutRequest","handleLeftRightArrowKeyDown","ref","focus","click","blur","handlePassFailClick","passfail","preventDefault","idx","findIndex","from","history","histLen","lastHist","newList","updateSessionHistory","_id","Number","sessionLength","termsCompleted","sessions","termsReviewed","lastReviewed","endSession","ListContext","ListProvider","listContextValue","setListContextValue","ListTermDeleteButton","confirmingDelete","setConfirmingDelete","handleConfirmClick","isHovering","advancedFormat","timeSince","TermHistory","visible","expand","setExpand","histEl","el","index","display","margin","borderRadius","makeHistoryElement","reverse","ListTerm","handleTermDelete","_term","setTerm","isEditing","setIsEditing","setIsHovering","showHistory","setShowHistory","handleTermEdit","getAttribute","newTerm","newListContent","onMouseEnter","onMouseLeave","disabled","defaultValue","List","setTerms","getResponse","delete","deleteResponse","setDeleteRequest","sessionStartDate","sessionEndDate","filter","extractSession","updateTerms","termProps","updatedList","handleDelete","JSON","stringify","pathname","User","ListsItem","borderColor","day","colorByLastReviewDate","timeSinceLastReview","Lists","setFilter","listsElement","setListsElement","sortBy","setSortBy","lists","makeListsElement","l","created","autoFocus","onChange","val","placeholder","toLowerCase","sort","first","second","NewListTerm","formOutput","setFormOutput","handleTermBlur","NewList","setNumTerms","Array","termInputs","setTermInputs","postResponse","setPostRequest","termElements","makeTermInputElements","handleBlur","Test","yesterday","Home","Register","password","newUser","setNewUser","handleSubmit","postUser","App","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qlBAUaA,EAAc,SAACC,EAAMC,EAAOC,GACrCC,qBAAU,WACNF,GAASG,QAAQC,IAAR,UAAeL,EAAf,aAAgCC,KAC1C,CAACD,EAAMC,EAAOC,KASRI,EAAiB,SAACC,EAAGN,EAAOC,GACrC,IAAIM,EAAID,EAAEE,eAEFR,EAAMO,EAAER,OAAUQ,EAAEE,UAAYT,EAAMO,EAAER,OAAUC,EAAMO,EAAER,OAASC,EAAMO,EAAER,QAAUQ,EAAEE,QAC3FR,EAAS,2BAAID,GAAL,kBAAaO,EAAER,KAAOQ,EAAEE,UCxB3BC,EAAY,SAACC,EAAUC,GAChC,OAAQA,GACJ,IAAK,MACDC,aAAaC,QAAQ,WAAYH,GACjC,MACJ,IAAK,MACD,OAAOE,aAAaE,QAAQ,YAChC,IAAK,SACDF,aAAaG,WAAW,cCPvBC,EAAeC,wBAAc,MAE7BC,EAAgBC,gBAAK,SAACC,GAAW,IAAD,EACHC,mBAASZ,EAAU,KAAM,QADtB,mBAClCa,EADkC,KACrBC,EADqB,KAmBzC,OANA1B,EAAY,4BAA6ByB,GAEzCrB,qBAAU,cAEP,IAGC,kBAACe,EAAaQ,SAAd,CAAuBhB,MAAK,eAAM,CAACc,cAAaG,MAjBtC,SAAAC,GACVH,EAAeG,GACfjB,EAAUiB,EAAM,QAeuCC,OAZ5C,WACXJ,EAAe,MACfd,EAAU,KAAM,cAWXW,EAAMQ,aCrBNC,G,MAAgB,WACzB,MAAQ,CACJC,SAAUC,cACVC,SAAUC,cACVC,OAAQC,iB,8BCJhBC,IAAMC,SAASC,iBAAkB,EAEjC,ICwCeC,EAtCD,SAACnB,GAAW,IAAD,EACKC,mBAAS,IADd,mBACdmB,EADc,KACPC,EADO,OAEUZ,IAAvBG,EAFa,EAEbA,SAFa,KAEHF,SACMY,qBAAW1B,GAA3BM,YACgBD,oBAAS,IAJZ,mBAIdsB,EAJc,KAIRC,EAJQ,ODsDU,SAACD,EAAMjB,GAAU,IAAD,EAChBgB,qBAAW1B,GAArBS,GAD0B,EACvCH,YADuC,EAC1BG,OAD0B,EAEfJ,mBAAS,MAFM,mBAExCwB,EAFwC,KAE9BC,EAF8B,OAGzBzB,oBAAS,GAHgB,mBAGxC0B,EAHwC,KAGnCC,EAHmC,KAoB/C,OAfA/C,qBAAU,WAGE0C,IACAzC,QAAQC,IAAI,sBACZiC,IAAMa,KAAK,WAAYvB,GAClBwB,MAAK,SAAAC,GACFL,EAAYK,EAAEC,KAAK1C,UACnBe,EAAM0B,EAAEC,KAAK1C,aAEhB2C,OAAM,SAAAhD,GAAC,OAAI2C,EAAO3C,SAGhC,CAACsC,IAEG,CAACE,EAAUE,GCpEgBO,CAAoBX,EAAMH,GANvC,mBAMde,EANc,UAcrB,OANAtD,qBAAU,WACFsD,GACAvB,EAAS,MAAD,OAAOuB,MAEpB,CAACA,IAGA,yBAAKC,UAAU,eACX,yBAAKA,UAAU,SACX,yBAAKA,UAAU,cAAf,uDACA,0BAAMA,UAAU,eACZ,4BAAQA,UAAU,uBAAlB,UAIA,2BAAOC,QAAQ,YAAf,YACA,2BAAOC,aAAa,WAAWC,OAAQ,SAAAtD,GAAC,OAAID,EAAeC,EAAGmC,EAAOC,IAAWmB,KAAK,OAAO9D,KAAK,aAEjG,2BAAO2D,QAAQ,YAAf,YACA,2BAAOC,aAAa,WAAWC,OAAQ,SAAAtD,GAAC,OAAID,EAAeC,EAAGmC,EAAOC,IAAWmB,KAAK,WAAW9D,KAAK,aAErG,2BAAO+D,QAAS,kBAAMjB,GAAQ,IAAOY,UAAU,gBAAgBI,KAAK,SAASpD,MAAM,WACnF,kBAAC,IAAD,CAAMsD,GAAG,aAAT,gBCELC,EA5BC,SAAC,GAAuC,IAA1BC,EAAyB,EAApCC,UAAoC,gCACjB5C,mBAAS,OADQ,mBAC5C4C,EAD4C,KACjCC,EADiC,KAE3C5C,EAAgBoB,qBAAW1B,GAA3BM,YAF2C,EAGtBO,IAArBK,EAH2C,EAG3CA,OAAQJ,EAHmC,EAGnCA,SAHmC,EAIfT,qBAASC,GAJM,mBAI5C6C,EAJ4C,KAIhCC,EAJgC,KAcnD,OARAnE,qBAAU,WACNiE,EAAa,kBAACF,EAAD,CAAWK,IAAKC,KAAKC,WACnC,CAACP,EAAW9B,EAAQJ,EAAUR,IAEjCrB,qBAAU,WACFmE,IAAc9C,KACnB,CAACA,IAGA,oCACM6C,EAEE,oCACMF,GAAaA,GAGnB,kBAAC,EAAD,QClBDO,EAZM,SAAC,GAA+C,IAAnCR,EAAkC,EAA7CC,UAAsBrC,EAAuB,EAAvBA,SAAa6C,EAAU,wCAEhE,OAAI7C,GACA1B,QAAQC,IAAIyB,GACL,MAIP,kBAAC,IAAD,iBAAW6C,EAAX,CAAiBC,QAAS,kBAAC,EAAD,CAAST,UAAWD,QCGvCW,G,MAVAxD,gBAAK,WAAO,IACfG,EAAgBoB,qBAAW1B,GAA3BM,YAER,OACI,yBAAKkC,UAAU,UACTlC,EAAc,kBAAC,EAAD,MAAoB,kBAAC,EAAD,WAO1CsD,EAAiB,WAAO,IAAD,EACOlC,qBAAW1B,GAAnCM,EADiB,EACjBA,YAAaK,EADI,EACJA,OAErB,OACI,6BACI,0BAAMkD,GAAG,QAAT,QACA,kBAAC,IAAD,CAASrB,UAAU,UAAUM,GAAG,KAAhC,QACA,kBAAC,IAAD,CAASN,UAAU,UAAUM,GAAE,aAAQxC,IAAvC,cACA,kBAAC,IAAD,CAASkC,UAAU,UAAUM,GAAE,aAAQxC,EAAR,WAA/B,YAEA,4BAAQuC,QAAS,kBAAMlC,MAAvB,aAKNmD,EAAkB,kBACpB,6BACI,0BAAMD,GAAG,QAAT,QACA,kBAAC,IAAD,CAASrB,UAAU,UAAUM,GAAG,KAAhC,QACA,kBAAC,IAAD,CAASN,UAAU,UAAUM,GAAE,UAA/B,UACA,kBAAC,IAAD,CAASN,UAAU,UAAUM,GAAE,aAA/B,cCnBOiB,G,MAhBA,SAAC3D,GAEZ,OACI,yBAAKoC,UAAU,UACX,yBAAKA,UAAU,gBAAe,uBAAGwB,KAAK,mCACtC,yBACAC,IAAG,UAAKC,GAAL,sBACHC,MAAM,KACNC,OAAO,KACPC,IAAI,qB,eCNHC,EAAiB,SAACC,EAAOC,GAqBlC,IApBA,IAAIC,EAAW,GAETC,EAAW,WAOb,IANA,IAKIC,EALEC,EAAI,YAAOL,GACXM,EAAU,GAGZC,EADMF,EAAKG,OACD,EAEPD,EAAI,GAAG,OAGW,CAACF,EADtBD,EAAIK,KAAKC,OAAOH,EAAI,GAAKE,KAAKE,WACCN,EAAKE,IAAnCF,EAAKE,GAHI,KAGAF,EAAKD,GAHL,KAIVE,EAAQM,KAAKR,GACbG,GAAK,EAET,OAAOF,GAGPE,EAAI,EACDA,EAAIN,GACPC,EAAQ,sBAAOA,GAAP,YAAoBC,MAC5BI,IAGJ,OAAOL,GC9BEW,EAAgBnF,wBAAc,MAE9BoF,EAAiBlF,gBAAK,SAAAC,GAAU,IAAD,EACEC,mBAAS,CAC/CiF,SAAU,CACNC,UAAW,WACXf,EAAG,IACHgB,SAAS,KALuB,mBACjCC,EADiC,KAClBC,EADkB,KASxC,OACI,kBAACN,EAAc5E,SAAf,CAAwBhB,MAAK,eAAM,CAACiG,gBAAeC,sBAC7CtF,EAAMQ,aC0BL+E,EAvCIxF,gBAAK,YAA0B,IAAvBoF,EAAsB,EAAtBA,UAAWK,EAAW,EAAXA,KAAW,EACrBvF,mBAAuB,aAAdkF,EAA2B,OAAS,MADxB,mBACtCM,EADsC,KAChCC,EADgC,OAEbzF,oBAAS,GAFI,mBAEtC0F,EAFsC,KAE5BC,EAF4B,OAGrB3F,oBAAS,GAHY,mBAGtC4F,EAHsC,KAGhCC,EAHgC,KAM7CjH,qBAAU,WAEN,OADAkH,OAAOC,iBAAiB,QAASC,GAC1B,WACHF,OAAOG,oBAAoB,QAASD,MAEzC,CAACR,IAEJ5G,qBAAU,WACN6G,EAAsB,aAAdP,EAA2B,OAAS,MAC5CW,GAAQ,GACRK,YAAW,kBAAML,GAAQ,KAAQ,OAClC,CAACN,IAEJ,IAAMS,EAAyB,SAAChH,GACxB,CAAC,UAAW,aAAamH,SAASnH,EAAEoH,OACpCC,KAIFA,EAAO,WAETV,GAAY,GACZO,YAAW,kBAAMP,GAAY,KAFd,KAGfO,YAAW,kBAzBUT,EAAiB,SAATD,EAAkB,KAAO,UAyBvBc,MAGnC,OACI,yBAAK9D,QAAS6D,EAAMlE,UAAS,qCAAgCyD,EAAO,SAAW,GAAlD,YAAwDF,EAAW,OAAS,KACnGH,EAAKC,O,gBCuBJe,G,MArDG,SAACxG,GAAW,IAAD,EACmBsB,qBAAW0D,GAA/CK,EADiB,EACjBA,cAAeC,EADE,EACFA,iBACfJ,EAAaG,EAAbH,SAFiB,EAIKjF,mBAAS,MAJd,mBAIlBwG,EAJkB,KAITC,EAJS,OAKuBzG,mBAAS,MALhC,mBAKlB0G,EALkB,KAKAC,EALA,KAOzB/H,qBAAU,WACN6H,EAAW,CAAC,EAAG,EAAG,EAAG,EAAG,GAAGG,KAAI,SAAAC,GAAG,OAAI,kBAACC,EAAD,CAAgB9D,IAAK+D,eAAU5H,MAAO0H,EAAK1C,EAAGc,EAASd,EAAG6C,qBAAsBA,QACtHL,EAAoB,CAAC,WAAY,aAAaC,KAAI,SAAAK,GAAC,OAAI,kBAACH,EAAD,CAAgB9D,IAAK+D,eAAU5H,MAAO8H,EAAGC,QAASjC,EAASC,UAAWA,UAAW+B,EAAGD,qBAAsBA,UAClK,CAAC/B,IAEJ,IAAM+B,EAAuB,SAAAhI,GACzBqG,EAAiB,2BAAKD,GAAN,IAAqBH,SAAS,2BAAMG,EAAcH,UAArB,kBAAgCjG,EAAEmI,OAAO1I,KAAOO,EAAEE,cAAcC,YAIjH,OACI,oCACI,yBAAKgD,UAAU,aACX,yBAAKA,UAAU,gCAAf,mBAIA,0BAAMA,UAAU,uBACZ,wBAAIA,UAAU,6BACV,wBAAIa,IAAK+D,gBACL,2BAAO5E,UAAU,6BAA6BC,QAAQ,KAAtD,qBACA,uBAAGD,UAAU,4BAAb,uFACA,yBAAKA,UAAU,+BACVqE,IAIT,wBAAIxD,IAAK+D,gBACL,2BAAO5E,UAAU,6BAA6BC,QAAQ,aAAtD,cACA,uBAAGD,UAAU,4BAAb,mKACA,yBAAKA,UAAU,yCACTuE,KAId,2BACIlE,QAAS,kBAAM6C,EAAiB,2BAAID,GAAL,IAAoBH,SAAS,2BAAKG,EAAcH,UAApB,IAA8BE,SAAS,QAClG3B,GAAG,mBACHjB,KAAK,SACLpD,MAAM,8CASxB2H,EAAiBhH,gBAAK,YAA6D,IACjFsH,EADuBJ,EAAyD,EAAzDA,qBAAsB9B,EAAmC,EAAnCA,UAAWf,EAAwB,EAAxBA,EAAGhF,EAAqB,EAArBA,MAAO+H,EAAc,EAAdA,QAOtE,OALI/C,EACAiD,EAAWC,OAAOlD,KAAOkD,OAAOlI,GACzB+F,IACPkC,EAAWlC,IAAcgC,GAGzB,2BACII,MAAO,CACHC,MAAOH,EAAW,QAAU,QAC5BI,gBAAiBJ,EAAW,aAAe,SAE/C5E,QAASwE,EACT7E,UAAWgC,EAAC,yBAA8B,iCAC1C1F,KAAM0F,EAAI,IAAM,YAChB5B,KAAK,SACLpD,MAAOA,OChDJsI,EAzBI,SAAC,GAAwC,IAAtCC,EAAqC,EAArCA,aAAcC,EAAuB,EAAvBA,WAAYC,EAAW,EAAXA,KAAW,EAC1BpH,IAArBG,EAD+C,EAC/CA,SAAUE,EADqC,EACrCA,OACZgH,EAAa,SAACC,GAAD,OAAUC,IAAMD,GAAME,OAAO,aAEhD,OACI,yBAAK7F,UAAU,gBACX,kDACA,2CAAiB0F,EAAWH,IAC5B,6CAAmBG,EAAWF,IAE9B,4BAAQxF,UAAU,UACd,kBAAC,IAAD,CAAMM,GAAE,aAAQmF,EAAKK,MAAb,iBAA2BpH,EAAO2C,KAA1C,iBAGJ,4BAAQrB,UAAU,UACd,kBAAC,IAAD,CAAMM,GAAE,aAAQmF,EAAKK,MAAb,WAAR,2BAGJ,4BAAQzF,QAAS,kBAAM7B,EAAS,IAAGwB,UAAU,UACzC,kBAAC,IAAD,CAAMM,GAAE,aAAQmF,EAAKK,MAAb,iBAA2BpH,EAAO2C,GAAlC,YAAR,6B,iBCrBhBuE,IAAMG,OAAOC,KAKb,IAoBeC,EApBDtI,gBAAK,YAAgB,IAAbuI,EAAY,EAAZA,MAAY,EACJrI,mBAAS,MADL,mBACvBsI,EADuB,KAChBC,EADgB,OAEAvI,mBAAS,GAFT,mBAEvBwI,EAFuB,KAEdC,EAFc,KAa9B,OATA7J,qBAAU,WACN,IAAM8J,EAAgBC,aAAY,kBAAMF,EAAW9D,KAAKiE,MAAMjE,KAAKC,MAAM3B,KAAKC,MAAQmF,GAAO,QAAQ,KACrG,OAAO,kBAAMQ,cAAcH,MAC5B,IAEH9J,qBAAU,WACN2J,EAASR,IAAMM,GAAOS,aACvB,CAACN,IAGA,0BAAMO,MAAK,UAAKhB,IAAMM,GAAOL,OAAO,eAAiB7F,UAAU,SAC3D,gCAASmG,OCaNU,G,MAhCIlJ,gBAAK,YAAuC,IAApCuI,EAAmC,EAAnCA,MAAOY,EAA4B,EAA5BA,SAAU9E,EAAkB,EAAlBA,EAAG+E,EAAe,EAAfA,SAE3C,OACI,6BAAS/G,UAAU,gBACf,iCACI,0BAAMA,UAAU,wBACZ,uDAIR,yBAAKA,UAAU,yBACX,yBAAKA,UAAU,4BAAf,uBACyB+G,EADzB,KAEI,yDAC6B,kBAAC,EAAD,CAAOb,MAAOA,IAD3C,OAMR,yBAAKlG,UAAU,0BACX,8DACkC,gCAAS8G,GAD3C,KAGA,+CACmB,gCAAS9E,EAAT,QAAuB,IAANA,EAAU,IAAM,IADpD,mCCbHgF,G,MAAa,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,eAAgBC,EAAkB,EAAlBA,YAAkB,EAEtBhI,qBAAW1B,GAA1CM,EAFqD,EAErDA,YAAoBK,GAFiC,EAExCF,MAFwC,EAEjCE,QACtBgJ,EAAUC,kBAAO,GACf1I,EAAWL,IAAXK,OAJqD,EAK/Bb,mBAAS,MALsB,mBAKtDwJ,EALsD,KAK7CC,EAL6C,OAM7BzJ,mBAAS,MANoB,mBAMtDwB,EANsD,KAM5CC,EAN4C,OAOnCzB,mBAAS,MAP0B,mBAOtD0J,EAPsD,KAO/CC,EAP+C,OAQ/B3J,oBAAS,GARsB,mBAQtD4J,EARsD,KAQ7CC,EAR6C,KASvDC,EAAS/I,IAAMgJ,YAAYD,SAazBE,EAAiB,WACnBR,IACK3H,MAAK,SAAAoI,GACFb,EAAea,EAAKxI,MAEvBO,OAAM,SAAAN,GACAA,GAAOA,EAAIF,UAAoC,MAAxBE,EAAIF,SAAS0I,QACnC5J,IAEJzB,QAAQC,WAAWsK,GACnBC,EAAY3H,EAAKiI,MAGzBE,GAAW,GACXJ,EAAW,OAoCf,OAjCA7K,qBAAU,WAQN,OAPA0K,EAAQpC,SAAU,EAEdrG,EAAOxB,UAAYwB,EAAOxB,WAAaY,IACvC0J,EAAS,MACTF,EAAW,OAGR,WACHE,EAAS,MACTlI,EAAY,MACZoI,GAAW,GACXJ,EAAW,MACXH,EAAQpC,SAAU,KAEvB,IAEHtI,qBAAU,WAAO,OAAO,kBAAMkL,EAAOK,OAAO,2BAE5CvL,qBAAU,WACF0K,EAAQpC,SACJsC,IACAK,GAAW,GAlDD,SAAUxK,EAAUsK,EAAUS,GAC5C/K,GAAaY,IAAgBZ,GAC7BsK,EAAS,MACTS,MAGAT,EAAS,yCACTE,GAAW,IA4CPQ,CAAcxJ,EAAOxB,SAAUsK,EAAUK,MAIlD,CAACR,EAAS3I,EAAOxB,WAEpBT,qBAAU,WACN,OAAO,kBAAMkL,EAAOK,OAAO,8BAC5B,CAAClK,IAEG,CAAEuB,WAAUkI,QAAOE,UAASH,gBCpFvC1I,IAAMuJ,QAAQrJ,iBAAkB,EAGzB,IAAMoI,EAAc,SAAS3H,EAAKiI,GAAYA,EAASjI,IAEjD0H,EAAiB,SAACa,EAAKxI,GAAN,OAAsBA,EAAYwI,EAAIlI,OAEvDwI,EAAgB,WAEzB,MAAO,CAAEf,QADO,SAACnK,EAAUmL,GAAWzJ,IAAM0J,IAAN,gBAAmBpL,EAAnB,SAAoC,CAAEwB,OAAQ2J,KAClEpB,iBAAgBC,gBAqBzBqB,EAAgB,WAAQ,MAAO,CAAEtB,iBAAgBC,gBAmBjDsB,EAAU,SAACtL,EAAUmL,GAC9B,OAAO,kBAAMzJ,IAAM0J,IAAN,gBAAmBpL,EAAnB,SAAoC,CAAEwB,OAAQ2J,MAGlDI,EAAU,SAACvL,EAAUmL,EAAOK,GACrC,OAAO,kBAAM9J,IAAM+J,IAAN,gBAAmBzL,EAAnB,SAAoC,CAAE0C,KAAM,CAAEyI,QAAOK,YCrCtE,IA2PeE,EA3PAjL,gBAAK,SAACC,GAAW,IACpBc,EAAWL,IAAXK,OADmB,EAECb,oBAAS,iBAAO,CAAEqI,MAAO,IAAIpF,KAAQ+H,KAAK,MAF3C,mBAEtBC,EAFsB,KAEbC,EAFa,OAGLlL,mBAAS,MAHJ,mBAGtB4H,EAHsB,KAGhBuD,EAHgB,OAIHnL,oBAAS,GAJN,mBAItB0J,EAJsB,aAKY0B,sBA0FvC,SAAqBlH,EAAO5E,GAExB,OAAQA,EAAOiD,MACX,IAAK,OACD,OAAOjD,EAAO+L,QAClB,IAAK,OACD,OAAOnH,EAAMoH,MAAM,GACvB,IAAK,OACD,IAAIC,EAAW5G,KAAKC,OAAOV,EAAMQ,OAAS,GAAKC,KAAKE,UAEhD2G,EAAQ,YAAOtH,GACfuH,EAAcD,EAASE,QAE3B,OADAF,EAASG,OAAOJ,EAAU,EAAGE,GACtBD,EACX,QACI,OAAOtH,KAzG4C,OALpC,mBAKtB0H,EALsB,KAKTC,EALS,OAMS7L,mBAAS,MANlB,mBAMtB8L,EANsB,KAMTC,EANS,OAOG/L,mBAAS,GAPZ,mBAOtBkJ,EAPsB,KAOZ8C,EAPY,OAQH3K,qBAAW0D,GAA7BK,cACwCH,SAAxCd,EATqB,EASrBA,EAAGe,EATkB,EASlBA,UAAWC,EATO,EASPA,QAChB8G,EAAU1C,iBAAO,MACjB2C,EAAU3C,iBAAO,MAED4C,EAAkBhD,EAAW,CAC7CC,eAAgB,SAACa,EAAKxI,IAClBwI,EAAMA,EAAIlI,MAEFqK,SAAWnC,EAAImC,QAAQ1H,OAAS,IACpCjD,EAAYwI,GACZkB,EAAQlB,GACR4B,EAAkB,CACdtJ,KAAM,OACN8I,QAASpH,EAAegG,EAAImC,QAASjI,OAIjDkF,YAAakB,IAAgBlB,cAbzBI,WAeY4C,EAAkBlD,EAAW,eAAIuB,MAA7CjB,WAoCR,SAAS6C,EAA4BtN,GACjC,IAAIuN,EACJ,OAAQvN,EAAEoH,MACN,IAAK,YACDmG,EAAMN,EACN,MACJ,IAAK,aACDM,EAAML,EACN,MACJ,QACI,OAGJK,EAAIrF,UACJqF,EAAIrF,QAAQsF,QACZD,EAAIrF,QAAQuF,QACZvG,YAAW,WACHqG,EAAIrF,SACJqF,EAAIrF,QAAQwF,SAEjB,MA+DX,SAASC,GAAoB3N,EAAG4N,GAC5B5N,EAAE6N,kBA5BN,SAA8BtH,EAAMqH,GAChC,IAAMR,EAAO,YAAOxE,EAAKwE,SACrBU,EAAMV,EAAQW,WAAU,SAAAtI,GAAC,OAAIA,EAAEhC,KAAO8C,EAAK9C,IAAMgC,EAAEuI,OAASzH,EAAKyH,QAKrE,GAHKZ,EAAQU,GAAKG,SAA2C,IAAhCb,EAAQU,GAAKG,QAAQvI,SAC9C0H,EAAQU,GAAKG,QAAU,CAAC,CAAEnF,KAAMmD,EAAQ5C,MAAO+D,QAAS,MAExDA,EAAQU,GAAKG,QAAQvI,OAAS,EAAG,CACjC,IAAIwI,EAAUd,EAAQU,GAAKG,QAAQvI,OAC/ByI,EAAWf,EAAQU,GAAKG,QAAQC,EAAU,GAE1CnF,IAAMoF,EAASrF,MAAQC,IAAMkD,EAAQ5C,OACrC+D,EAAQU,GAAKG,QAAQnI,KAAK,CAAEgD,KAAMmD,EAAQ5C,MAAO+D,QAAS,CAACQ,KAE3DR,EAAQU,GAAKG,QAAQC,EAAU,GAAGd,QAAQtH,KAAK8H,GAGvD,IAAIQ,EAAO,2BAAQxF,GAAR,IAAcwE,QAAQ,YAAKA,KACtCjB,EAAQiC,GAWUC,CAAqBzB,EAAY,GAAIgB,GACvDf,EAAkB,CAAEtJ,KAAMqK,IAsB9B,OA9IAhO,qBAAU,WACNuN,GAAc,kBAAMxB,EAAQ9J,EAAOxB,SAAU,CAACiO,IAAKzM,EAAO2C,UAC3D,IAEH5E,qBAAU,WACFgJ,GACAiE,EAAkB,CACdtJ,KAAM,OACN8I,QAASpH,EAAe2D,EAAKwE,QAASmB,OAAOpJ,QAGtD,CAACA,IAEJvF,qBAAU,WACN,GAAIgJ,GAAQgE,EAAa,CACrB,IAAI4B,EAAgB5F,EAAKwE,QAAQ1H,OAASP,EACtCsJ,EAAiBD,EAAgB5B,EAAYlH,OACjDsH,EAAYrH,KAAKC,MAAM,IAAM6I,EAAiBD,IAOlD,OAJA5B,GAAeA,EAAYlH,OAAS,GAAKqH,EAAe,kBAAC,EAAD,CAAY/I,IAAK+D,eAAU7B,UAAWA,EAAWK,KAAMqG,EAAY,MAC3HA,GAAsC,IAAvBA,EAAYlH,QA0G/B,SAAoBkD,GAChB,IAAIoD,EAAM,IAAI/H,KACdiI,EAAW,2BAAKD,GAAN,IAAeD,SACzBpD,EAAK8F,SAAS5I,KAAK,CACfuD,MAAO4C,EAAQ5C,MACf2C,MACA/B,SAAUrB,EAAKwE,QAAQ1H,OACvBiJ,cAAeJ,OAAOpJ,GAAKyD,EAAKwE,QAAQ1H,OACxCP,EAAGoJ,OAAOpJ,GACVe,cAEJ0C,EAAKgG,aAAe5C,EACpBqB,GAAc,kBAAMzB,EAAQ/J,EAAOxB,SAAU,CAAEiO,IAAKzM,EAAO2C,GAAIyE,MAAOL,EAAKK,OAASL,MAtHzCiG,CAAWjG,GAEtD9B,OAAOC,iBAAiB,UAAWuG,GAC5B,WACHxG,OAAOG,oBAAoB,UAAWqG,GACtCP,EAAe,SAEpB,CAACH,EAAa1G,IAmHb,yBAAK/C,UAAU,sBACTyF,GACE,oCACI,yBAAKzF,UAAU,4BACX,yCACa,0BAAMA,UAAU,uBAAsB,4BAAKyF,EAAKnJ,QAE7D,6BACI,kBAAC,IAAD,CAAM0D,UAAU,SAASM,GAAE,aAAQ5B,EAAOxB,SAAf,iBAAgCwB,EAAO2C,KAAlE,mBAMdoE,IAASzC,EAEH,oCACI,kBAAC,EAAD,OAGJ,qCACO8F,EAAQD,KAAOc,GACd,oCACKA,EAED,yBAAK3J,UAAU,mBACX,2BACIoK,IAAKN,EACLzJ,QAAS,SAACxD,GAAD,OAAO2N,GAAoB3N,EAAG,SACvCmD,UAAU,iBACVqB,GAAG,uBACHjB,KAAK,SACLpD,MAAM,SAEV,2BACIoN,IAAKL,EACL1J,QAAS,SAACxD,GAAD,OAAO2N,GAAoB3N,EAAG,SACvCmD,UAAU,iBACVqB,GAAG,uBACHjB,KAAK,SACLpD,MAAM,UAId,yBAAKgD,UAAU,6BACX,yBAAKqB,GAAG,wBAAwB8D,MAAO,CAAExD,MAAM,GAAD,OAAKoF,EAAL,SAGhD+B,EAAQ5C,OACN,kBAAC,EAAD,CACIA,MAAO4C,EAAQ5C,MACfY,SAAUrB,EAAKwE,QAAQ1H,OACvBP,EAAGA,EACH+E,SAAUA,KAOxB+B,EAAQD,KACN,oCACI,kBAAC,EAAD,CACItD,aAAcuD,EAAQ5C,MACtBV,WAAYsD,EAAQD,IACpBpD,KAAMA,MAQ5B8B,GAAS,yBAAKvH,UAAU,SAAf,iFCvQV2L,G,MAAclO,wBAAc,OAE5BmO,EAAe,SAAChO,GAAW,IAAD,EACaC,oBAAS,eADtB,mBAC5BgO,EAD4B,KACVC,EADU,KAGnC,OACI,kBAACH,EAAY3N,SAAb,CAAsBhB,MAAO,CAAC6O,mBAAkBC,wBAC3ClO,EAAMQ,WC8BJ2N,G,MA5BcpO,gBAAK,YAAgF,IAA7EqO,EAA4E,EAA5EA,iBAAkBC,EAA0D,EAA1DA,oBAAqBC,EAAqC,EAArCA,mBAAoBC,EAAiB,EAAjBA,WAC5F,OACI,oCACMH,GACE,yBAAKhM,UAAU,gCACX,2BACI4G,MAAM,YACNvG,QAAS,SAAAxD,GAAC,OAAIqP,EAAmBrP,EAAG,SACpCmD,UAAU,eAAeI,KAAK,SAASpD,MAAM,SACjD,2BACI4J,MAAM,0BACNvG,QAAS,SAACxD,GAAD,OAAOqP,EAAmBrP,EAAG,CAAEuD,KAAM,YAC9CJ,UAAU,iBAAiBI,KAAK,SAASpD,MAAM,aAIxDgP,GAAoBG,GACnB,2BACI9L,QAAS,kBAAM4L,GAAoB,IACnCjM,UAAU,+BACVI,KAAK,SACLpD,MAAM,W,4BC7B1B4I,IAAMG,OAAOqG,MACbxG,IAAMG,OAAOC,KAON,IAAMqG,GAAY,SAAA1G,GAAI,OAAIC,IAAMD,GAAMgB,WCwD9B2F,GA7DK3O,gBAAK,YAA2B,IAAxB4O,EAAuB,EAAvBA,QAASzB,EAAc,EAAdA,QAAc,EACnBjN,oBAAS,GADU,mBACxC2O,EADwC,KAChCC,EADgC,KAGzCC,EAEN,SAA4B5B,GACxB,OAAOA,EAAQrG,KAAI,SAAAkI,GAAE,OAEjB,kBAAC,WAAD,CAAU9L,IAAK+D,gBACX,yBAAK5E,UAAU,wBACX,yBAAK4G,MAAOhB,IAAM+G,EAAGhH,MAAME,OAAO,yBAA0B7F,UAAU,qBACjEqM,GAAUM,EAAGhH,OAElB,yBAAK9E,IAAK+D,eAAU5E,UAAU,wBAEtB2M,EAAG1C,QAAQxF,KAAI,SAACnC,EAAGsK,GAAJ,OACX,0BACI/L,IAAG,mBAAcyB,EAAd,YAAmBsK,GACtBzH,MAAO,CACHxD,MAAO,OACPC,OAAQ,OACRiL,QAAS,eACTC,OAAQ,SACRC,aAAc,MACd1H,gBAAuB,SAAN/C,EAAe,WAAa,cARrD,cAbb0K,CAAmBlC,GAiClC,OACI,oCACMyB,GACE,yBAAKvM,UAAU,eACX,yBAAKA,UAAU,uBACX,yBACIA,UAAU,6BADd,6BAE+B0M,EAAOnK,OAFtC,QAEqE,IAAlBmK,EAAOnK,OAAe,GAAK,KAE7EmK,EAAOnK,OAAS,GACb,4BACIvC,UAAU,8BACVK,QAAS,kBAAMoM,GAAWD,KAExBA,EAA4B,mBAAnB,mBAItBA,EAASE,EAAOO,UAAYP,EAAOA,EAAOnK,OAAS,QCiDzD2K,GAjGEvP,gBAAK,YAAsC,IAAnCwP,EAAkC,EAAlCA,iBAAkB/J,EAAgB,EAAhBA,KAAMuH,EAAU,EAAVA,IAAU,EAC9B9M,oBAAS,iBAAO,CAAEgN,KAAMzH,EAAKyH,KAAMvK,GAAI8C,EAAK9C,OADd,mBAChD8M,EADgD,KACzCC,EADyC,OAErBxP,oBAAS,GAFY,mBAEhDyP,EAFgD,KAErCC,EAFqC,OAGP1P,oBAAS,GAHF,mBAGhDmO,EAHgD,KAG9BC,EAH8B,OAInBpO,oBAAS,GAJU,mBAIhDsO,EAJgD,KAIpCqB,EAJoC,OAKLtO,qBAAWyM,GAArDE,EAL+C,EAK/CA,iBAAkBC,EAL6B,EAK7BA,oBAL6B,EAMjBjO,oBAAS,GANQ,mBAMhD4P,EANgD,KAMnCC,EANmC,OAQM1G,EAAW,eAAIuB,MAAjC2B,GARY,EAQ/C7K,SAR+C,EAQxBiI,YAE/B7K,qBAAU,WACN,OAAO,WACH8Q,GAAa,GACbtB,GAAoB,GACpBuB,GAAc,MAEnB,IASH,IAYMG,EAAiB,SAAC9Q,GACpB,IAAIwG,EAAOxG,EAAEE,cAAc6Q,aAAa,QACxC,GAAI/Q,EAAEmI,OAAOhI,OAASoQ,EAAM/J,KAAUxG,EAAEmI,OAAOhI,MAAO,CAClD,IAAI6Q,EAAO,2BAAQT,GAAR,kBAAgB/J,EAAOxG,EAAEmI,OAAOhI,QAC3CqQ,EAAQQ,GACR,IAAIC,EAAc,YAAOjC,EAAiB5B,SAC1C6D,EAAenD,GAAf,eAA2BkD,GAC3B,IAAI5C,EAAO,2BAAQY,GAAR,IAA0B5B,QAAQ,YAAK6D,KAClDhC,EAAoBb,GACpBf,GAAc,kBAAMzB,EAAQoD,EAAiB/F,MAAO,CAAEqF,IAAKU,EAAiBV,IAAKrF,MAAO+F,EAAiB/F,OAASmF,QAI1H,OACI,oCACI,wBACIjL,UAAU,aACV+N,aAAc,kBAAMP,GAAc,IAClCQ,aAAc,kBAAMR,GAAc,KAElC,yBAAKxN,UAAU,SAETsN,GAAanB,EACX,oCACI,kBAAC,EAAD,CACIH,iBAAkBA,EAClBG,WAAYA,EACZF,oBAAqBA,EACrBC,mBAxCD,SAACrP,EAAGM,GAC3BN,EAAE6N,iBACFuB,GAAoB,GACA,WAAhB9O,EAAOiD,MACP+M,EAAiBxC,OAuCH,yBAAKxF,MAAO,CAAEC,MAAO4G,EAAmB,YAAc,IAAMhM,UAAU,eAAe2K,EAAM,GAGjG,2BACIsD,SAAUjC,EACV7G,MAAO,CACHE,gBAAiB2G,EAAmB,YAAc,IAEtD7L,OAAQwN,EAAgB3N,UAAU,wBAAwBqD,KAAK,OAAOjD,KAAK,OAAO8N,aAAcd,EAAMvC,OAC1G,2BACIoD,SAAUjC,EACV7G,MAAO,CACHE,gBAAiB2G,EAAmB,YAAc,IAEtD7L,OAAQwN,EAAgB3N,UAAU,sBAAsBqD,KAAK,KAAKjD,KAAK,OAAO8N,aAAcd,EAAM9M,MAEnGmN,GAAgBtB,IAAeH,IAAsB,4BAAQhM,UAAU,4BAA4BK,QAAS,kBAAMqN,GAAgBD,KAA7E,UAQhE,kBAAC,GAAD,CAAalB,QAASkB,EAAa3C,QAAS1H,EAAK0H,cCmB9CqD,GA9GFxQ,gBAAK,SAACC,GAAW,IAAD,EACDC,mBAAS,MADR,mBAClB4H,EADkB,KACZuD,EADY,OAECnL,mBAAS,MAFV,mBAElBkE,EAFkB,KAEXqM,EAFW,OAGI/P,IAArBK,EAHiB,EAGjBA,OAAQJ,EAHS,EAGTA,SACRwN,EAAwB5M,qBAAWyM,GAAnCG,oBAJiB,EAMoC9E,EAAW,eAAIoB,MAA1DiG,EANO,EAMjBhP,SAAmC2K,EANlB,EAMM1C,WANN,EAOoCN,EAAW,eAAIuB,MAAjC2B,GAPlB,EAOjB7K,SAPiB,EAOMiI,YAPN,EAQ0CN,EAAW,ePevE,CAAEK,QADO,SAACnK,EAAUmL,GAAX,OAAqBzJ,IAAM0P,OAAN,gBAAsBpR,EAAtB,SAAuC,CAAEwB,OAAQ2J,KACpEpB,iBAAgBC,iBOfhBqH,EARO,EAQjBlP,SAAsCmP,EARrB,EAQSlH,WAGlCjL,EAAY,iBAAkBkS,GAE9B9R,qBAAU,WACNuN,GAAc,kBAAMxB,EAAQ9J,EAAOxB,SAAU,CAACiO,IAAKzM,EAAO2C,UAC3D,IAEH5E,qBAAU,WACH4R,IACCrF,EAAQqF,GACRvC,EAAoBuC,MAEzB,CAACA,IAEJ5R,qBAAU,WACFgJ,GACIA,EAAK8F,SAAShJ,OAAS,GACvB7F,QAAQC,ICtCM,SAAC8I,EAAMnD,GACjC,IAAImM,EAAmB7I,IAAMH,EAAK8F,SAASjJ,GAAG4D,OAC1CwI,EAAiB9I,IAAMH,EAAK8F,SAASjJ,GAAGuG,KAExCC,EAAUrD,EAAKwE,QACdxF,KAAI,SAAArB,GACD,OAAItC,KAAK2N,KAAsB3N,KAAKsC,EAAK0H,QAAQxI,GAAGqD,MACzCvC,EAAK0H,QAAQxI,GAAG2H,QAGpB,QAEV0E,QAAO,SAAA7J,GAAC,OAAU,OAANA,KAEjB,MAAQ,CAAEoB,MAAOuI,EAAkB5F,IAAK6F,EAAgB5F,QAASA,GDwBzC8F,CAAenJ,EAAM,IAIrCA,GAAQA,EAAKwE,SAAWxE,EAAKwE,QAAQ1H,OAAS,GAC9CsM,MAIL,CAACpJ,IAEJ,IHtCuBE,EAAME,EGsCvBgJ,EAAc,WAChBT,EAAS3I,EAAKwE,QAAQxF,KAAI,SAACrB,EAAMuH,GAC7B,IAAImE,EAAY,CACZ3B,mBACAtM,IAAI,aAAD,OAAeuC,EAAK9C,GAApB,YAA0B8C,EAAKyH,MAClCF,IAAKA,EACLvH,QAGJ,OACI,kBAAC,GAAa0L,QAK1B,SAAS3B,EAAiBxC,GACtB,IAAMoE,EAAW,eAAQtJ,GACzBsJ,EAAY9E,QAAQT,OAAOmB,EAAK,GAChCoE,EAAYjI,SAAWiI,EAAY9E,QAAQ1H,OAC3CyG,EAAQ+F,GACRjD,EAAoBiD,GAEpB7E,GAAc,kBAAMzB,EAAQ/J,EAAOxB,SAAU,CAAEiO,IAAK4D,EAAY5D,IAAKrF,MAAOiJ,EAAYjJ,OAASiJ,MAGrG,SAASC,IACLR,GAAiB,kBPdEtR,EOcewB,EAAOxB,SPdZmL,EOcsB,CAAE8C,IAAKzM,EAAO2C,IPb9D,kBAAMzC,IAAM0P,OAAN,gBAAsBpR,EAAtB,SAAuC,CAAEwB,OAAQ2J,KADxC,IAACnL,EAAUmL,KOiBjC,OACI,oCACI,yBAAKrI,UAAU,eACX,yBAAKA,UAAU,QACTuO,GAAkBU,KAAKC,UAAUX,GAElC9I,GACG,oCACI,yBAAKzF,UAAU,cAAcyF,EAAKnJ,KAAlC,KAA0CmJ,EAAKoF,KAA/C,OAAyDpF,EAAKnF,GAA9D,KACA,4BAAQN,UAAU,UAAS,kBAAC,IAAD,CAAMM,GAAE,UAAKhC,EAAS6Q,SAAd,YAAR,WAC3B,4BAAQnP,UAAU,gBAAgBK,QAAS,kBAAM2O,MAAjD,oBAEA,6BAAShP,UAAU,cACf,4BAAQA,UAAU,sBAAlB,aACA,uBAAGA,UAAU,oBAAb,aAA0C,0BAAMA,UAAU,qBAAqByF,EAAKqB,UAApF,wBACErB,EAAKgG,aAEC,uBAAGzL,UAAU,oBAAb,8BACI,0BAAMA,UAAU,sBHrFjC2F,EGsFiCF,EAAKgG,aHtFhC5F,EGsF8C,kBHtFnCD,IAAMD,GAAME,OAAOA,MG0FvB,uBAAG7F,UAAU,mBAAmBmF,MAAO,CAACxD,MAAO,cAAe0D,gBAAiB,eAA/E,mDAKZ,6BAASrF,UAAU,iBACf,wBAAIA,UAAU,SACV,4BAAQA,UAAU,uBAAlB,SACC+B,WE9FtBqN,I,MAbF,WAAO,IACR1Q,EAAWL,IAAXK,OACSA,EAAOxB,SAExB,OACI,yBAAK8C,UAAU,eACX,yBAAKA,UAAU,QACX,yBAAKA,UAAU,yBAAf,oBAAyDtB,EAAOxB,cCuCjEmS,I,MA3CG1R,gBAAK,YAAe,IAAZ8H,EAAW,EAAXA,KACd/G,EAAWL,IAAXK,OAyBR,OACI,yBAAKyG,MAAO,CAACmK,YAlBa,SAACjD,GAC3B,IAAIkD,EAAM,MACV,OAAKlD,EAECA,EAAYkD,EACP,WACLlD,EAAY,EAAEkD,EACT,OACLlD,EAAY,EAAEkD,EACT,cACLlD,EAAY,EAAEkD,EACT,SAEJ,YAVI,OAeeC,CAxBF,SAAC/J,GACzB,OAAKA,EAAKgG,aAEH7F,IAAM,IAAI9E,MAAU8E,IAAMH,EAAKgG,cAFL,KAuBegE,CAAoBhK,KAAQzF,UAAU,aAClF,yBAAKA,UAAU,mBACX,kBAAC,IAAD,CAAMA,UAAU,OAAOM,GAAE,aAAQ5B,EAAOxB,SAAf,iBAAgCuI,EAAK0F,MAAQ1F,EAAKnJ,OAE/E,yBAAK0D,UAAU,mBAAmByF,EAAKoF,MACvC,yBAAK7K,UAAU,iBAAiByF,EAAKnF,IACrC,yBAAKN,UAAU,uBAAuByF,EAAKqB,SAA3C,uBACFrB,EAAK8F,SAAShJ,OAAS,GACrB,yBAAKvC,UAAU,oBACX,6CAAmBqM,GAAU5G,EAAK8F,SAAS9F,EAAK8F,SAAShJ,OAAO,GAAGsG,YCuEpE6G,I,MAvGD/R,gBAAK,SAACC,GAAW,IAAD,EAEAC,mBAAS,IAFT,mBAErB8Q,EAFqB,KAEbgB,EAFa,OAGY9R,mBAAS,MAHrB,mBAGrB+R,EAHqB,KAGPC,EAHO,OAIAhS,mBAAS,WAJT,mBAIrBiS,EAJqB,KAIbC,EAJa,KAKpBrR,EAAWL,IAAXK,OALoB,EAS8BsI,EAAW,CAAEE,cAAaD,mBAAhE+I,EATQ,EASlB3Q,SAAiBiI,EATC,EASDA,WAAYG,EATX,EASWA,QAASF,EATpB,EASoBA,MAE9C9K,qBAAU,WACN6K,GAAW,kBX4CMpK,EW5CSwB,EAAOxB,SX6C9B,kBAAM0B,IAAM0J,IAAN,gBAAmBpL,EAAnB,YADO,IAACA,OW3ClB,IAEHT,qBAAU,WAAYuT,GAASH,EAAgBI,EAAiBD,MAAa,CAACA,IAE9E,IASMC,EAAmB,SAACD,GACtB,OAAOA,EAAMvL,KAAI,SAAAyL,GAAC,MAAK,CACnB5T,KAAM4T,EAAE5T,KACRmP,aAAcyE,EAAEzE,aAChB0E,QAASD,EAAEC,QACXjP,QAAS,kBAAC,GAAD,CAAWL,IAAKqP,EAAE/E,IAAK1F,KAAMyK,SAI9C,OACI,oCAEMzI,GACE,yBAAKzH,UAAU,eAAf,mBAKFuH,GAAS0H,KAAKC,UAAU3H,GAExByI,GAASA,EAAMzN,OAAS,GACtB,yBAAKvC,UAAU,eACX,yBAAKA,UAAU,cAAf,YAAqC,kBAAC,IAAD,CAAMA,UAAU,OAAOM,GAAE,aAAQ5B,EAAOxB,WAAxC,MAAwDwB,EAAOxB,WACpG,4BAAQ8C,UAAU,UAAS,kBAAC,IAAD,CAAMM,GAAE,aAAQ5B,EAAOxB,SAAf,eAAR,oBAE3B,yBAAK8C,UAAU,iBACX,yBAAKA,UAAU,iBACX,2BAAOC,QAAQ,SAASoB,GAAG,wBAA3B,wBACA,2BACI+O,WAAS,EACTC,SAvCD,SAAAxT,GACvB,IAAIyT,EAAMzT,EAAEE,cAAcC,MAC1B2S,EAAUW,EAAI/N,OAAS,EAAI+N,EAAM,KAsCTC,YAAY,mBACZlP,GAAG,gBACHjB,KAAK,OACL9D,KAAK,SACLU,MAAO2R,KAGf,yBAAK3O,UAAU,eACX,2BAAOqB,GAAG,qBAAqBpB,QAAQ,QAAvC,iBACA,4BAAQoQ,SA5CL,SAAAxT,GACvBkT,EAAUlT,EAAEE,cAAcC,QA2CgCA,MAAO8S,EAAQxT,KAAK,QACtD,4BAAQU,MAAM,QAAd,QACA,4BAAQA,MAAM,WAAd,iBACA,4BAAQA,MAAM,gBAAd,uBAKZ,yBAAKgD,UAAU,SAEV4P,GACGA,EACKjB,QAAO,SAAAuB,GAAC,OAAIA,EAAE5T,KAAKkU,cAAcxM,SAAS2K,EAAO6B,kBACjDC,MAAK,SAACC,EAAOC,GAAR,OAAmBD,EAAMZ,GAAUa,EAAOb,IAAW,EAAI,KAC9DrL,KAAI,SAAAyL,GAAC,OAAIA,EAAEhP,aAQ9B8O,GAA0B,IAAjBA,EAAMzN,QACb,yBAAKvC,UAAU,eACX,yBAAKA,UAAU,cAAf,YAAqC,kBAAC,IAAD,CAAMA,UAAU,OAAOM,GAAE,aAAQ5B,EAAOxB,WAAxC,MAAwDwB,EAAOxB,WACpG,yBAAK8C,UAAU,cAAf,wCAGA,4BAAQA,UAAU,UAAS,kBAAC,IAAD,CAAMM,GAAE,aAAQ5B,EAAOxB,SAAf,eAAR,0BCjFhC0T,I,MArBKjT,gBAAK,YAA2C,IAAxCiP,EAAuC,EAAvCA,MAAOiE,EAAgC,EAAhCA,WAAYC,EAAoB,EAApBA,cACrCC,EAAiB,SAAClU,EAAG8N,GACvB,IAAIvI,EAAI,eAAQyO,IACXzO,EAAK6H,QAAQU,IAAQ9N,EAAEmI,OAAOhI,QAC/BoF,EAAK6H,QAAQU,GAAO,CAAErK,GAAI,GAAIuK,KAAM,KAEpChO,EAAEmI,OAAOhI,OAASH,EAAEmI,OAAOhI,QAAUoF,EAAK6H,QAAQU,GAAK9N,EAAEmI,OAAO1I,QAChE8F,EAAK6H,QAAQU,GAAK9N,EAAEmI,OAAO1I,MAAQO,EAAEmI,OAAOhI,MAC5C8T,EAAc,2BAAKD,GAAN,IAAkB5G,QAAS7H,EAAK6H,aAIrD,OACI,yBAAKjK,UAAU,iBACX,yBAAKA,UAAU,wBAAwB4M,EAAM,GAC7C,2BAAO5M,UAAU,uBAAuBG,OAAQ,SAACtD,GAAD,OAAOkU,EAAelU,EAAG+P,IAAQxM,KAAK,OAAO9D,KAAK,SAClG,2BAAO0D,UAAU,uBAAuBG,OAAQ,SAACtD,GAAD,OAAOkU,EAAelU,EAAG+P,IAAQxM,KAAK,OAAO9D,KAAK,YCiF/F0U,GA5FCrT,gBAAK,SAACC,GAAW,IACrBc,EAAWL,IAAXK,OADoB,EAEIb,mBAAS,IAFb,mBAErBiJ,EAFqB,KAEXmK,EAFW,OAGQpT,oBAAS,iBAAO,CAChDvB,KAAM,GACNuO,KAAM,GACNvK,GAAI,GACJ2J,QAAS,IAAIiH,MAAMpK,GACnBqJ,QAAS,KACTrJ,SAAU,MATc,mBAGrB+J,EAHqB,KAGTC,EAHS,OAWQjT,mBAAS,IAXjB,mBAWrBsT,EAXqB,KAWTC,EAXS,OAamCpK,EAAW,ebLnE,CAAEK,QADO,SAACnK,EAAUwL,GAAX,OAAoB9J,IAAMa,KAAN,gBAAoBvC,EAApB,QAAoC,CAAE+N,QAASvC,KACjEzB,iBAAgBC,iBaKhBmK,EAbU,EAapBhS,SAAoCiS,EAbhB,EAaIhK,WAEhCjL,EAAY,eAAgBgV,GAE5B5U,qBAAU,WACN2U,EAGJ,SAA+BP,EAAY/J,GAEvC,IADA,IAAIyK,EAAe,GACVjP,EAAI,EAAGA,EAAIwE,EAAUxE,IAC1BiP,EAAa5O,KACT,kBAAC,GAAD,CAAa9B,IAAG,eAAUyB,EAAI,GAAKsK,MAAOtK,EAAGuO,WAAYA,EAAYC,cAAeA,KAG5F,OAAOS,EAVOC,CAAsBX,EAAY/J,MACjD,CAAC+J,EAAY/J,IAYhB,IAKM2K,EAAa,SAAA5U,GACXA,EAAEE,cAAcC,QAAU6T,EAAWhU,EAAEE,cAAcT,OACrDwU,EAAc,2BAAKD,GAAN,kBAAmBhU,EAAEE,cAAcT,KAAOO,EAAEE,cAAcC,UAgB/E,OACI,yBAAKgD,UAAU,WACX,yBAAKA,UAAU,cAAf,YAIA,0BAAMA,UAAU,iBACZ,2BAAOA,UAAU,sBAAsBG,OAAQsR,EAAYrR,KAAK,OAAO9D,KAAK,OAAOiU,YAAY,cAC/F,2BAAOvQ,UAAU,0BAA0BG,OAAQsR,EAAYrR,KAAK,OAAO9D,KAAK,OAAOiU,YAAY,sBACnG,2BAAOvQ,UAAU,0BAA0BG,OAAQsR,EAAYrR,KAAK,OAAO9D,KAAK,KAAKiU,YAAY,wBAGjG,yBAAKvQ,UAAU,kBACX,2BAAOA,UAAU,eAAeK,QApC1B,SAAAxD,GAClBoU,EAAYnK,EAAW,KAmC6C1G,KAAK,SAASpD,MAAM,aAE3EmU,EAAW5O,OAAS,GACjB,oCACI,yBAAKvC,UAAU,0BACX,+BACC6Q,GACG,oCACI,0BAAM7Q,UAAU,uBAAuB6Q,EAAWhG,MAClD,0BAAM7K,UAAU,uBAAuB6Q,EAAWvQ,MAI7D6Q,IAKb,2BAAOnR,UAAU,eAAeK,QA3CvB,SAAAxD,GACjBA,EAAE6N,iBAEFhO,QAAQC,IAAI,QAAS+B,EAAOxB,UAC5BoU,GAAe,kBbKEpU,EaLawB,EAAOxB,SbKVwL,EaLE,YAAC,aAC1B5C,MAAOpH,EAAOxB,UACX2T,GAFsB,IAGzB5G,QAAS4G,EAAW5G,QAAQ0E,QAAO,SAAArM,GAAC,OAAU,OAANA,ObGzC,kBAAM1D,IAAMa,KAAN,gBAAoBvC,EAApB,SAAqC,CAAE+N,QAASvC,KADzC,IAACxL,EAAUwL,MakCoCtI,KAAK,SAASpD,MAAM,qBC3C3F4I,IAAMG,OAAOC,KAEb,IAUe0L,GAVF,SAAC9T,GACV,IAAM+T,EAAY/L,IAAM,cAExB,OACI,yBAAK5F,UAAU,QACV2R,EAAUhL,YCORiL,I,MA5DFjU,gBAAK,SAACC,GAEf,OACI,yBAAKoC,UAAU,eACX,yBAAKA,UAAU,QACX,yBAAKA,UAAU,cAAf,QAIA,yBAAKA,UAAU,qBACX,iCACI,4BAAQA,UAAU,gBAAlB,SACA,uBAAGA,UAAU,mBACT,2CACc,uBAAGA,UAAU,aAAawB,KAAK,mDAA/B,qBADd,yNAGA,wVAE8F,qCAF9F,kEAMA,iVAEuC,uBAAGxB,UAAU,aAAawB,KAAK,mCAA/B,UAFvC,OAOR,iCACI,4BAAQxB,UAAU,gBAAlB,mBACA,uBAAGA,UAAU,mBACT,+FACkE,uBAAGA,UAAU,aAAawB,KAAK,KAA/B,QADlE,uaAWR,iCACI,4BAAQxB,UAAU,gBAAlB,aAIJ,uBAAGA,UAAU,mBACT,2EAC8C,kBAAC,IAAD,CAAMA,UAAU,aAAaM,GAAG,aAAhC,QAD9C,6FCHTuR,I,MA7CE,SAACjU,GACd,IADwB,EAEQC,mBAAS,MAFjB,mBAEjBwB,EAFiB,KAEPC,EAFO,OAIMzB,mBAHV,CAAEX,SAAU,KAAM4U,SAAU,OADxB,mBAIjBC,EAJiB,KAIRC,EAJQ,KAMxB3V,EAAY,WAAY0V,GAExB,IAAME,EAAe,SAAAF,IhB2DD,SAAAA,GACpB,OAAOnT,IAAMa,KAAK,iBAAkB,CAACsS,YAChCrS,MAAK,SAAAC,GAAC,OAAIA,EAAEC,QACZC,OAAM,SAAAN,GAAG,OAAIA,MgB7Dd2S,CAASH,GACJrS,MAAK,SAAAC,GAAC,OAAIL,EAAYK,MACtBE,OAAM,SAAAN,GAAG,OAAI7C,QAAQC,IAAI4C,EAAIF,SAAS0I,YAG/C,OACI,yBAAK/H,UAAU,eACX,yBAAKA,UAAU,aACLX,GACE,oCACI,yBAAKW,UAAU,cAAf,0BACA,0BAAMA,UAAU,kBACZ,2BAAOC,QAAQ,YAAf,YACA,2BAAOE,OAAQ,SAAAtD,GAAC,OAAID,EAAeC,EAAGkV,EAASC,IAAa5R,KAAK,OAAO9D,KAAK,aAE7E,2BAAO2D,QAAQ,YAAf,YACA,2BAAOE,OAAQ,SAAAtD,GAAC,OAAID,EAAeC,EAAGkV,EAASC,IAAa5R,KAAK,WAAW9D,KAAK,aAEjF,2BAAO+D,QAAS,kBAAM4R,EAAaF,IAAU/R,UAAU,mBAAmBI,KAAK,SAASpD,MAAM,eAKxGqC,GACE,oCACI,6BACK4P,KAAKC,UAAU7P,SC0CjC8S,GA3DHxU,gBAAK,WACb,OACI,oCACI,yBAAKqC,UAAU,gBACX,kBAACtC,EAAD,KACI,kBAAC,IAAD,KACI,kBAAC,EAAD,MACA,yBAAKsC,UAAU,OACX,kBAAC,EAAD,KACI,kBAAC,IAAD,KAEI,kBAAC,IAAD,CAAOoS,KAAK,QAAQlR,QAAS,kBAAC,GAAD,QAG7B,kBAAC,IAAD,CAAOkR,KAAK,IAAIlR,QAAS,kBAAC,GAAD,QAEzB,kBAAC,IAAD,CAAOkR,KAAK,YAAYlR,QAAS,kBAAC,GAAD,QACjC,kBAAC,IAAD,CAAOkR,KAAK,SAASlR,QAAS,kBAAC,EAAD,QAI9B,kBAAC,IAAD,CAAOkR,KAAK,gBACR,kBAAC,EAAD,CAAcA,KAAK,IAAI3R,UAAW2O,KAClC,kBAAC,IAAD,CAAOgD,KAAK,UACR,kBAAC,EAAD,CAAcA,KAAK,IAAI3R,UAAWiP,KAClC,kBAAC,EAAD,CAAc0C,KAAK,OAAO3R,UAAWuQ,MAGzC,kBAAC,IAAD,CAAOoB,KAAK,SAER,kBAAC,IAAD,CAAOA,KAAK,QAER,kBAAC,IAAD,CAAOA,KAAK,UAAUlR,QAClB,kBAAC2B,EAAD,KACI,kBAAC,EAAD,CAASpC,UAAWmI,OAI5B,kBAAC,EAAD,CAAcwJ,KAAK,IAAI3R,UAAW0N,QAQ9C,kBAAC,IAAD,CAAOiE,KAAK,IAAIlR,QAAS,yCAIrC,kBAAC,EAAD,aCpExBmR,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,GAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.3371fb5e.chunk.js","sourcesContent":["import { useEffect } from 'react'\r\n\r\n/**\r\n     * useEffect hook to log whenever a piece of state (or its initializer) changes\r\n     * @param   state       expected to be the return values of a useState call, but can be any variable that needs to be logged on change\r\n     * @param   setState    ^\r\n     * @return  undefined\r\n     * \r\n     * @todo    change args to take multiple pieces of state, each with their own dependency array\r\n     */\r\nexport const useLogState = (name, state, setState) => {\r\n    useEffect(() => {\r\n        state && console.log(`${name} changed:`, state);\r\n    }, [name, state, setState])\r\n}\r\n\r\n/**\r\n * Simple form input blur handler. Only works on top-level keys, don't use for nested form state.\r\n * @param {React.FocusEvent} e event object\r\n * @param {*} state useState state\r\n * @param {React.Dispatch<React.SetStateAction>} setState useState setter\r\n */\r\nexport const handleFormBlur = (e, state, setState) => {\r\n    let t = e.currentTarget;\r\n    \r\n    if ( !(!state[t.name] && !t.value) && (!state[t.name] || (state[t.name] && state[t.name] !== t.value))) {  // check if value exists and differs from current value\r\n        setState({...state, [t.name]: t.value})\r\n    }\r\n}\r\n\r\n/* to check whether key exists in state:\r\n        option 1: \r\n            if (!Object.keys(state).includes(t.name))\r\n            works if state is null or undefined\r\n        option 2:\r\n            if (!state[t.name])\r\n            works only is state is already an object (so for this, need to initialize useState with empty object, and not null) */","import { useState, useEffect } from 'react';\r\n\r\nexport const storeUser = (username, action) => {\r\n    switch (action) {\r\n        case 'set':\r\n            localStorage.setItem(\"username\", username);\r\n            break;\r\n        case 'get':\r\n            return localStorage.getItem('username');\r\n        case 'remove':\r\n            localStorage.removeItem(\"username\");\r\n            break;\r\n    }\r\n}","import React, {memo, useState, useEffect, createContext } from 'react';\r\nimport { useLogState } from '../hooks/state';\r\nimport { storeUser } from '../hooks/auth';\r\nexport const LoginContext = createContext(null);\r\n\r\nexport const LoginProvider = memo((props) => {\r\n    const [currentUser, setCurrentUser] = useState(storeUser(null, 'get'));\r\n\r\n    const login = user => {\r\n        setCurrentUser(user);\r\n        storeUser(user, 'set')\r\n    }\r\n\r\n    const logout = () => {\r\n        setCurrentUser(null);\r\n        storeUser(null, 'remove')\r\n    }\r\n\r\n    useLogState('LoginContext: currentUser', currentUser)\r\n\r\n    useEffect(() => {\r\n        // verify localstorage user against db on LoginContext mount\r\n    }, [])\r\n\r\n    return (\r\n        <LoginContext.Provider value={{...{currentUser, login, logout} }}>\r\n            {props.children}\r\n        </LoginContext.Provider>\r\n    )\r\n})","import { useNavigate, useLocation, useParams }  from 'react-router-dom';\r\n\r\n/**\r\n * Hook that returns location(), useNavigate() and useParams() as an obejct\r\n */\r\nexport const useRouteProps = () => {\r\n    return ({\r\n        location: useLocation(),\r\n        navigate: useNavigate(),\r\n        params: useParams(),\r\n    })\r\n}","import axios from 'axios';\r\nimport { storeUser } from '../hooks/auth';\r\nimport { LoginContext } from '../context/LoginContext';\r\nimport { useContext, useState, useEffect } from 'react';\r\n\r\naxios.defaults.withCredentials = true;\r\n\r\nconst checkResponseError = e => {\r\n    if (e.response.status === 401) {\r\n        // api says request wasn't authorized. handle\r\n        console.log('unauthorized');\r\n    }\r\n}\r\n\r\n/**\r\n     * Get a list instance from the database\r\n     * @param {object} query object with keys matching database listSchema\r\n     */\r\nexport const getList = async (query) => {\r\n    return axios.get('/db/list/', { params: query })\r\n        .then(r => r.data)\r\n        .catch(e => {\r\n            checkResponseError(e)\r\n        })\r\n}\r\n\r\n/**\r\n * Get a user instance from the database\r\n * @param {string} username \r\n * @param {object} args args.populate needs to be a single space-separated string, e.g. 'following followed'\r\n *                      nested population wouldn't work this way\r\n */\r\nexport const getUser = async (username, args) => {\r\n    return await axios.get(`/db/u/${username}${args && args.populate ? `?populate=${args && args.populate}` : ''}`)\r\n        .then(res => res.data)\r\n        .catch(err => err)\r\n}\r\n\r\n/**\r\n * Delete list from database\r\n */\r\nexport const deleteList = async (query) => {\r\n    return await axios.delete('/db/list', { params: query })\r\n        .then(r => r.data)\r\n        .catch(e => e)\r\n}\r\n\r\nexport const postList = async newList => {\r\n    return await axios.post('/db/list', { newList }, { withCredentials: true })\r\n        .then(r => r)\r\n        .catch(e => {\r\n            storeUser(null, 'remove')\r\n            console.log('error posting list');\r\n            console.log(e);\r\n        })\r\n}\r\n\r\n/**\r\n * Authenticate and authorize the user against the Passport.js validation\r\n * Single endpoint for both registration and login, as the backend route checks whether or not user exists, and creates one if not.\r\n * @param {Object} user object with 'username' and 'password' keys\r\n * @return {Object} returns status: 4xx if not validated, 2xx if validated)\r\n */\r\nexport const useAuthenticateUser = (auth, user) => {\r\n    const { currentUser, login } = useContext(LoginContext);\r\n    const [response, setResponse] = useState(null);\r\n    const [err, setErr] = useState(false);\r\n\r\n    useEffect(() => {\r\n\r\n        (function () {\r\n            if (auth) {\r\n                console.log('posting user to db')\r\n                axios.post('/db/user', user)\r\n                    .then(r => {\r\n                        setResponse(r.data.username)\r\n                        login(r.data.username)\r\n                    })\r\n                    .catch(e => setErr(e))\r\n            }\r\n        })()\r\n    }, [auth])\r\n\r\n    return [response, err]\r\n}\r\n\r\n\r\n/* \r\n\r\n@todo:\r\n    feature: distinguish between unauthorized request and request made by an authenticated user for another user's information\r\n    solution: handle 401 and 403 requests separately\r\n\r\n@todo: allow optional fireImmediately prop to be passed to useRequest to fire on component mount\r\n\r\n*/\r\n","import React, { useState, useEffect, useContext } from \"react\";\r\nimport { LoginContext } from '../../context/LoginContext';\r\nimport './style/Login.scss';\r\nimport { useLogState, handleFormBlur } from '../../hooks/state';\r\nimport { useRouteProps } from '../../hooks/routerHooks';\r\nimport { useAuthenticateUser } from '../../helpers/db.api';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nconst Login = (props) => {\r\n    const [_user, _setUser] = useState({});\r\n    const { navigate, location } = useRouteProps();\r\n    const { currentUser } = useContext(LoginContext);\r\n    const [auth, setAuth] = useState(false);\r\n\r\n    const [authResponse, authError] = useAuthenticateUser(auth, _user);\r\n\r\n    useEffect(() => {\r\n        if (authResponse) {\r\n            navigate(`/u/${authResponse}`)\r\n        }\r\n    }, [authResponse])\r\n\r\n    return (\r\n        <div className=\"PageWrapper\">\r\n            <div className=\"Login\">\r\n                <div className=\"PageHeader\">You're not currently logged in. Log in or register.</div>\r\n                <form className=\"Login__form\">\r\n                    <header className=\"Login__form--header\">\r\n                        Log in\r\n                    </header>\r\n\r\n                    <label htmlFor=\"username\">Username</label>\r\n                    <input autoComplete=\"username\" onBlur={e => handleFormBlur(e, _user, _setUser)} type=\"text\" name=\"username\" />\r\n\r\n                    <label htmlFor=\"password\">Password</label>\r\n                    <input autoComplete=\"password\" onBlur={e => handleFormBlur(e, _user, _setUser)} type=\"password\" name=\"password\" />\r\n\r\n                    <input onClick={() => setAuth(true)} className=\"Login__button\" type=\"button\" value=\"Log in\" />\r\n                    <Link to=\"/register\">Register</Link>\r\n                </form>\r\n\r\n\r\n            </div></div>\r\n    )\r\n}\r\n\r\nexport default Login\r\n\r\n/* \r\nflow:\r\nform submit button onClick sets setAuth(true)\r\n    which causes useAuthenticateUser hook to run\r\n        in which we make a post request to API to authenticate user\r\n            if response: call login(), which updates LS and updates currentUser in LoginContext\r\n            if error: nothing happens currently\r\n\r\n\r\n*/","import React, { useContext, useState, useEffect, useRef } from \"react\";\r\nimport Login from '../components/login/Login';\r\nimport { LoginContext } from '../context/LoginContext';\r\nimport { useRouteProps } from '../hooks/routerHooks';\r\n\r\n/**\r\n * Wrapper to hide components from unauthorized users.\r\n * @note   actual authorization is handled in LoginContext, useRequest, and on the backend\r\n * @todo   currently only checks if there is _any_ user, but we also want to check if the logged in user is the _right_ user\r\n * @usage  used by PrivateRoute component\r\n * @param {{component: React.NamedExoticComponent, rest: any}} props: props.component is a React/JSX component\r\n * @return {React.NamedExoticComponent} React component that displays login form or desired component based on auth state\r\n */\r\nconst Private = ({ component: Component, ...rest }) => {\r\n    const [component, setComponent] = useState(null);\r\n    const { currentUser } = useContext(LoginContext);\r\n    const { params, location } = useRouteProps();\r\n    const [isLoggedIn, setIsLoggedIn] = useState(currentUser ? true : false)\r\n\r\n    useEffect(() => {\r\n        setComponent(<Component key={Date.now()} />)\r\n    }, [Component, params, location, currentUser])\r\n\r\n    useEffect(() => {\r\n            setIsLoggedIn(currentUser ? true : false)\r\n    }, [currentUser])\r\n\r\n    return (\r\n        <>\r\n            { isLoggedIn\r\n                ?\r\n                <>\r\n                    { component && component}\r\n                </>\r\n                :\r\n                <Login />\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Private","import React from \"react\";\r\nimport { Route } from 'react-router-dom';\r\nimport Private from './Private';\r\n\r\n\r\nconst PrivateRoute = ({component: Component, children, ...rest}) => {\r\n\r\n    if (children) {\r\n        console.log(children);\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <Route {...rest} element={<Private component={Component}/>}/>\r\n    )\r\n}\r\n\r\nexport default PrivateRoute","import React, { useContext, memo } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { LoginContext } from '../../context/LoginContext';\r\nimport { useLogState } from '../../hooks/state';\r\nimport './style/Header.scss';\r\n\r\nconst Header = memo(() => {\r\n    const { currentUser } = useContext(LoginContext);\r\n\r\n    return (\r\n        <div className=\"Header\">\r\n            { currentUser ? <HeaderLoggedIn/> : <HeaderLoggedOut/> }\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default Header;\r\n\r\nconst HeaderLoggedIn = () => {\r\n    const { currentUser, logout } = useContext(LoginContext);\r\n\r\n    return (\r\n        <nav>\r\n            <span id=\"Logo\">Mana</span>\r\n            <NavLink className=\"NavLink\" to=\"/\">Home</NavLink>\r\n            <NavLink className=\"NavLink\" to={`/u/${currentUser}`}>My Profile</NavLink>\r\n            <NavLink className=\"NavLink\" to={`/u/${currentUser}/lists`}>My Lists</NavLink>\r\n            \r\n            <button onClick={() => logout()}>Log Out</button>\r\n        </nav>\r\n    )\r\n}\r\n\r\nconst HeaderLoggedOut = () =>\r\n    <nav>\r\n        <span id=\"Logo\">Mana</span>\r\n        <NavLink className=\"NavLink\" to=\"/\">Home</NavLink>\r\n        <NavLink className=\"NavLink\" to={`/login`}>Log in</NavLink>\r\n        <NavLink className=\"NavLink\" to={`/register`}>Register</NavLink>\r\n    </nav>\r\n\r\n\r\n/*\r\n    @todo: conditionally render based on if currentUser exists\r\n*/","import React from \"react\";\r\nimport './style/Footer.scss';\r\n\r\nconst Footer = (props) => {\r\n\r\n    return (\r\n        <div className=\"Footer\">\r\n            <div className=\"Footer__item\"><a href=\"https://github.com/Seerden/mana\">\r\n            <img\r\n            src={`${process.env.PUBLIC_URL}/assets/github.png`}\r\n            width=\"16\"\r\n            height=\"16\"\r\n            alt=\"GitHub Logo\"\r\n            />\r\n            </a></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer","/**\r\n * Build a Knuth shuffled list n times and concatenate\r\n * @param {Array} terms input array\r\n * @param {Number} n integer number of shuffled copies of the list to concatenate\r\n * @return {Array}\r\n */\r\nexport const makeReviewList = (terms, n) => {\r\n    let shuffled = []\r\n\r\n    const makeList = () => {\r\n        const copy = [...terms]  // swap is done in-place, so keeping a copy is simply for convenience\r\n        const indices = []\r\n\r\n        let len = copy.length;\r\n        let i = len - 1;\r\n        let j;\r\n        while (i > 0) {\r\n            /* take item at i-th index and swap it in-place with a random item in [0, i] (can 'swap' with itself), then decrement i */\r\n            j = Math.floor((i + 1) * Math.random());\r\n            [copy[i], copy[j]] = [copy[j], copy[i]];\r\n            indices.push(j)\r\n            i -= 1\r\n        }\r\n        return copy\r\n    }\r\n\r\n    let i = 0;\r\n    while (i < n) {\r\n        shuffled = [...shuffled, ...makeList()]\r\n        i++\r\n    }\r\n\r\n    return shuffled\r\n}","import React, { createContext, useState, memo } from \"react\";\r\n\r\nexport const ReviewContext = createContext(null);\r\n\r\nexport const ReviewProvider = memo(props => {\r\n    const [reviewContext, setReviewContext] = useState({\r\n        settings: {\r\n            direction: \"forwards\",\r\n            n: \"2\",\r\n            started: false,\r\n        }\r\n    });\r\n\r\n    return (\r\n        <ReviewContext.Provider value={{...{reviewContext, setReviewContext}}}>\r\n            { props.children }\r\n        </ReviewContext.Provider>\r\n    )\r\n})\r\n\r\n","import React, { memo, useState, useEffect } from \"react\";\r\n\r\nconst ReviewCard = memo(({ direction, term }) => {\r\n    const [side, setSide] = useState(direction === 'forwards' ? 'from' : 'to');\r\n    const [flipping, setFlipping] = useState(false);\r\n    const [fade, setFade] = useState(false);\r\n    const toggleSide = () => setSide(side === 'from' ? 'to' : 'from')\r\n\r\n    useEffect(() => {\r\n        window.addEventListener('keyup', handleArrowUpDownKeyup)\r\n        return () => {\r\n            window.removeEventListener('keyup', handleArrowUpDownKeyup)\r\n        }\r\n    }, [side])  // only flips correctly once per render if side not specified as dependency\r\n\r\n    useEffect(() => { // when new term is shown, reset card state\r\n        setSide(direction === 'forwards' ? 'from' : 'to')\r\n        setFade(true)\r\n        setTimeout(() => setFade(false), 150)\r\n    }, [term])\r\n\r\n    const handleArrowUpDownKeyup = (e) => {\r\n        if (['ArrowUp', 'ArrowDown'].includes(e.code)) {\r\n            flip();\r\n        }\r\n    }\r\n\r\n    const flip = () => {\r\n        let duration = 250  // match keyframes animation duration\r\n        setFlipping(true);\r\n        setTimeout(() => setFlipping(false), duration)\r\n        setTimeout(() => toggleSide(), duration / 2);\r\n    }\r\n\r\n    return (\r\n        <div onClick={flip} className={`Review__current ReviewCard ${fade ? 'fadein' : ''} ${flipping ? 'flip' : ''}`}>\r\n            { term[side] }\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default ReviewCard\r\n\r\n/* \r\nReview card functionality:\r\n- Serve one term at a time in the form of a card. \r\n- Start by showing front, i.e. 'from' side.\r\n- @todo Hide pass/fail buttons and pass/fail functionality until the back has been shown at least once. \r\n- Flip between front and back by clicking the card and with up/down arrow keys, mark pass/fail by clicking the two button elements and with left/right arrow keys.\r\n*/","import React, { memo, useContext, useState, useEffect } from \"react\";\r\nimport {v4 as uuidv4} from 'uuid';\r\n\r\nimport { ReviewContext } from '../../context/ReviewContext';\r\nimport './style/PreReview.scss';\r\n\r\nconst PreReview = (props) => {\r\n    const { reviewContext, setReviewContext } = useContext(ReviewContext);\r\n    const { settings } = reviewContext;\r\n\r\n    const [buttons, setButtons] = useState(null);\r\n    const [directionButtons, setDirectionButtons] = useState(null);\r\n\r\n    useEffect(() => {\r\n        setButtons([1, 2, 3, 4, 5].map(num => <SettingsButton key={uuidv4()} value={num} n={settings.n} handleSettingsChange={handleSettingsChange} />))\r\n        setDirectionButtons(['forwards', 'backwards'].map(d => <SettingsButton key={uuidv4()} value={d} current={settings.direction} direction={d} handleSettingsChange={handleSettingsChange}/>))\r\n    }, [settings])\r\n\r\n    const handleSettingsChange = e => {\r\n        setReviewContext({ ...reviewContext, settings: { ...reviewContext.settings, [e.target.name]: e.currentTarget.value } })  // todo: only set context if value is different\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"PreReview\">\r\n                <div className=\"PreReview__header PageHeader\">\r\n                    Review settings\r\n                </div>\r\n\r\n                <form className=\"PreReview__settings\">\r\n                    <ul className=\"PreReview__settings--list\">\r\n                        <li key={uuidv4()}>\r\n                            <label className=\"PreReview__settings--label\" htmlFor=\"n\">Number of cycles:</label>\r\n                            <p className=\"PreReview__settings--tip\">This is the number of times you need to get each term right to complete the session</p>\r\n                            <div className=\"PreReview__settings--cycles\">\r\n                                {buttons}\r\n                            </div>\r\n                        </li>\r\n\r\n                        <li key={uuidv4()}>\r\n                            <label className=\"PreReview__settings--label\" htmlFor=\"direction\">Direction:</label>\r\n                            <p className=\"PreReview__settings--tip\">'Forwards' means you're shown the term in the original language, and need to recall the meaning in the secondary language. 'Backwards' is the other way around.</p>\r\n                            <div className=\"PreReview__settings--directionbuttons\">\r\n                                { directionButtons }\r\n                            </div>\r\n                        </li>\r\n                    </ul>\r\n                    <input \r\n                        onClick={() => setReviewContext({...reviewContext, settings: {...reviewContext.settings, started: true}})}\r\n                        id=\"PreReview__start\" \r\n                        type=\"button\" \r\n                        value=\"Start the review with these settings\"/>\r\n                </form>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default PreReview\r\n\r\nconst SettingsButton = memo(({ handleSettingsChange, direction, n, value, current }) => {\r\n    let selected;\r\n    if (n) {\r\n        selected = String(n) === String(value)\r\n    } else if (direction) {\r\n        selected = direction === current;\r\n    }\r\n    return (\r\n        <input\r\n            style={{ \r\n                color: selected ? 'white' : 'black', \r\n                backgroundColor: selected ? 'blueviolet' : 'white',\r\n            }}\r\n            onClick={handleSettingsChange}\r\n            className={n ? `PreReview__settings--n` : 'PreReview__settings--direction'}\r\n            name={n ? \"n\" : \"direction\"}\r\n            type=\"button\"\r\n            value={value} />\r\n    )\r\n})\r\n\r\n/*\r\n@TODO\r\n    ask for:\r\n        - n\r\n        - direction (from -> to or to -> from)\r\n\r\n*/","import React from \"react\";\r\nimport { Link } from 'react-router-dom';\r\nimport { useRouteProps } from '../../hooks/routerHooks';\r\nimport dayjs from 'dayjs';\r\n\r\nconst PostReview = ({ sessionStart, sessionEnd, list }) => {\r\n    const { navigate, params } = useRouteProps();\r\n    const formatDate = (date) => dayjs(date).format('HH:mm:ss');\r\n\r\n    return (\r\n        <div className=\"Review__post\">\r\n            <h2>Session completed.</h2>\r\n            <div>Started at {formatDate(sessionStart)}</div>\r\n            <div>Completed at {formatDate(sessionEnd)}</div>\r\n\r\n            <button className=\"Button\">\r\n                <Link to={`/u/${list.owner}/list/${params.id}`}>Back to list</Link>\r\n            </button>\r\n\r\n            <button className=\"Button\">\r\n                <Link to={`/u/${list.owner}/lists`}>Back to lists overview</Link>\r\n            </button>\r\n\r\n            <button onClick={() => navigate(0)}className=\"Button\">\r\n                <Link to={`/u/${list.owner}/list/${params.id}/review`}>Review this list again</Link>\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PostReview","import React, { useState, useEffect, memo } from \"react\";\r\nimport dayjs from 'dayjs';\r\nimport relativeTime from 'dayjs/plugin/relativeTime';\r\ndayjs.extend(relativeTime);\r\n\r\n/**\r\n * JSX <span> component displaying sessionStart.fromNow();\r\n */\r\nconst Timer = memo(({ start }) => {\r\n    const [timer, setTimer] = useState(null);\r\n    const [elapsed, setElapsed] = useState(0);\r\n\r\n    useEffect(() => {\r\n        const timerInterval = setInterval(() => setElapsed(Math.round(Math.floor(Date.now() - start)/1000)), 1000)\r\n        return () => clearInterval(timerInterval)\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        setTimer(dayjs(start).fromNow())\r\n    }, [elapsed])\r\n\r\n    return (\r\n        <span title={`${dayjs(start).format('hh:mm:ss A')}`} className=\"Timer\">\r\n            <strong>{timer}</strong>\r\n        </span>\r\n    )\r\n})\r\n\r\nexport default Timer","import React, { memo } from \"react\";\r\nimport Timer from './Timer';\r\nimport './style/ReviewInfo.scss';\r\n\r\nconst ReviewInfo = memo(({ start, numTerms, n, progress }) => {\r\n\r\n    return (\r\n        <details className=\"Review__info\">\r\n            <summary>\r\n                <span className=\"Review__info--header\">\r\n                    <span>Session information</span>\r\n                </span>\r\n            </summary>\r\n\r\n            <div className=\"Review__info--dynamic\">\r\n                <div className=\"Review__info--completion\">\r\n                    Session completion: {progress}%.\r\n                    <div>\r\n                        You started this session <Timer start={start} />.\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"Review__info--hideable\">\r\n                <div>\r\n                    Number of terms in this list: <strong>{numTerms}</strong>.\r\n                </div>\r\n                <div>\r\n                    Pass each term <strong>{n} time{n !== 1 ? 's' : ''}</strong> to complete the session.\r\n                </div>\r\n            </div>\r\n\r\n        </details>\r\n    )\r\n})\r\n\r\nexport default ReviewInfo","import axios from 'axios';\r\nimport { LoginContext } from '../context/LoginContext';\r\nimport { useContext, useState, useEffect, useRef } from 'react';\r\nimport { useRouteProps } from './routerHooks';\r\n\r\n/**\r\n * Request hook that handles a request and logs a user out if the API returns 401 Unauthorized.\r\n * @param {Function} request axios request initialized wrapper inside an anonymous function, e.g. () => axios.get('/home')\r\n * @param {Function} handleResponse function to handle successful response, will be called as request().then(r => handleResponse(r))\r\n * @param {Function} handleError function to handle error, form similar to handleResponse\r\n * @returns {{response: *, error: Boolean, loading: Boolean, setRequest: Function}} [response, error] are returned states set by the handleResponse/handleError functions. loading is the loading state (true while request is being made), and makeRequest can be called to trigger a request\r\n * @param {Function} setRequest request is expected to wrapper in a function, so usage should be like setRequest(() => axios.get('/'))\r\n * \r\n */\r\nexport const useRequest = ({ handleResponse, handleError }) => {\r\n    const\r\n        { currentUser, login, logout } = useContext(LoginContext),\r\n        mounted = useRef(false),\r\n        { params } = useRouteProps(),\r\n        [request, setRequest] = useState(null),\r\n        [response, setResponse] = useState(null),\r\n        [error, setError] = useState(null),\r\n        [loading, setLoading] = useState(false),\r\n        source = axios.CancelToken.source();\r\n\r\n    const authorizeUser = function (username, setError, next) {\r\n        if (username && (currentUser === username)) {\r\n            setError(null)  // this fixes error persisting on route change from unauthorized -> authorized  @IMPORANT not needed if I rerender component fully on params change\r\n            next()\r\n\r\n        } else {\r\n            setError('Route not accessible by current user.');\r\n            setLoading(false);\r\n        }\r\n    }\r\n\r\n    const executeRequest = function () {\r\n        request()\r\n            .then(res => {\r\n                handleResponse(res, setResponse)\r\n            })\r\n            .catch(err => {\r\n                if(err && err.response && err.response.status === 401){\r\n                    logout()                    \r\n                }\r\n                console.log(typeof handleResponse);\r\n                handleError(err, setError);\r\n            })\r\n\r\n        setLoading(false);\r\n        setRequest(null); //  unsure if necessary\r\n    }\r\n\r\n    useEffect(() => {  // cleanup function. might be obsolete. look into it\r\n        mounted.current = true\r\n\r\n        if (params.username && params.username === currentUser) {\r\n            setError(null)\r\n            setRequest(null)\r\n        }\r\n\r\n        return () => {\r\n            setError(null);\r\n            setResponse(null);\r\n            setLoading(false);\r\n            setRequest(null)\r\n            mounted.current = false\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {return () => source.cancel(\"Component unmounted\")})  // cleanup axios requests on any unmount (note: need to not have deps array)\r\n\r\n    useEffect(() => {  // verify if user should have access to the page, execute request or set error based on result\r\n        if (mounted.current) {\r\n            if (request) {\r\n                setLoading(true);\r\n                authorizeUser(params.username, setError, executeRequest)\r\n            }\r\n        }\r\n\r\n    }, [request, params.username])\r\n\r\n    useEffect(() => {  // if current user changes (e.g. because user was logged out by making unauthorized request), component will unmount, so we need to cancel any active requests\r\n        return () => source.cancel(\"Component was unmounted\")\r\n    }, [currentUser])\r\n\r\n    return { response, error, loading, setRequest }\r\n}","import axios from 'axios';\r\n\r\naxios.default.withCredentials = true;\r\n\r\n// handleError and handleResponse are generic handlers\r\nexport const handleError = function(err, setError) { setError(err) };\r\n\r\nexport const handleResponse = (res, setResponse) => setResponse(res.data);\r\n\r\nexport const handleGetList = () => {\r\n    const request = (username, query) => {axios.get(`/db/u/${username}/list`, { params: query })};\r\n    return { request, handleResponse, handleError }\r\n}\r\n\r\nexport const handlePostList = () => {\r\n    const request = (username, body) => axios.post(`/db/u/${username}list`, { newList: body })\r\n    return { request, handleResponse, handleError }\r\n}\r\n\r\n/**\r\n     * Update local list changes (e.g. term deletions, edits, or updated session/term histories) to the database\r\n     * \r\n     * @param   {object}    query   database query for relevant list instance (combination of _id and owner should suffice)\r\n     * @param   {object}    body    updated list content\r\n     * \r\n     * @current         send entire list object to the backend as 'body',\r\n     *                      backend sets list.content to body.content\r\n     * @future          refine database call:\r\n     *                      - allow user to specify fields that need to be updated\r\n     *                      - implement this field udpating in the database     *      \r\n     */\r\n\r\nexport const handlePutList = () => { return { handleResponse, handleError } }\r\n\r\nexport const handleDeleteList = () => {\r\n    const request = (username, query) => axios.delete(`/db/u/${username}/list`, { params: query });\r\n    return { request, handleResponse, handleError }\r\n}\r\n\r\n/**\r\n * Get all lists by the specific user from the database. Returns all list properties, except the content itself.\r\n * @param {string} username \r\n */\r\nexport const handleGetLists = () => {\r\n    const request = (username) => axios.get(`/db/u/${username}/lists`)\r\n    return { request, handleResponse, handleError }\r\n}\r\n\r\n\r\n\r\n// above are full handlers, these are just the requests. \r\nexport const getList = (username, query) => {\r\n    return () => axios.get(`/db/u/${username}/list`, { params: query });\r\n}\r\n\r\nexport const putList = (username, query, body) => {\r\n    return () => axios.put(`/db/u/${username}/list`, { data: { query, body } })\r\n}\r\n\r\nexport const postList = (username, body) => {\r\n    return () => axios.post(`/db/u/${username}/list`, { newList: body })\r\n}\r\n\r\nexport const deleteList = (username, query) => {\r\n    return () => axios.delete(`/db/u/${username}/list`, { params: query })\r\n}\r\n\r\nexport const getLists = (username) => {\r\n    return () => axios.get(`/db/u/${username}/lists`)\r\n}\r\n\r\n// New user registration: unprotected route, can't currently be called using useRequest\r\nexport const postUser = newUser => {\r\n    return axios.post('/db/u/register', {newUser})\r\n        .then(r => r.data)\r\n        .catch(err => err)\r\n}","import React, { memo, useEffect, useState, useRef, useContext, useReducer } from \"react\";\r\nimport { Link } from 'react-router-dom';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { useRouteProps } from '../../hooks/routerHooks';\r\n// import { getList } from '../../helpers/db.api';\r\nimport { makeReviewList } from '../../helpers/review.api';\r\nimport { ReviewContext } from '../../context/ReviewContext';\r\nimport ReviewCard from './ReviewCard';\r\nimport dayjs from 'dayjs';\r\nimport PreReview from './PreReview';\r\nimport PostReview from \"./PostReview\";\r\nimport ReviewInfo from \"./ReviewInfo\";\r\nimport './style/Review.scss';\r\n\r\nimport { useRequest } from '../../hooks/useRequest';\r\nimport { handleGetList, getList, handlePutList, putList } from '../../helpers/apiHandlers';\r\n\r\nfunction updateList(){ return }\r\n\r\nconst Review = memo((props) => {\r\n    const { params } = useRouteProps(),\r\n        [session, setSession] = useState(() => ({ start: new Date(), end: false })),\r\n        [list, setList] = useState(null),\r\n        [error, setError] = useState(false),\r\n        [futureTerms, reduceFutureTerms] = useReducer(termReducer, null),\r\n        [currentCard, setCurrentCard] = useState(null),\r\n        [progress, setProgress] = useState(0),  // percentage of terms marked 'pass' in the session\r\n        { reviewContext } = useContext(ReviewContext),\r\n        { n, direction, started } = reviewContext.settings,\r\n        failRef = useRef(null), // refs for handleLeftRightArrowKeydown to target\r\n        passRef = useRef(null);\r\n\r\n    const { setRequest: setGetRequest } = useRequest({\r\n        handleResponse: (res, setResponse) => {\r\n            res = res.data\r\n            \r\n            if (res.content && res.content.length > 0) {\r\n                setResponse(res);\r\n                setList(res)\r\n                reduceFutureTerms({\r\n                    type: 'init',\r\n                    payload: makeReviewList(res.content, n)\r\n                })\r\n            }\r\n        },\r\n        handleError: handleGetList().handleError    \r\n    })\r\n    const { setRequest: setPutRequest } = useRequest({...handlePutList()})\r\n\r\n    useEffect(() => {  // get list from database and initialize futureTerms\r\n        setGetRequest(() => getList(params.username, {_id: params.id}))\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (list) {\r\n            reduceFutureTerms({\r\n                type: 'init',\r\n                payload: makeReviewList(list.content, Number(n))\r\n            })\r\n        }\r\n    }, [n]) // including list in deps causes session to be malformed somehow (progress doesn't change when moving to a new term)\r\n\r\n    useEffect(() => {\r\n        if (list && futureTerms) {\r\n            let sessionLength = list.content.length * n;\r\n            let termsCompleted = sessionLength - futureTerms.length;\r\n            setProgress(Math.floor(100 * termsCompleted / sessionLength));\r\n        }\r\n\r\n        futureTerms && futureTerms.length > 0 && setCurrentCard(<ReviewCard key={uuidv4()} direction={direction} term={futureTerms[0]} />)\r\n        futureTerms && futureTerms.length === 0 && endSession(list);\r\n\r\n        window.addEventListener('keydown', handleLeftRightArrowKeyDown)\r\n        return () => {\r\n            window.removeEventListener('keydown', handleLeftRightArrowKeyDown)\r\n            setCurrentCard(null)\r\n        }\r\n    }, [futureTerms, direction])\r\n\r\n    /**\r\n     * ArrowLeft/ArrowRight keydown event to simulate pressing the Pass/Fail buttons\r\n     * @param {*} e event object\r\n     */\r\n    function handleLeftRightArrowKeyDown(e) {\r\n        let ref;\r\n        switch (e.code) {\r\n            case 'ArrowLeft':\r\n                ref = failRef;\r\n                break;\r\n            case 'ArrowRight':\r\n                ref = passRef\r\n                break;\r\n            default:\r\n                return\r\n        }\r\n\r\n        if (ref.current) {\r\n            ref.current.focus()\r\n            ref.current.click();\r\n            setTimeout(() => {  // highlight button for UX\r\n                if (ref.current) {\r\n                    ref.current.blur()\r\n                }\r\n            }, 100)\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * case init: initialize futureTerms using list.content from database\r\n     * case pass/fail: Handle what happens to current term after pass/fail is chosen.\r\n     * @param {Array} terms     array of terms\r\n     * @param {Object} action   properties: type (init, pass, fail). if type 'init', send terms as action.payload\r\n     */\r\n    function termReducer(terms, action) {\r\n\r\n        switch (action.type) {\r\n            case 'init':\r\n                return action.payload\r\n            case 'pass':\r\n                return terms.slice(1,);  // remove the term\r\n            case 'fail':\r\n                let newIndex = Math.floor((terms.length + 1) * Math.random());\r\n\r\n                let newTerms = [...terms];\r\n                let currentTerm = newTerms.shift();\r\n                newTerms.splice(newIndex, 0, currentTerm);\r\n                return newTerms\r\n            default:\r\n                return terms\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Find current term in list.content, update its history, and setList with updated list.content\r\n     * @param {object} term     should always be futureTerms[0]\r\n     * @param {string} passfail 'pass'/'fail'\r\n     * @return {object}         copy of newly set list state\r\n     */\r\n    function updateSessionHistory(term, passfail) {\r\n        const content = [...list.content];\r\n        let idx = content.findIndex(i => i.to === term.to && i.from === term.from)\r\n\r\n        if (!content[idx].history || content[idx].history.length === 0) {\r\n            content[idx].history = [{ date: session.start, content: [] }]\r\n        }\r\n        if (content[idx].history.length > 0) {\r\n            let histLen = content[idx].history.length\r\n            let lastHist = content[idx].history[histLen - 1];\r\n\r\n            if (dayjs(lastHist.date) < dayjs(session.start)) {\r\n                content[idx].history.push({ date: session.start, content: [passfail] })\r\n            } else {\r\n                content[idx].history[histLen - 1].content.push(passfail)\r\n            }\r\n        }\r\n        let newList = { ...list, content: [...content] };\r\n        setList(newList);\r\n        return newList\r\n    }\r\n\r\n    /**\r\n     * Handle clicking the pass or fail button\r\n     * @param {*} e javascript event\r\n     * @param {string} passfail 'pass'/'fail'\r\n     */\r\n    function handlePassFailClick(e, passfail) {\r\n        e.preventDefault();\r\n        let updatedList = updateSessionHistory(futureTerms[0], passfail);  // updateSessionHistory returns the newly updated state\r\n        reduceFutureTerms({ type: passfail })\r\n    }\r\n\r\n    /**\r\n     * Set session.end, push the session to the list, update the list in the database.\r\n     * @param {Array} list list state\r\n     */\r\n    function endSession(list) {\r\n        let end = new Date();\r\n        setSession({ ...session, end });\r\n        list.sessions.push({\r\n            start: session.start,\r\n            end,\r\n            numTerms: list.content.length,\r\n            termsReviewed: Number(n) * list.content.length,\r\n            n: Number(n),\r\n            direction\r\n        });\r\n        list.lastReviewed = end;\r\n        setPutRequest(() => putList(params.username, { _id: params.id, owner: list.owner }, list))\r\n    }\r\n\r\n    return (\r\n        <div className=\"PageWrapper Review\">\r\n            { list &&\r\n                <>\r\n                    <div className=\"PageHeader Review__title\">\r\n                        <div>\r\n                            Reviewing<span className=\"Review__title--name\"><em>{list.name}</em></span>\r\n                        </div>\r\n                        <div>\r\n                            <Link className=\"Button\" to={`/u/${params.username}/list/${params.id}`}>Back to list</Link>\r\n                        </div>\r\n                    </div>\r\n                </>\r\n            }\r\n\r\n            { list && !started\r\n                ?\r\n                    <>\r\n                        <PreReview/>\r\n                    </>\r\n                :\r\n                    <>\r\n                        { !session.end && currentCard &&\r\n                            <>\r\n                                {currentCard}\r\n\r\n                                <div className=\"Review__buttons\">\r\n                                    <input \r\n                                        ref={failRef} \r\n                                        onClick={(e) => handlePassFailClick(e, 'fail')} \r\n                                        className=\"Review__button\" \r\n                                        id=\"Review__button--fail\" \r\n                                        type=\"button\" \r\n                                        value=\"Fail\" \r\n                                    />\r\n                                    <input \r\n                                        ref={passRef} \r\n                                        onClick={(e) => handlePassFailClick(e, 'pass')} \r\n                                        className=\"Review__button\" \r\n                                        id=\"Review__button--pass\" \r\n                                        type=\"button\" \r\n                                        value=\"Pass\" \r\n                                    />\r\n                                </div>\r\n\r\n                                <div className=\"Review__progress--wrapper\">\r\n                                    <div id=\"Review__progress--bar\" style={{ width: `${progress}%` }}></div>\r\n                                </div>\r\n\r\n                                { session.start && \r\n                                    <ReviewInfo \r\n                                        start={session.start} \r\n                                        numTerms={list.content.length} \r\n                                        n={n} \r\n                                        progress={progress} \r\n                                    />\r\n                                }\r\n\r\n                            </>\r\n                        }\r\n\r\n                        { session.end &&\r\n                            <>\r\n                                <PostReview\r\n                                    sessionStart={session.start}\r\n                                    sessionEnd={session.end}\r\n                                    list={list}\r\n                                />\r\n                            </>\r\n                        }\r\n                    </>\r\n            }\r\n\r\n            {/* { !list && !error && <div className=\"Loading\">Loading list...</div>} */}\r\n            { error && <div className=\"Error\">List doesn't exist, or it exists but doesn't contain any terms to review.</div>}\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default Review;\r\n\r\n/*\r\n@todo?  set progress bar color based in session cycle. go to 100% n time with various colors, instead of slowly progress a single bar\r\n        makes it feel like progress is faster\r\n\r\n@todo postsession: let user know session has been stored in db\r\n\r\n@note: list loads with n = 2 terms by default, but is rebuilt when n changes. could be cleaned up into a single case, but I need time to work that out. functions for now.\r\n\r\n*/\r\n","import React, { useState, createContext } from \"react\";\r\n\r\nexport const ListContext = createContext(null);\r\n\r\nexport const ListProvider = (props) => {\r\n    const [listContextValue, setListContextValue] = useState(() => {});\r\n\r\n    return (\r\n        <ListContext.Provider value={{listContextValue, setListContextValue}}>\r\n            {props.children}\r\n        </ListContext.Provider>\r\n    )\r\n}","import React, { memo } from \"react\";\r\nimport './style/ListTermDeleteButton.scss';\r\n\r\n/**\r\n * JSX delete button element that turns into two buttons: 'delete' and 'keep'\r\n * @note    note really a reusable component, since everything is hardcoded. the component exists mostly to limit ListTerm's LOC, for readability * \r\n * @param {object} props    confirmingDelete is a boolean piece of react state,\r\n *                          handleConfirmClick is the confirm click handler (managed by parent component),\r\n *                          isHovering is a piece of state managed by ListTerm: hovering the button's parent causes the button to become visible\r\n * @return {JSX} jsx fragment containing the toggleable button\r\n */\r\nconst ListTermDeleteButton = memo(({ confirmingDelete, setConfirmingDelete, handleConfirmClick, isHovering }) => {\r\n    return (\r\n        <>\r\n            { confirmingDelete &&\r\n                <div className=\"Term__remove remove--confirm\">\r\n                    <input\r\n                        title=\"Keep term\"\r\n                        onClick={e => handleConfirmClick(e, 'keep')}\r\n                        className=\"remove--keep\" type=\"button\" value=\"keep\" />\r\n                    <input\r\n                        title=\"Permanently delete term\"\r\n                        onClick={(e) => handleConfirmClick(e, { type: 'delete' })}\r\n                        className=\"remove--delete\" type=\"button\" value=\"delete\" />\r\n                </div>\r\n            }\r\n\r\n            { !confirmingDelete && isHovering &&\r\n                <input\r\n                    onClick={() => setConfirmingDelete(true)}\r\n                    className=\"Term__remove remove--initial\"\r\n                    type=\"button\"\r\n                    value=\"x\"\r\n                />\r\n            }\r\n        </>\r\n    )\r\n})\r\n\r\nexport default ListTermDeleteButton","import dayjs from 'dayjs';\r\nimport relativeTime from 'dayjs/plugin/relativeTime';\r\nimport advancedFormat from 'dayjs/plugin/advancedFormat'\r\ndayjs.extend(advancedFormat)\r\ndayjs.extend(relativeTime);\r\n\r\n/**\r\n * Print string with time to/from date\r\n * @param {Date} date \r\n * @returns {String} string, e.g. '2 days ago'\r\n */\r\nexport const timeSince = date => dayjs(date).fromNow();\r\n\r\nexport const formatDate = (date, format) => dayjs(date).format(format)","import React, { useState, useEffect, memo, Fragment } from \"react\";\r\nimport './style/TermHistory.scss'\r\nimport dayjs from 'dayjs';\r\nimport { timeSince } from '../../helpers/time';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nconst TermHistory = memo(({ visible, history }) => {\r\n    const [expand, setExpand] = useState(false);\r\n\r\n    const histEl = makeHistoryElement(history);\r\n\r\n    function makeHistoryElement(history) {\r\n        return history.map(el =>\r\n        (\r\n            <Fragment key={uuidv4()}>\r\n                <div className=\"TermHistory__session\">\r\n                    <div title={dayjs(el.date).format('MMMM DD, YYYY (HH:mm)')} className=\"TermHistory__date\">\r\n                        {timeSince(el.date)}\r\n                    </div>\r\n                    <div key={uuidv4()} className=\"TermHistory__history\">\r\n                        {\r\n                            el.content.map((i, index) =>\r\n                                <span\r\n                                    key={`passfail-${i}-${index}`}\r\n                                    style={{\r\n                                        width: \"20px\",\r\n                                        height: \"20px\",\r\n                                        display: \"inline-block\",\r\n                                        margin: \"0.2rem\",\r\n                                        borderRadius: \"50%\",\r\n                                        backgroundColor: i === 'pass' ? 'seagreen' : 'orangered'\r\n                                    }}\r\n                                > </span>\r\n                            )\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </Fragment>\r\n        )\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            { visible &&\r\n                <div className=\"TermHistory\">\r\n                    <div className=\"TermHistory__header\">\r\n                        <div\r\n                            className=\"TermHistory__header--desc\">\r\n                            You've reviewed this term {histEl.length} time{histEl.length === 1 ? '' : 's'}\r\n                        </div>\r\n                        {histEl.length > 1 &&\r\n                            <button\r\n                                className=\"TermHistory__header--button\"\r\n                                onClick={() => setExpand(!expand)}\r\n                            >\r\n                                {!expand ? 'Expand history' : 'Collapse history'}\r\n                            </button>\r\n                        }\r\n                    </div>\r\n                    {expand ? histEl.reverse() : histEl[histEl.length - 1]}\r\n                </div>\r\n            }\r\n        </>\r\n    )\r\n})\r\n\r\nexport default TermHistory","import React, { memo, useContext, useState, useEffect } from \"react\";\r\nimport { ListContext } from '../../context/ListContext';\r\nimport ListTermDeleteButton from \"./ListTermDeleteButton\";\r\nimport TermHistory from './TermHistory';\r\n\r\nimport { useRequest } from '../../hooks/useRequest';\r\nimport { putList, handlePutList } from '../../helpers/apiHandlers'\r\n\r\n/**\r\n * ListTerm component\r\n * @param {object}  props: handleTermDelete (passed down function), term (list.content entry), idx (Number)\r\n */\r\nconst ListTerm = memo(({ handleTermDelete, term, idx }) => {\r\n    const [_term, setTerm] = useState(() => ({ from: term.from, to: term.to }))\r\n    const [isEditing, setIsEditing] = useState(false);\r\n    const [confirmingDelete, setConfirmingDelete] = useState(false);\r\n    const [isHovering, setIsHovering] = useState(false)\r\n    const { listContextValue, setListContextValue } = useContext(ListContext);\r\n    const [showHistory, setShowHistory] = useState(false);\r\n\r\n    const { response: putResponse, setRequest: setPutRequest } = useRequest({...handlePutList()});\r\n\r\n    useEffect(() => { // cleanup\r\n        return () => {\r\n            setIsEditing(false);\r\n            setConfirmingDelete(false);\r\n            setIsHovering(false)\r\n        }\r\n    }, [])\r\n\r\n    /**\r\n     * Remove term from the list.\r\n     * Triggered on deletion confirmation.\r\n     * \r\n     * @todo        remove term from database entirely from this hook? or is there another 'send changes to database' layer on the /list/:id page?\r\n     * @param {object} action    currently only expects {type: 'delete'}\r\n     */\r\n    const handleConfirmClick = (e, action) => {\r\n        e.preventDefault();\r\n        setConfirmingDelete(false);\r\n        if (action.type === 'delete') {\r\n            handleTermDelete(idx);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @param   {string}    field   'from'/'to', related to term.to and term.from properties (term is passed from props)\r\n    * @todo update actual list itself, also update listContextValue, and then push new list state to db\r\n    */\r\n    const handleTermEdit = (e) => {\r\n        let side = e.currentTarget.getAttribute('side');\r\n        if (e.target.value && _term[side] !== e.target.value) {\r\n            let newTerm = { ..._term, [side]: e.target.value }\r\n            setTerm(newTerm)\r\n            let newListContent = [...listContextValue.content];\r\n            newListContent[idx] = { ...newTerm };\r\n            let newList = { ...listContextValue, content: [...newListContent] }\r\n            setListContextValue(newList);\r\n            setPutRequest(() => putList(listContextValue.owner, { _id: listContextValue._id, owner: listContextValue.owner }, newList))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <li\r\n                className=\"List__term\"\r\n                onMouseEnter={() => setIsHovering(true)}\r\n                onMouseLeave={() => setIsHovering(false)}\r\n            >\r\n                <div className=\"term\">\r\n\r\n                    {!isEditing && isHovering ?\r\n                        <>\r\n                            <ListTermDeleteButton\r\n                                confirmingDelete={confirmingDelete}\r\n                                isHovering={isHovering}\r\n                                setConfirmingDelete={setConfirmingDelete}\r\n                                handleConfirmClick={handleConfirmClick}\r\n                            />\r\n                        </> \r\n                        : <div style={{ color: confirmingDelete ? 'orangered' : '' }} className=\"term--index\">{idx + 1}</div>\r\n                    }\r\n\r\n                    <input \r\n                        disabled={confirmingDelete}\r\n                        style={{\r\n                            backgroundColor: confirmingDelete ? 'orangered' : '',\r\n                        }}\r\n                        onBlur={handleTermEdit} className=\"term--side term--from\" side=\"from\" type=\"text\" defaultValue={_term.from} />\r\n                    <input \r\n                        disabled={confirmingDelete}\r\n                        style={{\r\n                            backgroundColor: confirmingDelete ? 'orangered' : '',\r\n                        }}\r\n                        onBlur={handleTermEdit} className=\"term--side term--to\" side=\"to\" type=\"text\" defaultValue={_term.to} />\r\n\r\n                    { (showHistory || (isHovering && !confirmingDelete)) && <button className=\"List__term--historybutton\" onClick={() => setShowHistory(!showHistory)}>hist</button> }\r\n                </div>\r\n\r\n\r\n\r\n\r\n            </li>\r\n\r\n            <TermHistory visible={showHistory} history={term.history} />\r\n        </>\r\n    )\r\n})\r\n\r\nexport default ListTerm\r\n\r\n/* FIXME: deleting only term in a list doesn't update visible terms (but does update the database entry, so problem lies in a key or a render based on .length > 0) */","import React, { memo, useContext, useState, useEffect } from \"react\";\r\nimport { Link } from 'react-router-dom';\r\nimport './style/List.scss';\r\nimport { useRouteProps } from '../../hooks/routerHooks';\r\nimport ListTerm from './ListTerm'\r\nimport { ListContext } from '../../context/ListContext';\r\nimport { extractSession } from '../../helpers/list.api';\r\nimport { formatDate } from '../../helpers/time';\r\n\r\nimport { useRequest } from '../../hooks/useRequest';\r\nimport { handleGetList, getList, putList, handlePutList, handleDeleteList, deleteList } from '../../helpers/apiHandlers';\r\nimport { useLogState } from \"../../hooks/state\";\r\n\r\nconst List = memo((props) => {\r\n    const [list, setList] = useState(null);\r\n    const [terms, setTerms] = useState(null);\r\n    const { params, location } = useRouteProps();\r\n    const { setListContextValue } = useContext(ListContext);\r\n\r\n    const { response: getResponse, setRequest: setGetRequest } = useRequest({...handleGetList()});\r\n    const { response: putResponse, setRequest: setPutRequest } = useRequest({...handlePutList()});\r\n    const { response: deleteResponse, setRequest: setDeleteRequest } = useRequest({\r\n        ...handleDeleteList()});\r\n\r\n    useLogState('deleteresponse', deleteResponse)\r\n\r\n    useEffect(() => {\r\n        setGetRequest(() => getList(params.username, {_id: params.id}))\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if(getResponse) {\r\n            setList(getResponse);\r\n            setListContextValue(getResponse);\r\n        }\r\n    }, [getResponse])\r\n\r\n    useEffect(() => {\r\n        if (list) {\r\n            if (list.sessions.length > 0) {\r\n                console.log(extractSession(list, 0));\r\n            }\r\n        }\r\n\r\n        if (list && list.content && list.content.length > 0) {\r\n            updateTerms();\r\n            /*  updateTerms needs to be called only AFTER list has been put into state, since this depends on list\r\n                this means I can't call updateTerms(res) inside the useEffect hook above (where I do getListFromDb.then(res => setList(res))) */\r\n        }\r\n    }, [list])\r\n\r\n    const updateTerms = () => {\r\n        setTerms(list.content.map((term, idx) => {\r\n            let termProps = {\r\n                handleTermDelete,\r\n                key: `list-term-${term.to}-${term.from}`,\r\n                idx: idx,\r\n                term\r\n            }\r\n\r\n            return (\r\n                <ListTerm {...termProps} />\r\n            )\r\n        }))\r\n    }\r\n\r\n    function handleTermDelete(idx) {\r\n        const updatedList = { ...list }\r\n        updatedList.content.splice(idx, 1);\r\n        updatedList.numTerms = updatedList.content.length\r\n        setList(updatedList);\r\n        setListContextValue(updatedList)\r\n\r\n        setPutRequest(() => putList(params.username, { _id: updatedList._id, owner: updatedList.owner }, updatedList))\r\n    }\r\n\r\n    function handleDelete() {\r\n        setDeleteRequest(() => deleteList(params.username, { _id: params.id }))\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"PageWrapper\">\r\n                <div className=\"List\">\r\n                    { deleteResponse && JSON.stringify(deleteResponse)}\r\n\r\n                    {list &&\r\n                        <>\r\n                            <div className=\"PageHeader\">{list.name} ({list.from} to {list.to})</div>\r\n                            <button className=\"Button\"><Link to={`${location.pathname}/review`}>Review</Link></button>\r\n                            <button className=\"Button danger\" onClick={() => handleDelete()}>Delete this list</button>\r\n\r\n                            <section className=\"List__info\">\r\n                                <header className=\"List__info--header\">List info</header>\r\n                                <p className=\"List__info--item\">There are <span className=\"List__info--datum\">{list.numTerms}</span> terms in this list.</p>\r\n                                { list.lastReviewed \r\n                                    ?\r\n                                        <p className=\"List__info--item\">You last reviewed this list\r\n                                            <span className=\"List__info--datum\">\r\n                                                {formatDate(list.lastReviewed, 'hh:mma, MMMM Do')}\r\n                                            </span>\r\n                                        </p>\r\n                                    :\r\n                                        <p className=\"List__info--item\" style={{width: 'max-content', backgroundColor: 'blueviolet'}}>You haven't reviewed this list yet. Get on it!</p>\r\n                                }\r\n\r\n                            </section>\r\n\r\n                            <section className=\"List__content\">\r\n                                <ul className=\"terms\">\r\n                                    <header className=\"List__terms--header\">Terms</header>\r\n                                    {terms}\r\n                                </ul>\r\n                            </section>\r\n\r\n                        </>\r\n                    }\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n})\r\n\r\nexport default List","import dayjs from 'dayjs';\r\n\r\nexport const extractSession = (list, i) => {\r\n    let sessionStartDate = dayjs(list.sessions[i].start);\r\n    let sessionEndDate = dayjs(list.sessions[i].end);\r\n\r\n    let session = list.content\r\n        .map(term => {\r\n            if (Date(sessionStartDate) === Date(term.history[i].date)) {\r\n                return term.history[i].content\r\n            }\r\n\r\n            return null\r\n        })\r\n        .filter(d => d !== null)\r\n\r\n    return ({ start: sessionStartDate, end: sessionEndDate, session: session })\r\n\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { useRouteProps } from '../../hooks/routerHooks';\r\nimport './style/User.scss';\r\n\r\nconst User = () => {\r\n    const { params } = useRouteProps();\r\n    const username = params.username;\r\n\r\n    return (\r\n        <div className=\"PageWrapper\">\r\n            <div className=\"User\">\r\n                <div className=\"PageHeader UserHeader\">User page for /u/{params.username}</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default User;","import React, { memo, useEffect, useState } from \"react\";\r\nimport { Link } from 'react-router-dom';\r\nimport { useRouteProps } from \"../../hooks/routerHooks\";\r\nimport './style/ListsItem.scss'\r\nimport { timeSince } from '../../helpers/time';\r\nimport dayjs from 'dayjs';\r\n\r\nconst ListsItem = memo(({ list }) => {\r\n    const { params } = useRouteProps();\r\n\r\n    const timeSinceLastReview = (list) => {\r\n        if (!list.lastReviewed) { return null }\r\n\r\n        return dayjs(new Date()) - dayjs(list.lastReviewed)\r\n    }\r\n\r\n    const colorByLastReviewDate = (timeSince) => {\r\n        let day = 3600*24*1000\r\n        if (!timeSince) {\r\n            return '#333'\r\n        } if (timeSince < day) {\r\n            return 'seagreen'\r\n        } if (timeSince < 2*day) {\r\n            return 'teal'\r\n        } if (timeSince < 3*day) {\r\n            return 'yellowgreen'\r\n        } if (timeSince < 7*day) {\r\n            return 'orange'\r\n        } \r\n        return 'orangered'\r\n    }\r\n\r\n\r\n    return (\r\n        <div style={{borderColor: colorByLastReviewDate(timeSinceLastReview(list))}}className=\"ListsItem\">\r\n            <div className=\"ListsItem__name\">\r\n                <Link className=\"Link\" to={`/u/${params.username}/list/${list._id}`}>{list.name}</Link>\r\n            </div>\r\n            <div className=\"ListsItem__from\">{list.from}</div>\r\n            <div className=\"ListsItem__to\">{list.to}</div>\r\n            <div className=\"ListsItem__numTerms\">{list.numTerms} terms in this list</div>\r\n        { list.sessions.length > 0 && \r\n            <div className=\"ListsItem__since\">\r\n                <em>last reviewed {timeSince(list.sessions[list.sessions.length-1].end)}</em>\r\n            </div> \r\n        }\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default ListsItem","import React, { memo, useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useRouteProps } from '../../hooks/routerHooks';\r\nimport { useRequest } from '../../hooks/useRequest';\r\nimport { handleError, handleResponse } from '../../helpers/apiHandlers';\r\nimport ListsItem from './ListsItem';\r\nimport './style/Lists.scss'\r\n\r\nimport { getLists } from '../../helpers/apiHandlers'\r\n\r\n\r\nconst Lists = memo((props) => {\r\n    const\r\n        [filter, setFilter] = useState(''),\r\n        [listsElement, setListsElement] = useState(null),\r\n        [sortBy, setSortBy] = useState('created'),\r\n        { params } = useRouteProps();\r\n\r\n\r\n    // useRequest logic ends up being condensed to these three lines:\r\n    const { response: lists, setRequest, loading, error } = useRequest({ handleError, handleResponse })\r\n    \r\n    useEffect(() => {\r\n        setRequest(() => getLists(params.username))\r\n    }, [])\r\n\r\n    useEffect(() => { if (lists) { setListsElement(makeListsElement(lists)) } }, [lists])\r\n\r\n    const handleFilterChange = e => {\r\n        let val = e.currentTarget.value;\r\n        setFilter(val.length > 0 ? val : '')\r\n    }\r\n\r\n    const handleSelectChange = e => {\r\n        setSortBy(e.currentTarget.value)\r\n    }\r\n\r\n    const makeListsElement = (lists) => {\r\n        return lists.map(l => ({\r\n            name: l.name,\r\n            lastReviewed: l.lastReviewed,\r\n            created: l.created,\r\n            element: <ListsItem key={l._id} list={l} />\r\n        }))\r\n    }\r\n\r\n    return (\r\n        <>\r\n\r\n            { loading && \r\n                <div className=\"PageWrapper\">\r\n                    Loading lists..\r\n                </div>\r\n            }\r\n\r\n            { error && JSON.stringify(error)}\r\n\r\n            { lists && lists.length > 0 &&\r\n                <div className=\"PageWrapper\">\r\n                    <div className=\"PageHeader\">Lists by <Link className=\"Link\" to={`/u/${params.username}`}>/u/{params.username}</Link></div>\r\n                    <button className=\"Button\"><Link to={`/u/${params.username}/lists/new`}>Make a new list</Link></button>\r\n\r\n                    <div className=\"Lists__header\">\r\n                        <div className=\"Lists__filter\">\r\n                            <label htmlFor=\"filter\" id=\"Lists__filter--label\">Filter lists by name</label>\r\n                            <input\r\n                                autoFocus\r\n                                onChange={handleFilterChange}\r\n                                placeholder=\"e.g. 'chapter 2'\"\r\n                                id=\"Lists__filter\"\r\n                                type=\"text\"\r\n                                name=\"filter\"\r\n                                value={filter}\r\n                            />\r\n                        </div>\r\n                        <div className=\"Lists__sort\">\r\n                            <label id=\"Lists__sort--label\" htmlFor=\"sort\">Sort lists by</label>\r\n                            <select onChange={handleSelectChange} value={sortBy} name=\"sort\">\r\n                                <option value=\"name\">name</option>\r\n                                <option value=\"created\">creation date</option>\r\n                                <option value=\"lastReviewed\">last review date</option>\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"Lists\">\r\n\r\n                        {listsElement &&\r\n                            listsElement\r\n                                .filter(l => l.name.toLowerCase().includes(filter.toLowerCase()))\r\n                                .sort((first, second) => first[sortBy] < second[sortBy] ? -1 : 1)  // TODO: sort by lowercase, sort out undefined cases (lastReviewed may be undefined\r\n                                .map(l => l.element)\r\n                        }\r\n\r\n                    </div>\r\n                </div>\r\n\r\n            }\r\n\r\n            { lists && lists.length === 0 &&\r\n                <div className=\"PageWrapper\">\r\n                    <div className=\"PageHeader\">Lists by <Link className=\"Link\" to={`/u/${params.username}`}>/u/{params.username}</Link></div>\r\n                    <div className=\"Lists__new\">\r\n                        It appears you don't have any lists.\r\n                    </div>\r\n                    <button className=\"Button\"><Link to={`/u/${params.username}/lists/new`}>Make a new list</Link></button>\r\n\r\n                </div>\r\n            }\r\n\r\n        </>\r\n    )\r\n})\r\n\r\nexport default Lists;","import React, { memo } from 'react';\r\nimport './style/NewList.scss'\r\n\r\nconst NewListTerm = memo(({ index, formOutput, setFormOutput }) => {\r\n    const handleTermBlur = (e, idx) => {\r\n        let copy = { ...formOutput }\r\n        if (!copy.content[idx] && e.target.value) {\r\n            copy.content[idx] = { to: \"\", from: \"\" };\r\n        }\r\n        if (e.target.value && e.target.value !== copy.content[idx][e.target.name]) {\r\n            copy.content[idx][e.target.name] = e.target.value\r\n            setFormOutput({ ...formOutput, content: copy.content })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"NewList__term\">\r\n            <div className=\"NewList__term--index\">{index+1}</div>\r\n            <input className=\"NewList__term--input\" onBlur={(e) => handleTermBlur(e, index)} type=\"text\" name=\"from\" />\r\n            <input className=\"NewList__term--input\" onBlur={(e) => handleTermBlur(e, index)} type=\"text\" name=\"to\" />\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default NewListTerm;\r\n\r\n/*\r\nFuture:\r\n- might need multiple 'to' fields, which should be indicated by user through UI.\r\n\r\n*/","import React, { useState, useEffect, memo } from 'react';\r\nimport { useRouteProps } from '../../hooks/routerHooks';\r\nimport { useLogState } from '../../hooks/state'\r\nimport { postList, handlePostList } from '../../helpers/apiHandlers';\r\nimport { useRequest } from '../../hooks/useRequest';\r\nimport './style/NewList.scss';\r\nimport NewListTerm from './NewListTerm';\r\n\r\nconst NewList = memo((props) => {\r\n    const { params } = useRouteProps();\r\n    const [numTerms, setNumTerms] = useState(10)  // @TODO: allow user to set default number of terms when making new list\r\n    const [formOutput, setFormOutput] = useState(() => ({\r\n        name: \"\",\r\n        from: \"\",\r\n        to: \"\",\r\n        content: new Array(numTerms),\r\n        created: null,\r\n        numTerms: 0,\r\n    }))\r\n    const [termInputs, setTermInputs] = useState([]);\r\n\r\n    const { response: postResponse, setRequest: setPostRequest } = useRequest({...handlePostList()});\r\n\r\n    useLogState('postresponse', postResponse)\r\n\r\n    useEffect(() => {\r\n        setTermInputs(makeTermInputElements(formOutput, numTerms))\r\n    }, [formOutput, numTerms])\r\n\r\n    function makeTermInputElements(formOutput, numTerms) {\r\n        let termElements = []\r\n        for (let i = 0; i < numTerms; i++) {\r\n            termElements.push(\r\n                <NewListTerm key={`term-${i + 1}`} index={i} formOutput={formOutput} setFormOutput={setFormOutput} />\r\n            )\r\n        }\r\n        return termElements\r\n    }\r\n\r\n    const handleAddRows = e => {\r\n        setNumTerms(numTerms + 10);\r\n    }\r\n\r\n\r\n    const handleBlur = e => {;\r\n        if (e.currentTarget.value !== formOutput[e.currentTarget.name]) {\r\n            setFormOutput({ ...formOutput, [e.currentTarget.name]: e.currentTarget.value })\r\n        }\r\n    }\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        console.log('user:', params.username);\r\n        setPostRequest(() => postList(params.username, {\r\n            owner: params.username, // @TODO: replace\r\n            ...formOutput,\r\n            content: formOutput.content.filter(i => i !== null)\r\n        }))\r\n\r\n    }\r\n\r\n    return (\r\n        <div className=\"NewList\">\r\n            <div className=\"PageHeader\">\r\n                New List\r\n            </div>\r\n\r\n            <form className=\"NewList__form\">\r\n                <input className=\"NewList__form--name\" onBlur={handleBlur} type=\"text\" name=\"name\" placeholder=\"List name\" />\r\n                <input className=\"NewList__form--language\" onBlur={handleBlur} type=\"text\" name=\"from\" placeholder=\"Original language\" />\r\n                <input className=\"NewList__form--language\" onBlur={handleBlur} type=\"text\" name=\"to\" placeholder=\"Translated language\" />\r\n\r\n\r\n                <div className=\"NewList__terms\">\r\n                    <input className=\"Form__button\" onClick={handleAddRows} type=\"button\" value=\"Add rows\" />\r\n\r\n                    {termInputs.length > 0 &&\r\n                        <>\r\n                            <div className=\"NewList__terms--header\">\r\n                                <span></span>\r\n                                {formOutput &&\r\n                                    <>\r\n                                        <span className=\"Terms__header--side\">{formOutput.from}</span>\r\n                                        <span className=\"Terms__header--side\">{formOutput.to}</span>\r\n                                    </>\r\n                                }\r\n                            </div>\r\n                            {termInputs}\r\n                        </>\r\n                    }\r\n                </div>\r\n\r\n                <input className=\"Form__button\" onClick={handleSubmit} type=\"button\" value=\"Create list\" />\r\n            </form>\r\n\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default NewList\r\n","/**\r\n * Testing nested grids\r\n */\r\n// import React from \"react\";\r\n// import './Test.css'\r\n\r\n// const Test = (props) => {\r\n\r\n//     return (\r\n//         <div className=\"Test\">\r\n//             <div className=\"Line\">\r\n//                 <div className=\"Line__name\">Jeff</div>\r\n//                 <div className=\"Line__content\">\r\n//                     <div className=\"Button\"></div>\r\n//                     <div className=\"Button\"></div>\r\n//                 </div>\r\n//                 <div className=\"Line__end\">End</div>\r\n//             </div>\r\n//         </div>\r\n//     )\r\n// }\r\n\r\n// export default Test\r\n\r\n/**\r\n * Sandboxing ListsOverviewList\r\n */\r\n\r\n//  import React, { useState, useEffect } from \"react\";\r\n// import { getListsByUser } from \"../helpers/db.api\";\r\n \r\n//  const Test = (props) => {\r\n//      const [lists, setLists] = useState(null);\r\n     \r\n//      useEffect(() => {\r\n//         getListsByUser('seerden')\r\n//             .then(r => setLists(r))\r\n//      }, [])\r\n//      return (\r\n//          <div className=\"Lists\">\r\n//            {lists && JSON.stringify(Object.keys(lists[0]))}  \r\n//          </div>\r\n//      )\r\n//  }\r\n \r\n//  export default Test\r\n\r\nimport React from \"react\";\r\nimport dayjs from 'dayjs'\r\nimport relativeTime from 'dayjs/plugin/relativeTime'\r\ndayjs.extend(relativeTime)\r\n\r\nconst Test = (props) => {\r\n    const yesterday = dayjs('2020-10-19');\r\n\r\n    return (\r\n        <div className=\"Test\">\r\n            {yesterday.fromNow()}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Test","import React, { memo } from \"react\";\r\nimport { Link } from 'react-router-dom';\r\nimport './style/Home.scss';\r\n\r\nconst Home = memo((props) => {\r\n\r\n    return (\r\n        <div className=\"PageWrapper\">\r\n            <div className=\"Home\">\r\n                <div className=\"PageHeader\">\r\n                    Home\r\n                </div>\r\n\r\n                <div className=\"Home__description\">\r\n                    <section>\r\n                        <header className=\"Home__header\">About</header>\r\n                        <p className=\"Home__paragraph\">\r\n                            <span>\r\n                                Mana is a <a className=\"Home__link\" href=\"https://en.wikipedia.org/wiki/Spaced_repetition\">spaced-repetition</a> language learning application I built to streamline the language studying I do in my own free time,\r\n                                but of course anyone who shares my studying mindset and can benefit from this application is welcome to partake!</span>\r\n                            <span>\r\n                                Spaced-repetition learning principles are quite straightforward: each (vocabulary) term is implemented as a virtual flash card. Learning intervals are chosen based on your preferences, and on how well you know each term.\r\n                                This way, things you know won't come up as often in review, placing the focus on what you <em>don't</em> know, thereby increasing retention, and saving a lot of time.\r\n\r\n\r\n                            </span>\r\n                            <span>\r\n                                Besides the benefits of having an application made specifically for my learning preferences, building the application has served me very well in refining my web development skillset, and hence the project has become one my fullstack web development portfolio projects.\r\n                                The source code is available on my <a className=\"Home__link\" href=\"https://github.com/seerden/mana\">GitHub</a>.\r\n                            </span>\r\n                        </p>\r\n                    </section>\r\n\r\n                    <section>\r\n                        <header className=\"Home__header\">Getting started</header>\r\n                        <p className=\"Home__paragraph\">\r\n                            <span>\r\n                                If you're just taking a look at the application, please click <a className=\"Home__link\" href=\"/\">here</a> to be logged in as a temporary user.\r\n                                You'll see a number of lists having been created already, including some review activity, so you can fully explore the functionality the application has to offer.\r\n                                Changes you make will persist to the database, but the temporary account and all its content will be removed after two hours.\r\n\r\n                                If you like what you've experienced within that time, go ahead and make an actual account!\r\n                            </span>\r\n\r\n\r\n                        </p>\r\n                    </section>\r\n                    <section>\r\n                        <header className=\"Home__header\">\r\n                            Register\r\n                        </header>\r\n                    </section>\r\n                    <p className=\"Home__paragraph\">\r\n                        <span>\r\n                            If you're ready to make an account, click <Link className=\"Home__link\" to=\"/register\">here</Link> to register. It's free, and no personal information will be requested or stored.\r\n                        </span>\r\n                    </p>\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default Home","import React, { useEffect, useState } from \"react\";\r\nimport './style/Register.scss';\r\nimport { useLogState, handleFormBlur } from '../../hooks/state';\r\nimport { postUser } from '../../helpers/apiHandlers';\r\n\r\nconst Register = (props) => {\r\n    const defaultUser = { username: null, password: null }\r\n    const [response, setResponse] = useState(null);\r\n\r\n    const [newUser, setNewUser] = useState(defaultUser);\r\n\r\n    useLogState('new user', newUser)\r\n\r\n    const handleSubmit = newUser => {\r\n        postUser(newUser)\r\n            .then(r => setResponse(r))\r\n            .catch(err => console.log(err.response.status))\r\n    }\r\n\r\n    return (\r\n        <div className=\"PageWrapper\">\r\n            <div className=\"Register\">\r\n                    {!response &&\r\n                        <>\r\n                            <div className=\"PageHeader\">Register a new account</div>\r\n                            <form className=\"Register__form\">\r\n                                <label htmlFor=\"username\">Username</label>\r\n                                <input onBlur={e => handleFormBlur(e, newUser, setNewUser)} type=\"text\" name=\"username\" />\r\n\r\n                                <label htmlFor=\"password\">Password</label>\r\n                                <input onBlur={e => handleFormBlur(e, newUser, setNewUser)} type=\"password\" name=\"password\" />\r\n\r\n                                <input onClick={() => handleSubmit(newUser)} className=\"Register__button\" type=\"button\" value=\"Register\" />\r\n                            </form>\r\n                        </>\r\n                    }\r\n\r\n                    { response && \r\n                        <>\r\n                            <div>\r\n                                {JSON.stringify(response)}\r\n                            </div>\r\n                        </>\r\n                    }\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Register\r\n\r\n/*\r\n    - should only be visible when not logged in, but include a check to confirm, anyway.\r\n    - accounts are streamlined. only take username, password (figure out hashing)\r\n*/","import React, { memo } from 'react';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\n\nimport './style/App.scss';\n\nimport PrivateRoute from '../wrappers/PrivateRoute';\nimport Private from '../wrappers/Private';\nimport Header from './layout/Header';\nimport Footer from './layout/Footer';\nimport Review from './review/Review';\nimport List from './list/List';\nimport User from './user/User';\nimport Lists from './lists/Lists';\nimport NewList from './newlist/NewList';\nimport Test from './Test';\nimport Home from './Home';\nimport Register from './register/Register';\nimport Login from './login/Login';\n\nimport { LoginProvider } from '../context/LoginContext';\nimport { ListProvider } from '../context/ListContext';\nimport { ReviewProvider } from '../context/ReviewContext';\n\nconst App = memo(() => {\n    return (\n        <>\n            <div className=\"App__wrapper\">\n                <LoginProvider>\n                    <Router>\n                        <Header />\n                        <div className=\"App\">\n                            <ListProvider>\n                                <Routes>\n                                    {/* test route */}\n                                    <Route path=\"/test\" element={<Test />} />\n\n                                    {/* home route */}\n                                    <Route path=\"/\" element={<Home />} />\n\n                                    <Route path=\"/register\" element={<Register />} />\n                                    <Route path=\"/login\" element={<Login />} />\n\n\n                                    {/* user routes */}\n                                    <Route path=\"/u/:username\">\n                                        <PrivateRoute path=\"/\" component={User}/>\n                                        <Route path=\"/lists\">\n                                            <PrivateRoute path=\"/\" component={Lists} />\n                                            <PrivateRoute path=\"/new\" component={NewList} />\n                                        </Route>\n\n                                        <Route path=\"/list\">\n\n                                            <Route path=\"/:id\">\n\n                                                <Route path=\"/review\" element={\n                                                    <ReviewProvider>\n                                                        <Private component={Review}/>\n                                                    </ReviewProvider>\n                                                }\n                                                />\n                                                <PrivateRoute path=\"/\" component={List} />\n\n                                            </Route>\n                                        </Route>\n\n\n                                    </Route>\n                                    {/* catchall 404 route */}\n                                    <Route path=\"*\" element={<div>404</div>} />\n                                </Routes>\n                            </ListProvider>\n                        </div>\n                        <Footer />\n                    </Router>\n                </LoginProvider>\n            </div>\n\n        </>\n    )\n})\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss'\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}