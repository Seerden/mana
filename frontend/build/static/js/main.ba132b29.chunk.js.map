{"version":3,"sources":["hooks/state.js","context/LoginContext.js","components/Header.js","hooks/routerHooks.js","helpers/db.api.js","components/review/ReviewCard.js","components/review/Review.js","helpers/review.helpers.js","wrappers/Editable.js","components/list/ListTermInput.js","context/ListContext.js","components/list/ListTerm.js","components/list/ListSessions.js","components/list/List.js","helpers/backend.api.js","components/User.js","components/sets/Sets.js","components/lists/Lists.js","components/newlist/NewListTerm.js","components/newlist/LanguageInput.js","components/newlist/NewList.js","components/App.js","index.js"],"names":["useLogState","name","state","setState","useEffect","console","log","LoginContext","createContext","LoginProvider","memo","props","useState","currentUser","setCurrentUser","Provider","value","user","children","Header","useContext","className","id","to","useRouteProps","location","useLocation","navigate","useNavigate","params","useParams","getListFromDB","query","a","axios","get","then","r","data","catch","e","updateList","body","post","res","response","Error","getListsByUser","username","ReviewCard","term","side","setSide","flipping","setFlipping","fade","setFade","window","addEventListener","handleKeyup","removeEventListener","setTimeout","includes","code","flip","duration","Review","Date","sessionStart","sessionEnd","setSessionEnd","list","setList","passCount","setPassCount","useReducer","terms","action","type","payload","slice","newIndex","Math","floor","length","random","newTerms","currentTerm","shift","splice","futureTerms","reduceFutureTerms","currentCard","setCurrentCard","progress","setProgress","failRef","useRef","passRef","_id","toReview","n","shuffled","makeList","j","copy","indices","i","push","buildTermList","content","key","from","sessionLength","termsCompleted","handleKeydown","ref","current","focus","click","blur","handleClick","passfail","updatedList","idx","findIndex","history","date","now","histLen","lastHist","dayjs","newList","updateSessionHistory","end","sessions","start","numTerms","owner","onClick","style","width","toISOString","Editable","initialState","editState","editing","setIsEditing","React","cloneElement","onBlur","ListTermInput","_term","handleTermEdit","autoFocus","autoCorrect","defaultValue","ListContext","ListProvider","listContextValue","setListContextValue","ListTerm","handleTermDelete","setTerm","isEditing","confirmingDelete","setConfirmingDelete","isHovering","setIsHovering","termStyles","gridTemplateColumns","termDeleteStyles","backgroundColor","border","handleConfirmClick","preventDefault","field","target","newTerm","newListContent","onMouseEnter","onMouseLeave","title","Session","session","formatDate","format","ListSessions","reverse","map","s","List","setTerms","termProps","pathname","getUserFromDB","args","populate","err","User","setUser","JSON","stringify","Sets","Lists","lists","setLists","filter","setFilter","elements","setElements","makeListsEl","l","toLowerCase","el","undefined","onChange","val","currentTarget","placeholder","NewListTerm","index","formOutput","setFormOutput","handleTermBlur","LanguageInput","handleBlur","t","languages","htmlFor","NewList","setNumTerms","termEls","listName","Array","App","path","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ba132b29.chunk.js","sourcesContent":["import { useEffect } from 'react'\r\n\r\n/**\r\n     * useEffect hook to log whenever a piece of state (or its initializer) changes\r\n     * @param   state       expected to be the return values of a useState call, but can be any variable that needs to be logged on change\r\n     * @param   setState    ^\r\n     * @return  undefined\r\n     * \r\n     * @todo    change args to take multiple pieces of state, each with their own dependency array\r\n     */\r\nexport const useLogState = (name, state, setState) => {\r\n    useEffect(() => {\r\n        state && console.log(`${name} changed:`, state);\r\n    }, [name, state, setState])\r\n}\r\n","import React, {memo, useState, useEffect, createContext } from 'react';\r\nimport { useLogState } from '../hooks/state';\r\n\r\nexport const LoginContext = createContext(null);\r\n\r\nconst LoginProvider = memo((props) => {\r\n    /**\r\n     * @todo    update this to do proper authentication, as it currently hard-codes 'seerden' as username\r\n     */\r\n    \r\n    const [currentUser, setCurrentUser] = useState(() => {'seerden'});\r\n    useEffect(() => {\r\n        setCurrentUser('seerden')\r\n    }, [])\r\n\r\n    useLogState('username', currentUser, setCurrentUser)\r\n\r\n\r\n    return (\r\n        <LoginContext.Provider value={ {user: currentUser }}>\r\n            {props.children}\r\n        </LoginContext.Provider>\r\n    )\r\n})\r\n\r\nexport default LoginProvider;\r\n// @dev replace with proper auth","import React, { useContext, memo } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { LoginContext } from '../context/LoginContext';\r\nimport './css/Header.css';\r\n\r\nconst Header = memo(() => {\r\n    const { user } = useContext(LoginContext);\r\n    return (\r\n        <div className=\"Header\">\r\n            <nav>\r\n                <span id=\"Logo\">Mana</span>\r\n                <NavLink className=\"NavLink\" to=\"/\">Home</NavLink>\r\n                <NavLink className=\"NavLink\" to={`/u/${user}/lists`}>Lists</NavLink>\r\n                <NavLink className=\"NavLink\" to={`/u/${user}/sets`}>Sets</NavLink>\r\n\r\n            </nav>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default Header;","import { useNavigate, useLocation, useParams }  from 'react-router-dom';\r\n\r\nexport const useRouteProps = () => {\r\n    return ({\r\n        location: useLocation(),\r\n        navigate: useNavigate(),\r\n        params: useParams(),\r\n    })\r\n}","import axios from 'axios';\r\n\r\n// axios.interceptors.request.use(req => {\r\n//     console.log('axios request:', req)\r\n//     return req\r\n// })\r\n\r\n/**\r\n     * Gets a list instance from the database\r\n     * @param   query   object with keys { _id, owner, name, from, to, content }, matching the properties of the list schema in the database\r\n     */\r\nexport const getListFromDB = async (query) => {\r\n    return axios.get('/db/list/', { params: query })\r\n        .then(r => r.data)\r\n        .catch(e => console.log(e))\r\n}\r\n\r\n/**\r\n     * Update local list changes (e.g. term deletions, edits, or updated session/term histories) to the database\r\n     * \r\n     * @param   {object}    query   database query for relevant list instance (combination of _id and owner should suffice)\r\n     * @param   {object}    body    updated list content\r\n     * \r\n     * @current         send entire list object to the backend as 'body',\r\n     *                      backend sets list.content to body.content\r\n     * @future          refine database call:\r\n     *                      - allow user to specify fields that need to be updated\r\n     *                      - implement this field udpating in the database     *      \r\n     */\r\nexport const updateList = async (query, body) => {\r\n    return axios.post('/db/list/update', {\r\n        data: {\r\n            query,\r\n            body\r\n        }\r\n    })\r\n        .then(res => res.data)\r\n        .catch(e => {\r\n            console.log(e.response)\r\n            throw new Error(e)\r\n        })\r\n}\r\n\r\n/**\r\n * Get all lists by the specific user from the database. Returns all list properties, except the content itself.\r\n * @param {string} username \r\n */\r\nexport const getListsByUser = async (username) => {\r\n    return axios.get(`/db/listsbyuser/${username}`)\r\n        .then(r => r.data)\r\n        .catch(e => console.log('Error fetching from database:', e))\r\n}","import React, { useState, useEffect } from \"react\";\r\n\r\nconst ReviewCard = ({ term }) => {\r\n    const [side, setSide] = useState('from');\r\n    const [flipping, setFlipping] = useState(false);\r\n    const [fade, setFade] = useState(false);\r\n    const toggleSide = () => setSide(side === 'from' ? 'to' : 'from')\r\n\r\n    useEffect(() => {\r\n        window.addEventListener('keyup', handleKeyup)\r\n        return () => {\r\n            window.removeEventListener('keyup', handleKeyup)\r\n        }\r\n    }, [side])\r\n\r\n    useEffect(() => { // when new term is shown, reset card state\r\n        setSide('from')\r\n        setFade(true)\r\n        setTimeout(() => setFade(false), 150)\r\n    }, [term])\r\n\r\n    const handleKeyup = (e) => {\r\n        if (['ArrowUp', 'ArrowDown'].includes(e.code)) flip();\r\n    }\r\n\r\n    const flip = () => {\r\n        let duration = 250  // match keyframes animation duration\r\n        setFlipping(true);\r\n        setTimeout(() => setFlipping(false), duration)\r\n        setTimeout(() => toggleSide(), duration / 2);\r\n    }\r\n\r\n    return (\r\n        <div className={`Review__current ReviewCard ${fade ? 'fadein' : ''} ${flipping ? 'flip' : ''}`}>\r\n            {term[side]}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ReviewCard\r\n\r\n/* \r\nReview card functionality:\r\n- Serve one term at a time in the form of a card. \r\n- Start by showing front, i.e. 'from' side.\r\n- Hide pass/fail buttons and pass/fail functionality until the back has been shown at least once. \r\n- Flip between front and back by clicking the card and with up/down arrow keys, mark pass/fail by clicking the two button elements and with left/right arrow keys.\r\n*/","import React, { memo, useEffect, useState, useRef, useReducer } from \"react\";\r\nimport { Link } from 'react-router-dom';\r\nimport { useRouteProps } from '../../hooks/routerHooks';\r\nimport { useLogState } from '../../hooks/state';\r\nimport { getListFromDB, updateList } from '../../helpers/db.api';\r\nimport { buildTermList } from '../../helpers/review.helpers';\r\nimport ReviewCard from './ReviewCard';\r\nimport './css/Review.css';\r\nimport dayjs from 'dayjs';\r\n\r\nconst Review = memo((props) => {\r\n    const n = 2; // number of times each term should be reviewed. @todo expand on this functionality\r\n    const { params } = useRouteProps();\r\n    const [sessionStart, setSessionStart] = useState(() => new Date())\r\n    const [sessionEnd, setSessionEnd] = useState(false);\r\n    const [list, setList] = useState(null);\r\n    const [passCount, setPassCount] = useState(0);\r\n    const [futureTerms, reduceFutureTerms] = useReducer(termReducer, []);\r\n    const [currentCard, setCurrentCard] = useState(null);\r\n    const [progress, setProgress] = useState(0);  // percentage of terms marked 'pass' in the session\r\n\r\n    const failRef = useRef(null);\r\n    const passRef = useRef(null);\r\n\r\n    useEffect(() => {  // get list from database and initialize futureTerms\r\n        getListFromDB({ _id: params.id }).then(res => {\r\n            setList(res);\r\n            let toReview = (buildTermList(res.content, n))\r\n            reduceFutureTerms({ type: 'init', payload: toReview })\r\n        })\r\n    }, [])\r\n\r\n    useEffect(() => {  // remove, recreate keydown listener, create <ReviewCard />\r\n        if (futureTerms.length > 0) {\r\n            setCurrentCard(<ReviewCard key={`card-${futureTerms[0].from}`} term={futureTerms[0]} />)\r\n        }\r\n\r\n        if (list && futureTerms) {\r\n            let sessionLength = list.content.length * n;\r\n            let termsCompleted = sessionLength - futureTerms.length;\r\n            setProgress(Math.floor(100 * termsCompleted / sessionLength));\r\n        }\r\n        \r\n        window.addEventListener('keydown', handleKeydown)\r\n        return () => window.removeEventListener('keydown', handleKeydown)\r\n    }, [futureTerms])\r\n\r\n    /**\r\n     * ArrowLeft/ArrowRight keydown event to simulate pressing the Pass/Fail buttons\r\n     * @param {*} e event object\r\n     */\r\n    const handleKeydown = e => {\r\n        let ref;\r\n        switch (e.code) {\r\n            case 'ArrowLeft':\r\n                ref = failRef;\r\n                break;\r\n            case 'ArrowRight':\r\n                ref = passRef\r\n                break;\r\n            default:\r\n                return\r\n        }\r\n\r\n        if (ref.current) {\r\n            ref.current.focus()\r\n            ref.current.click();\r\n            setTimeout(() => {  // highlight button for UX\r\n                if (ref.current) {\r\n                    ref.current.blur()\r\n                }\r\n            }, 100)\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * case init: initialize futureTerms using list.content from database\r\n     * case pass/fail: Handle what happens to current term after pass/fail is chosen.\r\n     * @param {Array} terms     array of terms\r\n     * @param {Object} action   properties: type (init, pass, fail). if type 'init', send terms as action.payload\r\n     */\r\n    function termReducer(terms, action) {\r\n        \r\n        switch (action.type) {\r\n            case 'init':\r\n                return action.payload\r\n            case 'pass':\r\n                // setPassCount(passCount+1)\r\n                // remove term from deck\r\n                return terms.slice(1,);\r\n            case 'fail':\r\n                /*  @todo:    insert term somewhere in 'current cycle' of review session \r\n                                i.e. if not all terms have been passed at least once, I don't want to place the term among the second 'cycle'\r\n                    @current:   re-insert the term at a random index */\r\n                let newIndex = Math.floor((terms.length + 1) * Math.random());\r\n\r\n                let newTerms = [...terms];\r\n                let currentTerm = newTerms.shift();\r\n                newTerms.splice(newIndex, 0, currentTerm);\r\n                return newTerms\r\n            default:\r\n                return terms\r\n        }\r\n    }\r\n\r\n    function updateSessionHistory(term, passfail) {\r\n        const content = list.content;\r\n        let idx = content.findIndex(i => i.to === term.to && i.from === term.from)\r\n        if (!content[idx].history || content[idx].history.length === 0) {\r\n            content[idx].history = [{ date: Date.now(), content: [] }]\r\n        }\r\n        if (content[idx].history.length > 0) {\r\n            let histLen = content[idx].history.length\r\n            let lastHist = content[idx].history[histLen - 1];\r\n\r\n            if (dayjs(lastHist.date) < dayjs(sessionStart)) {\r\n                content[idx].history.push({ date: sessionStart, content: [passfail] })\r\n            } else {\r\n                content[idx].history[histLen - 1].content.push(passfail)\r\n            }\r\n        }\r\n        let newList = { ...list, content: [...content] };\r\n        setList(newList);\r\n        return newList\r\n    }\r\n\r\n    function handleClick(e, passfail) {\r\n        let updatedList = updateSessionHistory(futureTerms[0], passfail);  // updateSessionHistory returns the newly updated state\r\n        reduceFutureTerms({ type: passfail })\r\n\r\n        if (passfail === 'pass') { setPassCount(passCount + 1) }\r\n        if (passCount === (n * list.content.length - 1) && passfail === 'pass') {  // end session\r\n            let end = new Date()\r\n            setSessionEnd(end)\r\n            updatedList.sessions.push({ start: sessionStart, end: end, numTerms: n * updatedList.content.length })\r\n            updateList({ _id: params.id, owner: list.owner }, updatedList)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"Review\">\r\n            { list &&\r\n                <div className=\"Review__title\">\r\n                    Reviewing\r\n                    <span className=\"Review__title--name\">{list.name}</span>\r\n                    by\r\n                    <span className=\"Review__title--owner\">{list.owner}</span>\r\n                </div>\r\n            }\r\n\r\n            { !sessionEnd && currentCard &&\r\n                <>\r\n                    {currentCard}\r\n\r\n                    <div className=\"Review__buttons\">\r\n                        <input ref={failRef} onClick={(e) => handleClick(e, 'fail')} className=\"Review-button fail\" type=\"button\" value=\"Fail\" />\r\n                        <input ref={passRef} onClick={(e) => handleClick(e, 'pass')} className=\"Review-button pass\" type=\"button\" value=\"Pass\" />\r\n                    </div>\r\n\r\n                    <div className=\"Review-progress__wrapper\">\r\n                        <div id=\"Review-progress__bar\" style={{ width: `${progress}%` }}></div>\r\n                    </div>\r\n                </>\r\n            }\r\n\r\n            { sessionEnd &&\r\n                <div className=\"Review__post\">\r\n                    <h2>Session completed.</h2>\r\n                    <div>Started on {sessionStart.toISOString()}</div>\r\n                    <div>Completed on {sessionEnd.toISOString()}</div>\r\n                    <Link className=\"Link-button\" to={`/list/${params.id}`}>Back to list</Link>\r\n                    <Link className=\"Link-button\"to={`/u/${list.owner}/lists`}>My lists</Link>\r\n                </div>\r\n            }\r\n\r\n            { !list && <div className=\"Loading\">Loading list...</div>}\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default Review;\r\n\r\n/*\r\n@todo?  set progress bar color based in session cycle. go to 100% n time with various colors, instead of slowly progress a single bar\r\n        makes it feel like progress is faster\r\n\r\n@todo   add sessions property to List itself, include sessionStart and sessionEnd on session start, end\r\n*/\r\n\r\n","export const buildTermList = (terms, n) => {\r\n    /*  \r\n    input: content property of db List instance, which is an array of (presumably unique) objects with keys 'from' and 'to'\r\n    output: a single joined array of two Knuth-shuffled copies of the input array\r\n    */\r\n\r\n    let shuffled = []\r\n\r\n    const makeList = () => {\r\n        const copy = [...terms]\r\n        const indices = []\r\n        /* \r\n        although we swap the actual values in-place, it's just easier to create a copy here, \r\n        since I do the building (at least) twice\r\n        */\r\n\r\n        let len = copy.length;\r\n        let i = len - 1;\r\n        let j;\r\n        while (i > 0) {\r\n            /*\r\n            take item at i-th index and swap it with a random item in [0, i] (can 'swap' with itself)\r\n            this swaps in-place\r\n            */\r\n            j = Math.floor((i + 1) * Math.random());\r\n            [copy[i], copy[j]] = [copy[j], copy[i]];\r\n            indices.push(j)\r\n\r\n            i -= 1\r\n        }\r\n        return copy\r\n    }\r\n\r\n    let i = 0;\r\n    while (i < n) {\r\n        shuffled = [...shuffled, ...makeList()]\r\n        i++\r\n    }\r\n\r\n    return shuffled\r\n}","import React, { memo, useState } from \"react\";\r\n\r\n/**\r\n * React component wrapper, to use when a single read-only component should be swapped to an editable component on click\r\n* @param   {jsx}   initialState    jsx component to display when not editing\r\n* @param   {jsx}   editState       jsx component to display when editing\r\n* @comment     note that attaching click handlers to a jsx element won't really work, since the fragment isn't tangible\r\n* @current     attaches onClick handler to the initial component to swap to editing state.\r\n*              attaches onBlur handler to editing component to swap back to initial state\r\n* @return {React.Component}    React component\r\n* \r\n*/\r\nconst Editable = memo(({ initialState, editState }) => {\r\n    const [editing, setIsEditing] = useState(false);\r\n\r\n    return (\r\n        <>\r\n            { !editing &&\r\n                React.cloneElement(initialState, { onClick: () => setIsEditing(true) })\r\n                // <div onClick={handleClick}>\r\n                //     {initialState}\r\n                // </div>\r\n\r\n            }\r\n            { editing &&\r\n                // React.cloneElement(editState, {onBlur: () => handleBlur()})\r\n                <div onBlur={() => setIsEditing(false)}>\r\n                    {editState}\r\n                </div>\r\n            }\r\n\r\n        </>\r\n    )\r\n})\r\n\r\nexport default Editable","import React, { memo } from \"react\";\r\n\r\nconst ListTermInput = memo(({ _term, handleTermEdit, side }) => {\r\n    \r\n    return (\r\n        <input\r\n            autoFocus\r\n            autoCorrect=\"false\"\r\n            className=\"List__term-input\"\r\n            onBlur={(e) => handleTermEdit(e, side)}\r\n            type=\"text\" name=\"\" id=\"\" defaultValue={_term[side]} \r\n        />\r\n    )\r\n})\r\n\r\nexport default ListTermInput","import React, { useState, createContext } from \"react\";\r\n\r\nexport const ListContext = createContext(null);\r\n\r\nexport const ListProvider = (props) => {\r\n    const [listContextValue, setListContextValue] = useState(() => {});\r\n\r\n    return (\r\n        <ListContext.Provider value={{listContextValue, setListContextValue}}>\r\n            {props.children}\r\n        </ListContext.Provider>\r\n    )\r\n}","import React, { memo, useContext, useState, useEffect } from \"react\";\r\nimport Editable from '../../wrappers/Editable';\r\nimport ListTermInput from './ListTermInput';\r\nimport { ListContext } from '../../context/ListContext';\r\nimport { updateList} from '../../helpers/db.api';\r\n\r\n/**\r\n * ListTerm component\r\n * @param {object}  props: handleTermDelete (passed down function), term (list.content entry), idx (Number)\r\n */\r\nconst ListTerm = memo(({ handleTermDelete, term, idx }) => {\r\n    const [_term, setTerm] = useState(() => ({ from: term.from, to: term.to }))\r\n    const [isEditing, setIsEditing] = useState(false);\r\n    const [confirmingDelete, setConfirmingDelete] = useState(false);\r\n    const [isHovering, setIsHovering] = useState(false)\r\n    const { listContextValue, setListContextValue } = useContext(ListContext);\r\n\r\n    const termStyles = {\r\n        gridTemplateColumns: !confirmingDelete \r\n            ? `2rem repeat(2, minmax(40%, min-content)) 2rem`\r\n            : `2rem minmax(40%, min-content) repeat(2, auto)`,\r\n    }\r\n    const termDeleteStyles = {\r\n        backgroundColor: confirmingDelete ? '' : null,\r\n        border: confirmingDelete ? '2px solid orangered' : null\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            setIsEditing(false);\r\n            setConfirmingDelete(false);\r\n            setIsHovering(false)\r\n        }\r\n    }, [])\r\n\r\n    /**\r\n     * Remove term from the list.\r\n     * Triggered on deletion confirmation.\r\n     * \r\n     * @todo        remove term from database entirely from this hook? or is there another 'send changes to database' layer on the /list/:id page?\r\n     * @param {object} action    currently only expects {type: 'delete'}\r\n     */\r\n    const handleConfirmClick = (e, action) => {\r\n        e.preventDefault();\r\n        setConfirmingDelete(false);\r\n        if (action.type === 'delete') {\r\n            handleTermDelete(idx);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @param   {string}    field   'from'/'to', related to term.to and term.from properties (term is passed from props)\r\n    * @todo update actual list itself, also update listContextValue, and then push new list state to db\r\n    */\r\n    const handleTermEdit = (e, field) => {\r\n        if (e.target.value && _term[field] !== e.target.value) {\r\n            let newTerm = { ..._term, [field]: e.target.value }\r\n            setTerm(newTerm)\r\n            let newListContent = [...listContextValue.content];\r\n            newListContent[idx] = {...newTerm};\r\n            let newList = {...listContextValue, content: [...newListContent]}\r\n            setListContextValue(newList);\r\n            updateList({_id: listContextValue._id, owner: listContextValue.owner}, newList)\r\n                .then(r => console.log('List updated in database', r))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <li\r\n            onMouseEnter={() => setIsHovering(true)}\r\n            onMouseLeave={() => setIsHovering(false)}\r\n            className=\"List__term\"\r\n            style={{ ...termStyles, ...termDeleteStyles }}\r\n        >\r\n            <div className=\"List__term-index\">{idx + 1}</div>\r\n\r\n            <Editable\r\n                initialState={<div title=\"Click to edit\" className=\"List__term-from\">{_term.from}</div>}\r\n                editState={<ListTermInput _term={_term} handleTermEdit={handleTermEdit} side=\"from\" />}\r\n            />\r\n\r\n            <Editable\r\n                initialState={<div title=\"Click to edit\" className=\"List__term-to\">{_term.to}</div>}\r\n                editState={<ListTermInput _term={_term} handleTermEdit={handleTermEdit} side=\"to\" />}\r\n\r\n            />\r\n\r\n            { !isEditing && confirmingDelete &&\r\n                <span className=\"List__term-remove-confirm\">\r\n                    <input\r\n                        title=\"Permanently delete term\"\r\n                        onClick={(e) => handleConfirmClick(e, { type: 'delete' })}\r\n                        className=\"remove-confirm-button remove-remove\" type=\"button\" value=\"delete\" />\r\n                    <input\r\n                        title=\"Keep term\"\r\n                        onClick={e => handleConfirmClick(e, 'keep')}\r\n                        className=\"remove-confirm-button remove-keep\" type=\"button\" value=\"keep\" />\r\n                </span>\r\n            }\r\n\r\n            { !isEditing && isHovering && !confirmingDelete &&\r\n                <input\r\n                    onClick={() => setConfirmingDelete(true)}\r\n                    className=\"List__term-remove\"\r\n                    type=\"button\"\r\n                    value=\"x\"\r\n                />\r\n            }\r\n        </li>\r\n        </>\r\n    )\r\n})\r\n\r\nexport default ListTerm\r\n\r\n/*\r\n@todo:  add edit functionality to 'to' field,\r\n        after writing a TermEdit component that has both the input field and the editing state\r\n\r\n        put a wrapper around the term/edit to assure dimensions match\r\n*/\r\n\r\n/* @todo fix widescreen grid (too much empty space between terms and sessions) */","import React from \"react\";\r\nimport dayjs from 'dayjs';\r\nimport './css/ListSession.css'\r\n\r\nconst ListSessions = ({ sessions }) => {\r\n\r\n    return (\r\n        <div className=\"Sessions\">\r\n            { sessions && sessions.length > 0 &&\r\n                <>\r\n                    <div className=\"Sessions__title\">\r\n                        Sessions\r\n                    </div>\r\n                    <div className=\"Sessions__sessions\">\r\n                        <div className=\"Sessions__header\">\r\n                            <span>Start</span>\r\n                            <span>End</span>\r\n                            <span># Terms</span>\r\n                        </div>\r\n                        {sessions && sessions.reverse().map(s => <Session key={`session-${s.start}`} session={s} />)}\r\n                    </div>\r\n                </>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Session = ({ session }) => {\r\n    const { start, end, numTerms } = session;\r\n    const formatDate = (date) => dayjs(date).format('YYYY-MM-DD HH:mm')\r\n\r\n    return (\r\n        <div className=\"Session__Wrapper\">\r\n\r\n            <div className=\"Session\">\r\n                <div className=\"Session__start\">\r\n                    {formatDate(start)}\r\n                </div>\r\n                <div className=\"Session__end\">\r\n                    {formatDate(end)}\r\n                </div>\r\n                <div className=\"Session__numTerms\">\r\n                    {numTerms}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ListSessions","import React, { memo, useContext, useState, useEffect } from \"react\";\r\nimport { Link } from 'react-router-dom';\r\nimport './css/List.css';\r\nimport { useRouteProps } from '../../hooks/routerHooks';\r\nimport { getListFromDB, updateList } from '../../helpers/db.api';\r\nimport ListTerm from './ListTerm'\r\nimport ListSessions from './ListSessions';\r\nimport { ListContext } from '../../context/ListContext';\r\n\r\nconst List = memo((props) => {\r\n    const [list, setList] = useState(null);\r\n    const [terms, setTerms] = useState(null);\r\n    const { params, location } = useRouteProps();\r\n    const { listContextValue, setListContextValue } = useContext(ListContext);\r\n\r\n    const updateTerms = () => {\r\n        setTerms(list.content.map((term, idx) => {\r\n            let termProps = {\r\n                handleTermDelete,\r\n                key: `list-term-${term.to}-${term.from}`,\r\n                idx: idx,\r\n                term\r\n            }\r\n\r\n            return (\r\n                <ListTerm {...termProps} />\r\n            )\r\n        }))\r\n    }\r\n\r\n    useEffect(() => {\r\n        getListFromDB({ _id: params.id }).then(res => {\r\n            setList(res);\r\n            setListContextValue(res)\r\n        })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (list && list.content && list.content.length > 0) {\r\n            updateTerms();\r\n            /*  updateTerms needs to be called only AFTER list has been put into state, since this depends on list\r\n                this means I can't call updateTerms(res) inside the useEffect hook above (where I do getListFromDb.then(res => setList(res))) */\r\n        }\r\n    }, [list])\r\n\r\n    function handleTermDelete(idx) {\r\n        const updatedList = { ...list }\r\n        updatedList.content.splice(idx, 1);\r\n        setList(updatedList);\r\n        setListContextValue(updatedList)\r\n        updateList({ _id: updatedList._id, owner: updatedList.owner }, updatedList)\r\n            .then(r => console.log('removed item from list in db'))\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"List\">\r\n                {!list && 'Loading list...'}\r\n\r\n                {list &&\r\n                    <>\r\n                        <h1 className=\"List__name\">{list.name} ({list.from} to {list.to})</h1>\r\n                        <Link className=\"Link-button\" to={`${location.pathname}/review`}>Review!</Link>\r\n                        <div className=\"List__content\">\r\n\r\n                            <div className=\"List__content--terms\">\r\n                                <div className=\"List__content--header\">\r\n                                    Terms\r\n                                </div>\r\n                                <div className=\"Terms__header\">\r\n                                    <div className=\"Terms__header--index\">#</div>\r\n                                    <div className=\"Terms__header--from\">From</div>\r\n                                    <div className=\"Terms__header--to\">To</div>\r\n                                </div>\r\n                                <ul>\r\n                                    {terms}\r\n                                </ul>\r\n                            </div>\r\n                            <div className=\"List__content--sessions\">\r\n                                { listContextValue && listContextValue.sessions && listContextValue.sessions.length > 0 \r\n                                    ?\r\n                                     <ListSessions sessions={(listContextValue && listContextValue.sessions) ? listContextValue.sessions : null}/>\r\n                                    : <div>No sessions recorded for this list</div>\r\n                                }\r\n                            </div>\r\n\r\n                        </div>\r\n\r\n                    </>\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n})\r\n\r\nexport default List","/* any reusable function that interacts with the backend gets stored here */\r\n\r\nimport axios from 'axios';\r\n\r\n/* \r\n    pings backend /db/u/:username, which returns a User instance in json format\r\n    might be better to just separate this into getUser and getPopulatedUser like I originally implemented\r\n */\r\nexport const getUserFromDB = async (username, args) => {\r\n        // populate needs to be a single space-separated string, e.g. 'following followed'\r\n        // if nested population needs to be done, this method won't work. solve that dilemma if it ever becomes relevant\r\n        return await axios.get(`/db/u/${username}${args.populate ? `?populate=${args.populate}` : ''}`)\r\n            .then(res => res.data)\r\n            .catch(err => { throw new Error('Error getting user from database') })\r\n}\r\n\r\n/* \r\n@todo: replace getUserFromDB 'args' with a query object, and handle query types from backend instead\r\n*/","import React, { useState, useEffect } from 'react';\r\nimport { getUserFromDB } from '../helpers/backend.api';\r\nimport { useRouteProps } from '../hooks/routerHooks';\r\n\r\nconst User = (props) => {\r\n    const { params } = useRouteProps();\r\n    const username = params.username;\r\n    const [user, setUser] = useState(null);\r\n\r\n    useEffect(() => {\r\n        getUserFromDB(username, { populate: 'lists'}).then(res => {\r\n            setUser(res)\r\n            console.log(res);\r\n            // console.log(res.lists)\r\n        })\r\n\r\n    }, [username])\r\n\r\n    return (\r\n        \r\n        <div className=\"User\">\r\n            <h1>User page for /u/<strong>{username}</strong></h1>\r\n            <div className=\"User-info\">\r\n                { user && JSON.stringify(user) }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default User;","import React from \"react\";\r\nimport { useRouteProps } from '../../hooks/routerHooks';\r\n// import { useLogState } from \"../../hooks/state\";\r\nimport './css/Sets.css';\r\n\r\nconst Sets = (props) => {\r\n    // const { params } = useRouteProps();\r\n \r\n    return (\r\n        <div className=\"Sets PageComponent\">\r\n            <div className=\"Sets__header PageHeader\">Sets overview</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sets","import React, { memo, useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './css/Lists.css'\r\nimport { useRouteProps } from '../../hooks/routerHooks';\r\nimport { getListsByUser } from '../../helpers/db.api';\r\nimport { useLogState } from '../../hooks/state';\r\n\r\nconst Lists = memo((props) => {\r\n    const { params, location } = useRouteProps();\r\n    const [lists, setLists] = useState(null);\r\n    const [filter, setFilter] = useState('');\r\n    const [elements, setElements] = useState(null);\r\n\r\n    useLogState('location', location)\r\n\r\n    useEffect(() => {  // get lists from db on component mount, build JSX\r\n        getListsByUser(params.username)\r\n            .then(r => {\r\n                setLists(r);\r\n                setElements(makeListsEl(r, filter))\r\n            })\r\n            .catch(e => e)\r\n    }, [])\r\n\r\n    const makeListsEl = (lists, filter) => {\r\n        return lists\r\n            .map((l, idx) => {\r\n                let condition = (filter && filter.length > 0 && (l.name).toLowerCase().includes(filter.toLowerCase()))\r\n                if (condition || filter.length === 0 || filter === '') {\r\n                    return (\r\n                        <div key={`link-list-${idx}`} className=\"Link-div\">\r\n                            <div className=\"Link-div__link\">\r\n                                <Link className=\"Lists-link\" to={`/u/${params.username}/list/${l._id}`}>{l.name}</Link>\r\n                            </div>\r\n                            <div className=\"Lists__list--languages\"><span>{l.from}</span><span>{l.to}</span></div>\r\n                        </div>\r\n                    )\r\n                }\r\n            })\r\n            .filter(el => el !== undefined)\r\n    }\r\n    const handleFilterChange = (e) => {\r\n        let val = e.currentTarget.value\r\n        setFilter(val)\r\n        setElements(makeListsEl(lists, val))  \r\n            /*  @todo:  currently this is rebuilding the whole lists element\r\n                        instead, have the initial setElements call (on mount) return an object with a filterable property, \r\n                        to prevent rebuilding list every time */\r\n    }\r\n\r\n    return (\r\n        <div className=\"ListsByUser\">\r\n            <h1 className=\"PageHead\">\r\n                Lists by u/{params.username}\r\n            </h1>\r\n            <Link className=\"Link-button\" to={`${location.pathname}/new`}>New</Link>\r\n\r\n            { !lists &&\r\n                <div>Loading lists...</div>\r\n            }\r\n\r\n            { lists &&\r\n                <div className=\"Lists__filter\">\r\n\r\n                    <span id=\"Lists__filter--value\">\r\n                        {filter ? `Filtering by '${filter}'` : `Showing all lists`}\r\n                    </span>\r\n                    <input\r\n                        autoFocus\r\n                        onChange={handleFilterChange}\r\n                        placeholder=\"filter lists by name\"\r\n                        id=\"Lists__filter--filter\"\r\n                        type=\"text\"\r\n                        name=\"filter\"\r\n                        value={filter}\r\n                    />\r\n\r\n                </div>\r\n            }\r\n\r\n            { lists &&\r\n                <div className=\"Lists__wrapper\">\r\n                    {elements}\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default Lists;\r\n\r\n// @ TODO | memoize lists so I don't have to call DB every single time","import React, { memo } from 'react';\r\n\r\nimport '../css/form.css';\r\n\r\nimport './css/NewList.css'\r\n\r\nconst NewListTerm = memo(({ index, formOutput, setFormOutput }) => {\r\n    const handleTermBlur = (e, idx) => {\r\n        e.preventDefault();\r\n        idx -= 1\r\n\r\n        let copy = { ...formOutput }\r\n        // check if term exists\r\n        if (!copy.content[idx] && e.target.value) {\r\n            copy.content[idx] = { to: \"\", from: \"\" };\r\n        }\r\n        if (e.target.value && e.target.value !== copy.content[idx][e.target.name]) {\r\n            copy.content[idx][e.target.name] = e.target.value\r\n            setFormOutput({ ...formOutput, content: copy.content })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"Term-fromto\">\r\n            <input onBlur={(e) => handleTermBlur(e, index)} type=\"text\" name=\"from\" />\r\n            <input onBlur={(e) => handleTermBlur(e, index)} type=\"text\" name=\"to\" />\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default NewListTerm;\r\n\r\n/*\r\nFuture:\r\n- might need multiple 'to' fields, which should be indicated by user through UI.\r\n\r\n*/","import React, { memo } from 'react'\r\nimport './css/LanguageInput.css'\r\n\r\nconst LanguageInput = memo(({ formOutput, setFormOutput }) => {\r\n    // const languages = ['English', 'Japanese', 'Dutch', 'German', 'Italian', 'Spanish'];  // @TODO: part of autocomplete feature\r\n\r\n    const handleBlur = e => {\r\n        e.preventDefault();\r\n        const t = e.currentTarget;\r\n\r\n        if (t.value) {\r\n            if (t.value && formOutput.languages[t.name] !== t.value) {\r\n                setFormOutput({ ...formOutput, languages: { ...formOutput.languages, [t.name]: t.value } })\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"LanguageInput__wrapper\">\r\n            <div className=\"LanguageInput__header\">Languages</div>\r\n            <div className=\"LanguageInput\">\r\n                <div className=\"LanguageInput__side\">\r\n                    <label htmlFor=\"from\">Main</label>\r\n                    <input onBlur={handleBlur} type=\"text\" name=\"from\" />\r\n                </div>\r\n                <div className=\"LanguageInput__side\">\r\n                    <label htmlFor=\"to\">Secondary</label>\r\n                    <input onBlur={handleBlur} type=\"text\" name=\"to\" />\r\n                </div>\r\n            </div>\r\n\r\n\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default LanguageInput;","import React, { useState, useEffect, memo } from 'react';\r\nimport { useRouteProps } from '../../hooks/routerHooks';\r\nimport axios from 'axios';\r\n\r\nimport './css/NewList.css';\r\nimport NewListTerm from './NewListTerm';\r\nimport LanguageInput from './LanguageInput';\r\n\r\nconst NewList = memo((props) => {\r\n    const { params } = useRouteProps();\r\n    const [numTerms, setNumTerms] = useState(10)  // @TODO: allow user to set default number of terms when making new list\r\n    const termEls = [];\r\n\r\n    // const [newList, setNewList] = useState({\r\n    //     owner: params.username,  // set to username from context or from pathname\r\n    //     name: null,\r\n    //     to: [],\r\n    //     from: null,\r\n    //     content: [],\r\n    // });\r\n\r\n    const [formOutput, setFormOutput] = useState(() => (\r\n        {\r\n            listName: \"\",\r\n            languages: { from: \"\", to: \"\" },\r\n            content: new Array(numTerms)\r\n        })\r\n    )\r\n\r\n    useEffect(() => {\r\n        if (formOutput.content.filter(i => i !== null).length > 0 || formOutput.languages.from !== \"\" || formOutput.languages.to !== \"\") {\r\n            console.log(formOutput)\r\n        }\r\n    }, [formOutput])\r\n\r\n    for (let i = 0; i < numTerms; i++) {\r\n        termEls.push(\r\n            <div key={`NewList-term-${i}`} className=\"NewList__Terms-term\">\r\n                <div className=\"NewList__Terms-index\">{i + 1}</div>\r\n                <NewListTerm index={i + 1} formOutput={formOutput} setFormOutput={setFormOutput} />\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const handleAddRows = e => {\r\n        e.preventDefault();\r\n        setNumTerms(numTerms + 10);\r\n    }\r\n\r\n\r\n    const handleBlur = e => {\r\n        e.preventDefault();\r\n        const t = e.currentTarget;\r\n        console.log(t);\r\n        if (t.value && t.value !== formOutput.listName) {\r\n            console.log(t.value)\r\n            setFormOutput({ ...formOutput, listName: t.value })\r\n        }\r\n    }\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        axios.post('/db/list', {\r\n            newList: {\r\n                owner: params.username, // @TODO: replace\r\n                name: formOutput.listName,\r\n                from: formOutput.languages.from,\r\n                to: formOutput.languages.to,  // @TODO: make array input, also needs handleBlur() to be modified\r\n                content: formOutput.content.filter(i => i !== null)\r\n            }\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"NewList\">\r\n            <header>\r\n                <h1 className=\"PageHeader\">\r\n                    New List\r\n                </h1>\r\n            </header>\r\n\r\n            <form className=\"Form\">\r\n                {/* Language input */}\r\n                <LanguageInput formOutput={formOutput} setFormOutput={setFormOutput} />\r\n\r\n                {/* List name input */}\r\n                <div className=\"NewList__name\">\r\n                    <label htmlFor=\"name\">List name</label>\r\n                    <input onBlur={handleBlur} type=\"text\" name=\"name\" id=\"\" />\r\n                </div>\r\n                \r\n                <div className=\"NewList__Terms\">\r\n                    {termEls.length > 0 && termEls}\r\n                </div>\r\n                <input onClick={handleSubmit} type=\"button\" value=\"Create list\" />\r\n            </form>\r\n            <input onClick={handleAddRows} type=\"button\" value=\"Add rows\" />\r\n        </div >\r\n    )\r\n})\r\n\r\nexport default NewList\r\n","import React, { memo } from 'react';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\n\nimport './css/App.css';\n\nimport Header from './Header';\nimport Review from './review/Review';\nimport List from './list/List';\nimport User from './User';\nimport Sets from './sets/Sets';\nimport Lists from './lists/Lists';\nimport NewList from './newlist/NewList';\n\nimport LoginProvider from '../context/LoginContext';\nimport { ListProvider } from '../context/ListContext';\n\nconst App = memo(() => {\n    return (\n        <>\n            <LoginProvider>\n                <Router>\n                    <Header />\n                    <div className=\"App__wrapper\">\n                        <div className=\"App\">\n                            <ListProvider>\n                                <Routes>\n                                    {/* home route */}\n                                    <Route path=\"/\" element={<div>Home</div>} />\n\n                                    {/* user routes */}\n                                    <Route path=\"/u/:username\">\n                                        <Route path=\"/\" element={<User />} />\n                                        <Route path=\"/sets\" element={<Sets />} />\n                                        <Route path=\"/lists\">\n                                            <Route path=\"/\" element={<Lists />} />\n                                            <Route path=\"/new\" element={<NewList />} />\n                                        </Route>\n\n                                        <Route path=\"/list\">\n\n                                            <Route path=\"/:id\">\n\n                                                <Route path=\"/review\" element={<Review />} />\n                                                <Route path=\"/\" element={<List />} />\n\n                                            </Route>\n                                        </Route>\n\n\n                                    </Route>\n                                    {/* catchall 404 route */}\n                                    <Route path=\"*\" element={<div>404</div>} />\n                                </Routes>\n                            </ListProvider>\n                        </div>\n                    </div>\n\n                </Router>\n            </LoginProvider>\n\n        </>\n    )\n})\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css'\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}