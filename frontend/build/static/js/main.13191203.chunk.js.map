{"version":3,"sources":["hooks/state.js","helpers/localStorageHelpers.js","context/LoginContext.js","hooks/routerHooks.js","components/login/LoginForm.jsx","components/login/Login.jsx","wrappers/Private.jsx","wrappers/PrivateRoute.jsx","components/layout/Header.jsx","components/layout/Footer.jsx","helpers/reviewHelpers.js","context/ReviewContext.js","hooks/useRequest.js","helpers/apiHandlers/apiHandlers.js","helpers/apiHandlers/listHandlers.js","helpers/count.js","helpers/list.api.js","helpers/srs/saturation.js","components/review/ReviewCard.jsx","components/review/PreReview.jsx","components/review/PostReview.jsx","components/review/Timer.jsx","components/review/ReviewInfo.jsx","components/review/Review.jsx","context/ListContext.js","helpers/time.js","components/list/TermHistory.jsx","components/list/SaturationIcon.jsx","components/list/TermModal.jsx","components/list/ListTerm.jsx","components/list/SetPicker.jsx","components/list/SaturationFilter.jsx","components/list/List.jsx","components/user/User.jsx","components/lists/ListsItem.jsx","components/lists/Lists.jsx","components/newlist/NewListTerm.jsx","components/newlist/NewList.jsx","components/sets/Sets.jsx","helpers/apiHandlers/setHandlers.js","components/sets/Picker.jsx","components/sets/NewSet.jsx","components/Test.js","components/Home.jsx","components/register/Register.jsx","components/App.jsx","index.js"],"names":["useLogState","name","state","setState","useEffect","console","log","handleFormBlur","e","t","currentTarget","value","storeUser","username","action","localStorage","setItem","getItem","removeItem","LoginContext","createContext","LoginProvider","memo","props","useState","currentUser","setCurrentUser","Provider","login","user","logout","children","useRouteProps","location","useLocation","navigate","useNavigate","params","useParams","LoginForm","authError","setUser","showPass","setShowPass","message","handleLogin","className","response","status","htmlFor","onBlur","required","autoComplete","type","style","color","backgroundColor","onClick","to","Login","useContext","setErr","setMessage","loginFormProps","length","password","axios","post","then","r","data","catch","Private","Component","component","setComponent","isLoggedIn","setIsLoggedIn","key","Date","PrivateRoute","rest","element","Header","isActive","pathname","HeaderLoggedIn","id","HeaderLoggedOut","Footer","href","src","process","width","height","alt","makeReviewList","terms","n","shuffled","makeList","j","copy","indices","i","Math","floor","random","push","ReviewContext","ReviewProvider","settings","direction","started","reviewContext","setReviewContext","useRequest","handleResponse","handleError","mounted","useRef","request","setRequest","setResponse","error","setError","loading","setLoading","source","CancelToken","executeRequest","res","err","current","cancel","next","authorizeUser","default","withCredentials","getList","query","get","putList","body","put","getLists","handleGetList","handlePutList","countDict","array","reduce","acc","cur","colorMap","null","0","1","2","3","4","colorBySaturation","saturation","dayjs","extend","relativeTime","duration","saturate","term","filteredHistory","history","filter","sess","termSessionsByDirection","reverse","slice","currentSession","previousSession","secondToLastSession","fail","content","previousFail","secondTolastFail","saturateSeededTerm","latestSession","sessionSet","Set","passFailCount","has","saturateUnseededTerm","ReviewCard","setBackWasShown","side","setSide","flipping","setFlipping","fade","setFade","timeouts","handleArrowUpDownKeyup","includes","code","flip","setTimeout","window","addEventListener","removeEventListener","timeout","clearTimeout","PreReview","buttons","setButtons","directionButtons","setDirectionButtons","map","num","SettingsButton","uuidv4","handleSettingsChange","d","target","selected","String","PostReview","sessionStart","sessionEnd","list","formatDate","date","format","owner","Timer","start","timer","setTimer","elapsed","setElapsed","timerInterval","setInterval","round","now","clearInterval","fromNow","title","ReviewInfo","numTerms","progress","Review","end","session","setSession","setList","useReducer","payload","newIndex","newTerms","currentTerm","shift","splice","futureTerms","reduceFutureTerms","currentCard","setCurrentCard","setProgress","backWasShown","failRef","passRef","setGetRequest","setPutRequest","handleLeftRightArrowKeyDown","ref","focus","click","blur","handlePassFailClick","passfail","preventDefault","idx","findIndex","from","histLen","lastHist","newList","updateSessionHistory","_id","Number","sessionLength","termsCompleted","sessions","termsReviewed","lastReviewed","newTerm","endSession","disabled","ListContext","ListProvider","listContextValue","setListContextValue","timeSince","advancedFormat","TermHistory","expand","setExpand","histEl","el","index","display","margin","borderRadius","makeHistoryElement","SaturationIcon","classes","saturationIconStyle","padding","boxShadow","border","makeTooltip","TermModal","handleConfirmClick","setOpen","handleTermEdit","confirmingDelete","setConfirmingDelete","handleKeydown","inputStyle","tabIndex","forwards","backwards","ListTerm","handleTermDelete","termFromProps","setTerm","open","getAttribute","newListContent","SetPicker","SaturationFilter","setFilter","saturationFilter","setSaturationFilter","setFocus","icons","Object","keys","level","Fragment","List","setTerms","getResponse","delete","deleteResponse","setDeleteRequest","updatedList","handleDelete","termProps","JSON","stringify","gridTemplateColumns","sets","User","ListsItem","borderColor","day","colorByLastReviewDate","timeSinceLastReview","Lists","listsElement","setListsElement","sortBy","setSortBy","lists","l","created","makeListsElement","autoFocus","onChange","val","placeholder","toLowerCase","sort","first","second","NewListTerm","formOutput","setFormOutput","handleTermBlur","NewList","setNumTerms","Array","termInputs","setTermInputs","postResponse","setPostRequest","termElements","makeTermInputElements","handleBlur","Sets","useMemo","Picker","chosen","getListsResponse","setGetListsRequest","options","input","item","PickerElement","handleClick","isFocused","setIsFocused","picked","setPicked","persist","innerText","onFocus","defaultValue","NewSet","newSet","setNewSet","pickedLists","setPickedLists","spellCheck","contentEditable","cols","rows","suppressContentEditableWarning","Test","yesterday","Home","Register","newUser","setNewUser","handleSubmit","postUser","App","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.13191203.chunk.js","sourcesContent":["import { useEffect } from 'react'\r\n\r\n/**\r\n     * useEffect hook to log whenever a piece of state (or its initializer) changes\r\n     * @param   state       expected to be the return values of a useState call, but can be any variable that needs to be logged on change\r\n     * @param   setState    ^\r\n     * @return  undefined\r\n     * \r\n     * @todo    change args to take multiple pieces of state, each with their own dependency array\r\n     */\r\nexport const useLogState = (name, state, setState) => {\r\n    useEffect(() => {\r\n        state && console.log(`${name} changed:`, state);\r\n    }, [name, state, setState])\r\n}\r\n\r\n/**\r\n * Simple form input blur handler. Only works on top-level keys, don't use for nested form state.\r\n * @param {React.FocusEvent} e event object\r\n * @param {*} state useState state\r\n * @param {React.Dispatch<React.SetStateAction>} setState useState setter\r\n */\r\nexport const handleFormBlur = (e, state, setState) => {\r\n    let t = e.currentTarget;\r\n    \r\n    if ( !(!state[t.name] && !t.value) && (!state[t.name] || (state[t.name] && state[t.name] !== t.value))) {  // check if value exists and differs from current value\r\n        setState({...state, [t.name]: t.value})\r\n    }\r\n}\r\n\r\n/* to check whether key exists in state:\r\n        option 1: \r\n            if (!Object.keys(state).includes(t.name))\r\n            works if state is null or undefined\r\n        option 2:\r\n            if (!state[t.name])\r\n            works only is state is already an object (so for this, need to initialize useState with empty object, and not null) */","export const storeUser = (username, action) => {\r\n    switch (action) {\r\n        case 'set':\r\n            localStorage.setItem(\"username\", username);\r\n            break;\r\n        case 'get':\r\n            return localStorage.getItem('username');\r\n        case 'remove':\r\n            localStorage.removeItem(\"username\");\r\n            break;\r\n        default:\r\n            return;\r\n    }\r\n}","import React, {memo, useState, useEffect, createContext } from 'react';\r\nimport { useLogState } from '../hooks/state';\r\nimport { storeUser } from '../helpers/localStorageHelpers';\r\nexport const LoginContext = createContext(null);\r\n\r\nexport const LoginProvider = memo((props) => {\r\n    const [currentUser, setCurrentUser] = useState(storeUser(null, 'get'));\r\n\r\n    const login = user => {\r\n        setCurrentUser(user);\r\n        storeUser(user, 'set')\r\n    }\r\n\r\n    const logout = () => {\r\n        setCurrentUser(null);\r\n        storeUser(null, 'remove')\r\n    }\r\n\r\n    useLogState('LoginContext: currentUser', currentUser)\r\n\r\n    useEffect(() => {\r\n        // verify localstorage user against db on LoginContext mount\r\n    }, [])\r\n\r\n    return (\r\n        <LoginContext.Provider value={{...{currentUser, login, logout} }}>\r\n            {props.children}\r\n        </LoginContext.Provider>\r\n    )\r\n})","import { useNavigate, useLocation, useParams }  from 'react-router-dom';\r\n\r\n/**\r\n * Hook that returns location(), useNavigate() and useParams() as a single object\r\n */\r\nexport const useRouteProps = () => {\r\n    return ({\r\n        location: useLocation(),\r\n        navigate: useNavigate(),\r\n        params: useParams(),\r\n    })\r\n}","import React from \"react\";\r\nimport { Link } from 'react-router-dom';\r\nimport { AiFillEye, AiFillEyeInvisible } from 'react-icons/ai';\r\nimport './style/Login.scss';\r\n\r\nconst LoginForm = ({ authError, user, setUser, showPass, setShowPass, message, handleFormBlur, handleLogin }) => {\r\n    \r\n    return (\r\n        <div className=\"PageWrapper\">\r\n            <div className=\"Login\">\r\n\r\n                <header className=\"Login__header\">\r\n                    You need to be logged in to view this page. Please log in or register.\r\n                </header>\r\n\r\n                {message &&\r\n                    <div className=\"Login__message\">\r\n                        {message}\r\n                    </div>\r\n                }\r\n\r\n                {authError?.response?.status === 401 &&\r\n                    <div className=\"Login__error\">\r\n                        Incorrect credentials. Try again.\r\n                    </div>\r\n                }\r\n\r\n                <form className=\"Login__form\">\r\n\r\n                    <header className=\"PageHeader\">\r\n                        Log in\r\n                    </header>\r\n\r\n                    <div className=\"Login__form--field\">\r\n\r\n                        <label\r\n                            className=\"Login__input--label\"\r\n                            htmlFor=\"username\"\r\n                        >\r\n                            Username\r\n                        </label>\r\n\r\n                        <div className=\"Login__form--field--content\">\r\n                            <input\r\n                                className=\"Login__input--username\"\r\n                                onBlur={e => handleFormBlur(e, user, setUser)}\r\n                                required\r\n                                autoComplete=\"username\"\r\n                                type=\"text\"\r\n                                name=\"username\"\r\n                            />\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                    <div className=\"Login__form--field\">\r\n                        <label\r\n                            className=\"Login__input--label\"\r\n                            htmlFor=\"password\"\r\n                        >\r\n                            Password\r\n                        </label>\r\n                        <div className=\"Login__form--field--content\">\r\n                            <input\r\n                                className=\"Login__input--password\"\r\n                                required\r\n                                onBlur={e => handleFormBlur(e, user, setUser)}\r\n                                autoComplete=\"password\"\r\n                                type={`${showPass ? 'text' : 'password'}`}\r\n                                name=\"password\"\r\n                            />\r\n                            <div\r\n                                className=\"Login__showPassword\"\r\n                                style={{\r\n                                    color: showPass ? 'white' : '#777',\r\n                                    backgroundColor: showPass ? '#333' : '#333',\r\n                                }}\r\n                                onClick={() => setShowPass(showPass => !showPass)}\r\n                                type=\"button\"\r\n                                value={showPass ? 'hide' : 'show'}\r\n                            >\r\n                                {showPass ? <AiFillEye /> : <AiFillEyeInvisible />}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"Login__buttons\">\r\n                        <input\r\n                            className=\"Login__button\"\r\n                            onClick={handleLogin}\r\n                            type=\"button\"\r\n                            value=\"Log in\"\r\n                        />\r\n                        <Link\r\n                            className=\"Login__register\"\r\n                            to=\"/register\"\r\n                        >\r\n                            Register\r\n                        </Link>\r\n                    </div>\r\n\r\n                </form>\r\n\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LoginForm","import React, { useState, useContext } from \"react\";\r\nimport axios from 'axios';\r\nimport { LoginContext } from 'context/LoginContext';\r\nimport { useRouteProps } from 'hooks/routerHooks';\r\nimport { handleFormBlur } from 'hooks/state';\r\nimport LoginForm from './LoginForm';\r\n\r\nconst Login = () => {\r\n    const { login } = useContext(LoginContext),\r\n        { navigate } = useRouteProps(),\r\n        [user, setUser] = useState({}),\r\n        [showPass, setShowPass] = useState(false),\r\n        [authError, setErr] = useState(false),\r\n        [message, setMessage] = useState(null);\r\n\r\n    /**\r\n     * Handle pressing of the 'log in' button: log user in and redirect to their profile page, or flash a relevant error.\r\n     * @param {React.SyntheticEvent} e \r\n     */\r\n    function handleLogin(e) {\r\n        if (user.username?.length > 0 && user.password?.length > 0) {\r\n            axios\r\n                .post('/db/user', user)\r\n                .then(r => {\r\n                    login(r.data.username);\r\n                    navigate(`/u/${r.data.username}`);\r\n                })\r\n                .catch(e => {\r\n                    setErr(e)\r\n                })\r\n        } else {\r\n            setMessage('Cannot log in without both username and password')\r\n        }\r\n    }\r\n\r\n    const loginFormProps = { authError, user, setUser, showPass, setShowPass, message, handleFormBlur, handleLogin };\r\n\r\n    return (\r\n        <LoginForm { ...loginFormProps }/>\r\n    )\r\n}\r\n\r\nexport default Login","import React, { useContext, useState, useEffect } from \"react\";\r\nimport Login from '../components/login/Login';\r\nimport { LoginContext } from '../context/LoginContext';\r\nimport { useRouteProps } from '../hooks/routerHooks';\r\n\r\n/**\r\n * Wrapper to hide components from unauthorized users.\r\n * @note   actual authorization is handled in LoginContext, useRequest, and on the backend\r\n * @todo   currently only checks if there is _any_ user, but we also want to check if the logged in user is the _right_ user\r\n * @usage  used by PrivateRoute component\r\n * @param {{component: React.NamedExoticComponent, rest: any}} props: props.component is a React/JSX component\r\n * @return {React.NamedExoticComponent} React component that displays login form or desired component based on auth state\r\n */\r\nconst Private = ({ component: Component, ...rest }) => {\r\n    const [component, setComponent] = useState(null);\r\n    const { currentUser } = useContext(LoginContext);\r\n    const { params, location } = useRouteProps();\r\n    const [isLoggedIn, setIsLoggedIn] = useState(currentUser ? true : false)\r\n\r\n    useEffect(() => {\r\n        setComponent(<Component key={new Date()} />)\r\n    }, [Component, params, location, currentUser])\r\n\r\n    useEffect(() => {\r\n            setIsLoggedIn(currentUser ? true : false)\r\n    }, [currentUser])\r\n\r\n    return (\r\n        <>\r\n            { isLoggedIn\r\n                ?\r\n                <>\r\n                    { component && component}\r\n                </>\r\n                :\r\n                <Login />\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Private","import React from \"react\";\r\nimport { Route } from 'react-router-dom';\r\nimport Private from './Private';\r\n\r\n\r\nconst PrivateRoute = ({component: Component, children, ...rest}) => {\r\n\r\n    if (children) {\r\n        console.log(children);\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <Route {...rest} element={<Private component={Component}/>}/>\r\n    )\r\n}\r\n\r\nexport default PrivateRoute","import React, { useContext, memo } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { LoginContext } from '../../context/LoginContext';\r\nimport { useRouteProps } from '../../hooks/routerHooks';\r\nimport './style/Header.scss';\r\n\r\nconst Header = () => {\r\n    const { currentUser } = useContext(LoginContext);\r\n\r\n    return (\r\n        <div className=\"Header\">\r\n            { currentUser ? <HeaderLoggedIn /> : <HeaderLoggedOut />}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;\r\n\r\nfunction isActive(to, location) {\r\n    if (to === location.pathname) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nconst HeaderLoggedIn = () => {\r\n    const { currentUser, logout } = useContext(LoginContext);\r\n    const { location } = useRouteProps();\r\n\r\n    return (\r\n        <nav>\r\n            <span id=\"Logo\">Mana</span>\r\n\r\n            <NavLink\r\n                className={`NavLink ${isActive(`/`, location) ? 'NavLink__active' : ''}`}\r\n                to=\"/\"\r\n            >\r\n                Home\r\n            </NavLink>\r\n\r\n            <NavLink\r\n                className={`NavLink ${isActive(`/u/${currentUser}`, location) ? 'NavLink__active' : ''}`}\r\n                to={`/u/${currentUser}`}\r\n            >\r\n                My Profile\r\n            </NavLink>\r\n\r\n            <NavLink\r\n                className={`NavLink ${isActive(`/u/${currentUser}/lists`, location) ? 'NavLink__active' : ''}`}\r\n                to={`/u/${currentUser}/lists`}\r\n            >\r\n                My Lists\r\n            </NavLink>\r\n\r\n            <NavLink\r\n                className={`NavLink ${isActive(`/u/${currentUser}/sets`, location) ? 'NavLink__active' : ''}`}\r\n                to={`/u/${currentUser}/sets`}\r\n            >\r\n                My Sets\r\n            </NavLink>\r\n\r\n            <button\r\n                className=\"Header__logout\"\r\n                onClick={() => logout()}\r\n            >\r\n                log out\r\n            </button>\r\n\r\n        </nav>\r\n    )\r\n}\r\n\r\nconst HeaderLoggedOut = () => {\r\n    const { location } = useRouteProps();\r\n\r\n    return (\r\n        <nav>\r\n            <span id=\"Logo\">Mana</span>\r\n            <NavLink\r\n                className={`NavLink ${isActive(`/`, location) ? 'NavLink__active' : ''}`}\r\n                to=\"/\"\r\n            >\r\n                Home\r\n        </NavLink>\r\n            <NavLink\r\n                className={`NavLink ${isActive(`/login`, location) ? 'NavLink__active' : ''}`}\r\n                to={`/login`}\r\n            >\r\n                Log in\r\n        </NavLink>\r\n            <NavLink\r\n                className={`NavLink ${isActive(`/register`, location) ? 'NavLink__active' : ''}`}\r\n                to={`/register`}\r\n            >\r\n                Register\r\n        </NavLink>\r\n        </nav>\r\n\r\n    )\r\n}\r\n\r\n\r\n/*\r\n    @todo: conditionally render based on if currentUser exists\r\n*/","import React from \"react\";\r\nimport './style/Footer.scss';\r\n\r\nconst Footer = (props) => {\r\n\r\n    return (\r\n        <div className=\"Footer\">\r\n            <div className=\"Footer__item\"><a href=\"https://github.com/Seerden/mana\">\r\n            <img\r\n            src={`${process.env.PUBLIC_URL}/assets/github.png`}\r\n            width=\"16\"\r\n            height=\"16\"\r\n            alt=\"GitHub Logo\"\r\n            />\r\n            </a></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer","/**\r\n * Build a Knuth shuffled list n times and concatenate\r\n * @param {Array} terms input array\r\n * @param {Number} n integer number of shuffled copies of the list to concatenate\r\n * @return {Array}\r\n */\r\nexport function makeReviewList(terms, n) {\r\n    let shuffled = [];\r\n\r\n    function makeList() {\r\n        const copy = [...terms] // swap is done in-place, so keeping a copy is simply for convenience\r\n        const indices = []\r\n\r\n        let len = copy.length\r\n        let i = len - 1\r\n        let j\r\n        while (i > 0) {  // take item at i-th index and swap it in-place with a random item in [0, i] (can 'swap' with itself), then decrement i\r\n            j = Math.floor((i + 1) * Math.random());\r\n            [copy[i], copy[j]] = [copy[j], copy[i]]\r\n            indices.push(j)\r\n            i -= 1\r\n        }\r\n        return copy\r\n    }\r\n\r\n    let i = 0\r\n    while (i < n) {\r\n        shuffled = [...shuffled, ...makeList()]\r\n        i++\r\n    }\r\n\r\n    return shuffled\r\n}","import React, { createContext, useState, memo } from \"react\";\r\n\r\nexport const ReviewContext = createContext(null);\r\n\r\nexport const ReviewProvider = memo(props => {\r\n    const [reviewContext, setReviewContext] = useState({\r\n        settings: {\r\n            direction: \"forwards\",\r\n            n: \"2\",\r\n            started: false,\r\n        }\r\n    });\r\n\r\n    return (\r\n        <ReviewContext.Provider value={{...{reviewContext, setReviewContext}}}>\r\n            { props.children }\r\n        </ReviewContext.Provider>\r\n    )\r\n})\r\n\r\n","import axios from 'axios';\r\nimport { LoginContext } from '../context/LoginContext';\r\nimport { useContext, useState, useEffect, useRef } from 'react';\r\nimport { useRouteProps } from './routerHooks';\r\n\r\n/**\r\n * Request hook that handles a request and logs a user out if the API returns 401 Unauthorized.\r\n * @param {Function} request axios request initialized wrapper inside an anonymous function, e.g. () => axios.get('/home')\r\n * @param {Function} handleResponse function to handle successful response, will be called as request().then(r => handleResponse(r))\r\n * @param {Function} handleError function to handle error, form similar to handleResponse\r\n * @returns {{response: *, error: Boolean, loading: Boolean, setRequest: Function}} [response, error] are returned states set by the handleResponse/handleError functions. loading is the loading state (true while request is being made), and makeRequest can be called to trigger a request\r\n * @param {Function} setRequest request is expected to wrapper in a function, so usage should be like setRequest(() => axios.get('/'))\r\n * \r\n */\r\nexport const useRequest = ({ handleResponse, handleError }) => {\r\n    const\r\n        { currentUser, logout } = useContext(LoginContext),\r\n        mounted = useRef(false),\r\n        { params } = useRouteProps(),\r\n        [request, setRequest] = useState(null),\r\n        [response, setResponse] = useState(null),\r\n        [error, setError] = useState(null),\r\n        [loading, setLoading] = useState(false),\r\n        source = axios.CancelToken.source();\r\n\r\n    function authorizeUser(username, setError, next) {\r\n        if (username && (currentUser === username)) {\r\n            setError(null); // this fixes error persisting on route change from unauthorized -> authorized  @IMPORANT not needed if I rerender component fully on params change\r\n            next();\r\n\r\n        } else {\r\n            setError('Route not accessible by current user.');\r\n            setLoading(false);\r\n        }\r\n    }\r\n\r\n    function executeRequest() {\r\n        request()\r\n            .then(res => {\r\n                handleResponse(res, setResponse);\r\n            })\r\n            .catch(err => {\r\n                if (err && err.response && err.response.status === 401) {\r\n                    logout();\r\n                }\r\n                handleError(err, setError);\r\n            });\r\n\r\n        setLoading(false);\r\n        setRequest(null); //  unsure if necessary\r\n    }\r\n\r\n    useEffect(() => {  // cleanup function. might be obsolete. look into it\r\n        mounted.current = true\r\n\r\n        if (params.username && params.username === currentUser) {\r\n            setError(null)\r\n            setRequest(null)\r\n        }\r\n\r\n        return () => {\r\n            setError(null);\r\n            setResponse(null);\r\n            setLoading(false);\r\n            setRequest(null)\r\n            mounted.current = false\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {return () => source.cancel(\"Component unmounted\")})  // cleanup axios requests on any unmount (note: need to not have deps array)\r\n\r\n    useEffect(() => {  // verify if user should have access to the page, execute request or set error based on result\r\n        if (mounted.current) {\r\n            if (request) {\r\n                setLoading(true);\r\n                authorizeUser(params.username, setError, executeRequest)\r\n            }\r\n        }\r\n\r\n    }, [request, params.username])\r\n\r\n    useEffect(() => {  // if current user changes (e.g. because user was logged out by making unauthorized request), component will unmount, so we need to cancel any active requests\r\n        return () => source.cancel(\"Component was unmounted\")\r\n    }, [currentUser])\r\n\r\n    return { response, error, loading, setRequest }\r\n}","import axios from 'axios';\r\n\r\naxios.default.withCredentials = true;\r\n\r\n// New user registration: unprotected route, can't currently be called using useRequest\r\nexport const postUser = newUser => {\r\n    return axios.post('/db/u/register', {newUser})\r\n        .then(r => r.data)\r\n        .catch(err => err)\r\n}\r\n\r\nexport function handleError (err, setError) { setError(err) };\r\nexport function handleResponse (res, setResponse) { setResponse(res.data) };","import axios from 'axios';\r\nimport { handleResponse, handleError } from './apiHandlers'\r\n\r\n// ----- list-related requests (without response/error handlers) -----\r\nexport const getList = (username, query) => {\r\n    return () => axios.get(`/db/u/${username}/list`, { params: query });\r\n}\r\n\r\nexport const putList = (username, query, body) => {\r\n    return () => axios.put(`/db/u/${username}/list`, { data: { query, body } })\r\n}\r\n\r\nexport const postList = (username, body) => {\r\n    return () => axios.post(`/db/u/${username}/list`, { newList: body })\r\n}\r\n\r\nexport const deleteList = (username, query) => {\r\n    return () => axios.delete(`/db/u/${username}/list`, { params: query })\r\n}\r\n\r\nexport const getLists = (username) => {\r\n    return () => axios.get(`/db/u/${username}/lists`)\r\n}\r\n\r\n// other\r\nexport const handleGetList = () => {\r\n    const request = (username, query) => {axios.get(`/db/u/${username}/list`, { params: query })};\r\n    return { request, handleResponse, handleError }\r\n}\r\n\r\nexport const handlePostList = () => {\r\n    const request = (username, body) => axios.post(`/db/u/${username}list`, { newList: body })\r\n    return { request, handleResponse, handleError }\r\n}\r\n\r\n/**\r\n     * Update local list changes (e.g. term deletions, edits, or updated session/term histories) to the database\r\n     * \r\n     * @param   {object}    query   database query for relevant list instance (combination of _id and owner should suffice)\r\n     * @param   {object}    body    updated list content\r\n     * \r\n     * @current         send entire list object to the backend as 'body',\r\n     *                      backend sets list.content to body.content\r\n     * @future          refine database call:\r\n     *                      - allow user to specify fields that need to be updated\r\n     *                      - implement this field udpating in the database     *      \r\n     */\r\n\r\nexport const handlePutList = () => { return { handleResponse, handleError } }\r\n\r\nexport const handleDeleteList = () => {\r\n    const request = (username, query) => axios.delete(`/db/u/${username}/list`, { params: query });\r\n    return { request, handleResponse, handleError }\r\n}\r\n\r\n/**\r\n * Get all lists by the specific user from the database. Returns all list properties, except the content itself.\r\n * @param {string} username \r\n */\r\nexport const handleGetLists = () => {\r\n    const request = (username) => axios.get(`/db/u/${username}/lists`)\r\n    return { request, handleResponse, handleError }\r\n}\r\n","/**\r\n * Takes an array and returns dictionary of all unique entries and their occurrence rate\r\n * @param {Array} array \r\n * @returns {Object} the keys are the array's unique items, the values are their occurrence rates\r\n */\r\nexport const countDict = array => array.reduce((acc, cur) => {\r\n    acc[cur] = (acc[cur] || 0 ) + 1\r\n    return acc\r\n}, {})","import dayjs from 'dayjs';\r\n\r\nexport const extractSession = (list, i) => {\r\n    let sessionStartDate = dayjs(list.sessions[i].start);\r\n    let sessionEndDate = dayjs(list.sessions[i].end);\r\n\r\n    let session = list.content\r\n        .map(term => {\r\n            if (Date(sessionStartDate) === Date(term.history[i]?.date)) {\r\n                return term.history[i]?.content\r\n            }\r\n\r\n            return null\r\n        })\r\n        .filter(d => d !== null)\r\n\r\n    return ({ start: sessionStartDate, end: sessionEndDate, session: session })\r\n\r\n}\r\n\r\nexport const extractSessionsByDirection = (listObj, direction) => {\r\n    // @note: currently implemented as 'forwards' and 'backwards'\r\n    // leaning to going for 'frontToBack' and 'backToFront' instead\r\n    if (['forwards', 'backwards', 'forward', 'backward'].includes(direction)) {\r\n        return listObj.sessions?.filter(sess => sess.direction === direction);\r\n    } else {\r\n        return;\r\n    }\r\n}\r\n\r\n/**\r\n * Extract all sessions with a given direction from a term's history\r\n * @param {Object} term \r\n * @param {String} direction 'forward(s)' or 'backward(s)'\r\n */\r\nexport const termSessionsByDirection = (term, direction) => {\r\n    return term.history?.filter(sess => sess.direction === direction)\r\n}\r\n\r\nexport const colorMap = {\r\n    null: '#444',\r\n    0: 'orangered',\r\n    1: 'goldenrod',\r\n    2: 'seagreen',\r\n    3: 'deepskyblue',\r\n    4: 'blueviolet',\r\n}\r\n\r\nexport const colorBySaturation = saturation => {\r\n    return colorMap[saturation]\r\n}","import { countDict } from '../count';\r\nimport { termSessionsByDirection } from '../list.api';\r\nimport duration from 'dayjs/plugin/duration.js';\r\nimport dayjs from 'dayjs';\r\nimport relativeTime from 'dayjs/plugin/relativeTime.js';\r\n  dayjs.extend(relativeTime);\r\n  dayjs.extend(duration);\r\n\r\nlet day = 1000*3600*24\r\nconst saturationLevels = [\r\n    {\r\n        level: 0,\r\n        description: 'Weak to no recollection.',\r\n        timescale: day // review within a day\r\n    },\r\n    {\r\n        level: 1,\r\n        description: 'Middling short-term recollection.',\r\n        timescale: 3*day\r\n    },\r\n    {\r\n        level: 2,\r\n        description: 'Good short-term recollection.',\r\n        timescale: 7*day\r\n    },\r\n    {\r\n        level: 3,\r\n        description: 'Working towards long-term recollection',\r\n        timescale: 14*day\r\n    },\r\n    {\r\n        level: 4,\r\n        description: 'Long-term recollection achieved. Low review priority',\r\n        timescale: 30*day\r\n    },\r\n]\r\n\r\n/**\r\n * Assign a new saturation level to the given term: after every session, each reviewed term will have its saturation level determined based on current/recent performance. \r\n * Suggested review frequency is derived from this saturation level, meaning saturation is an integral part of our system.\r\n * @note saturation should be done on a per-term basis, since object structure for review input might not be rigid\r\n * @param {Object} term List model contains .content, which is an array of terms, of which this ('term') is an entry.\r\n */\r\nexport function saturate(term, direction) {\r\n    // filter term's history by direction\r\n    const filteredHistory = termSessionsByDirection(term, direction);\r\n\r\n    if (!filteredHistory || filteredHistory.length < 3) {\r\n        return null;\r\n    }\r\n\r\n    if (filteredHistory.length === 3 || !term.saturation[direction]) { // if reviewed exactly n times, seeding has just ended, so we can saturate based on seeding round\r\n        return saturateUnseededTerm(filteredHistory);\r\n    } else if (filteredHistory.length > 3 || term.saturation[direction]) {\r\n        return saturateSeededTerm(filteredHistory, term.saturation[direction])\r\n    }\r\n}\r\n\r\n/**\r\n * Set saturation of a term that has finished undergoing seeding\r\n * @param {Object} term List model contains .content, which is an array of terms, of which this ('term') is an entry.\r\n */\r\nexport function saturateUnseededTerm(filteredHistory) {\r\n    /*  @note\r\n           initial seeding does not take into consideration:\r\n            - time between sessions. minimum time between sessions will be enforced elsewhere for UX purposes, though\r\n            - performance of first n-1 seeding rounds  */\r\n    const latestSession = filteredHistory?.reverse()[0]?.content; // extract last seeding session content\r\n    const sessionSet = new Set(latestSession);\r\n\r\n    if (!latestSession || (latestSession && !(latestSession.length > 0))) {\r\n        return false;\r\n    }\r\n    // post-seeding saturation is relatively simple: by now, all terms should _definitely_ be in short-term memory, so mistakes are judged harhsly\r\n    // @todo: transform all 'pass' and 'fail' mentions by 1 and 0 respectively\r\n    const passFailCount = countDict(latestSession);\r\n\r\n    if (!sessionSet.has('fail')) { return 2; }\r\n    if (passFailCount.fail > 1) { return 0; }\r\n    return 1;\r\n}\r\n\r\n/**\r\n * Determine saturation of a term that already has a saturation level.\r\n * @param {[content: string[], date: Date, direction: String]} filteredHistory array of (at least 3) history entries, filtered by specified direction\r\n * @param {Number} saturation The term's current saturation level for the specified direction\r\n */\r\nexport function saturateSeededTerm(filteredHistory, saturation) {\r\n    const [currentSession, previousSession, secondToLastSession] = filteredHistory.reverse().slice(0,3);\r\n    // const timeBetween = currentSession?.date - previousSession?.date;\r\n    // const currentTimescale = saturationLevels[Number(saturation)]?.timescale; \r\n\r\n    const fail = countDict(currentSession.content).fail;\r\n    const previousFail = countDict(previousSession.content).fail;\r\n    const secondTolastFail = countDict(secondToLastSession.content).fail;\r\n\r\n    switch (saturation) {  // new saturation level depends on two things: current performance, current saturation level\r\n        case 0:\r\n            return fail ? 0 : 1;\r\n        case 1:\r\n            if (fail) {\r\n                if (fail > 1) return 0;\r\n                if (currentSession.content[0] === 'pass') return 1;\r\n                return 0;\r\n            } else {\r\n                if ( !previousFail && !secondTolastFail) {\r\n                    return 2\r\n                } \r\n                return 1\r\n            }\r\n        case 2:\r\n            if (fail) {\r\n                if (fail > 2) return 0;\r\n                return currentSession.content[0] === 'pass' ? 2 : 1;\r\n            } else {\r\n                if (!previousFail) {\r\n                    return 3\r\n                }\r\n            }\r\n        case 3:\r\n            if (fail) {\r\n                if (fail === 1) {\r\n                    return 2\r\n                } else {\r\n                    return 1\r\n                }\r\n\r\n            } else {\r\n                if ( !previousFail && !secondTolastFail) {\r\n                    return 4\r\n                } \r\n                return 3\r\n            }\r\n        case 4:\r\n            if (fail) {\r\n                return fail > 1 ? 2 : 3\r\n            } else return 4\r\n        default:\r\n            return saturation\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Determine whether the latest session was valuable, given the term's current saturation level, time between two sessions, and results in those two sessions\r\n * @todo Implement functionality\r\n * @param {Object} firstSession term review session, like {date: ..., content: ...}. Session argument order doesn't matter.\r\n * @param {Object} secondSession term review session, like {date: ..., content: ...}. Session argument order doesn't matter.\r\n * @param {Array} saturationLevels Array containing saturation levels and corresponding timescales. Currently hardcoded, could become user-specified settings eventually.\r\n */\r\nexport function isSessionValuable(firstSession, secondSession, saturation, saturationLevels) {\r\n    /* philosophy:\r\n        if I reviewed a term an hour ago, it doesn't matter that I got it correct this time around,\r\n        if I reviewed it an hour ago, knew it then, but _don't_ know it now, this *does* carry meaning,\r\n        if I'm on long-term sustain for a term, it doesn't really matter if I reviewed it two weeks ago instead of a month ago.\r\n        */\r\n    const timeBetween = secondSession.date - firstSession.date;\r\n    const intendedTimescale = saturationLevels.find(d => d.level === saturation)?.timescale;\r\n\r\n    // if timebetween < intendedtimescale for certain saturation levels\r\n}","import React, { memo, useState, useRef, useEffect } from \"react\";\r\nimport './style/ReviewCard.scss';\r\n\r\nconst ReviewCard = memo(({ setBackWasShown, direction, term }) => {\r\n    const [side, setSide] = useState(direction === 'forwards' ? 'from' : 'to'),\r\n        [flipping, setFlipping] = useState(false),\r\n        [fade, setFade] = useState(false),\r\n        toggleSide = () => setSide(side === 'from' ? 'to' : 'from');\r\n    let timeouts = useRef([]);\r\n\r\n    useEffect(() => {  // add, remove or recreate up/down key handler\r\n        window.addEventListener('keyup', handleArrowUpDownKeyup)\r\n        return () => {\r\n            window.removeEventListener('keyup', handleArrowUpDownKeyup)\r\n            \r\n        }\r\n    }, [side])  // only flips correctly once per render if side not specified as dependency\r\n\r\n    useEffect(() => { // when new term is shown, reset card state\r\n        setSide(direction === 'forwards' ? 'from' : 'to')\r\n        setFade(true)\r\n        timeouts.current.push(setTimeout(() => {\r\n            setFade(false)\r\n        }, 150))\r\n    }, [term])\r\n\r\n    useEffect(() => {  // clean up timeouts on unmount\r\n        return () => {\r\n            for (let timeout of timeouts.current) {\r\n                window.clearTimeout(timeout);\r\n            }\r\n        }\r\n    }, [])\r\n\r\n    function handleArrowUpDownKeyup(e) {\r\n        if (['ArrowUp', 'ArrowDown'].includes(e.code)) {\r\n            flip();\r\n        }\r\n    }\r\n\r\n    function flip() {\r\n        let duration = 250; // match keyframes animation duration\r\n        setFlipping(true);\r\n        timeouts.current.push(setTimeout(() => setFlipping(false), duration));\r\n        timeouts.current.push(setTimeout(() => toggleSide(), duration / 2));\r\n        !!setBackWasShown && setBackWasShown(true);\r\n    }\r\n\r\n    return (\r\n        <div \r\n            onClick={flip} \r\n            className={`ReviewCard ${fade ? 'fadein' : ''} ${flipping ? 'flip' : ''}`}\r\n        >\r\n            { term[side] }\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default ReviewCard\r\n\r\n/*\r\nReview card functionality:\r\n- Serve one term at a time in the form of a card.\r\n- Start by showing front, i.e. 'from' side.\r\n- @todo Hide pass/fail buttons and pass/fail functionality until the back has been shown at least once.\r\n- Flip between front and back by clicking the card and with up/down arrow keys, mark pass/fail by clicking the two button elements and with left/right arrow keys.\r\n*/","import React, { memo, useContext, useState, useEffect } from \"react\";\r\nimport {v4 as uuidv4} from 'uuid';\r\nimport { ReviewContext } from '../../context/ReviewContext';\r\nimport './style/PreReview.scss';\r\n\r\nconst PreReview = (props) => {\r\n    const { reviewContext, setReviewContext } = useContext(ReviewContext),\r\n        { settings } = reviewContext,\r\n        [buttons, setButtons] = useState(null),\r\n        [directionButtons, setDirectionButtons] = useState(null);\r\n\r\n    useEffect(() => {\r\n        setButtons([1, 2, 3, 4, 5].map(num => <SettingsButton key={uuidv4()} value={num} n={settings.n} handleSettingsChange={handleSettingsChange} />))\r\n        setDirectionButtons(['forwards', 'backwards'].map(d => <SettingsButton key={uuidv4()} value={d} current={settings.direction} direction={d} handleSettingsChange={handleSettingsChange}/>))\r\n    }, [settings])\r\n\r\n    const handleSettingsChange = e => {\r\n        setReviewContext({ ...reviewContext, settings: { ...reviewContext.settings, [e.target.name]: e.currentTarget.value } })  // todo: only set context if value is different\r\n\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"PreReview\">\r\n                <div className=\"PreReview__header PageHeader\">\r\n                    Review settings\r\n                </div>\r\n\r\n                <form className=\"PreReview__settings\">\r\n                    <ul className=\"PreReview__settings--list\">\r\n                        <li key={uuidv4()}>\r\n                            <label className=\"PreReview__settings--label\" htmlFor=\"n\">\r\n                                Number of cycles:\r\n                            </label>\r\n                            <p className=\"PreReview__settings--tip\">\r\n                                This is the number of times you need to get each term right to complete the session\r\n                            </p>\r\n                            <div className=\"PreReview__settings--cycles\">\r\n                                {buttons}\r\n                            </div>\r\n                        </li>\r\n\r\n                        <li key={uuidv4()}>\r\n                            <label className=\"PreReview__settings--label\" htmlFor=\"direction\">\r\n                                Direction:\r\n                            </label>\r\n                            <p className=\"PreReview__settings--tip\">\r\n                                'Forwards' means you're shown the term in the original language, and need to recall the meaning in the secondary language. 'Backwards' is the other way around.\r\n                            </p>\r\n                            <div className=\"PreReview__settings--directionbuttons\">\r\n                                { directionButtons }\r\n                            </div>\r\n                        </li>\r\n                    </ul>\r\n\r\n                    <input \r\n                        onClick={() => setReviewContext({...reviewContext, settings: {...reviewContext.settings, started: true}})}\r\n                        id=\"PreReview__start\" \r\n                        type=\"button\" \r\n                        value=\"Start the review with these settings\"\r\n                    />\r\n                </form>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default PreReview\r\n\r\nconst SettingsButton = memo(({ handleSettingsChange, direction, n, value, current }) => {\r\n    let selected;\r\n    if (n) {\r\n        selected = String(n) === String(value)\r\n    } else if (direction) {\r\n        selected = direction === current;\r\n    }\r\n    return (\r\n        <input\r\n            style={{ \r\n                color: selected ? 'white' : 'black', \r\n                backgroundColor: selected ? 'blueviolet' : 'white',\r\n            }}\r\n            onClick={handleSettingsChange}\r\n            className={n ? `PreReview__settings--n` : 'PreReview__settings--direction'}\r\n            name={n ? \"n\" : \"direction\"}\r\n            type=\"button\"\r\n            value={value} />\r\n    )\r\n})","import React from \"react\";\r\nimport { Link } from 'react-router-dom';\r\nimport { useRouteProps } from '../../hooks/routerHooks';\r\nimport dayjs from 'dayjs';\r\n\r\nconst PostReview = ({ sessionStart, sessionEnd, list }) => {\r\n    const { navigate, params } = useRouteProps();\r\n    const formatDate = (date) => dayjs(date).format('HH:mm:ss');\r\n\r\n    return (\r\n        <div className=\"Review__post\">\r\n            <h2>Session completed.</h2>\r\n            <div>Started at {formatDate(sessionStart)}</div>\r\n            <div>Completed at {formatDate(sessionEnd)}</div>\r\n\r\n            <button className=\"Button\">\r\n                <Link to={`/u/${list.owner}/list/${params.id}`}>Back to list</Link>\r\n            </button>\r\n\r\n            <button className=\"Button\">\r\n                <Link to={`/u/${list.owner}/lists`}>Back to lists overview</Link>\r\n            </button>\r\n\r\n            <button \r\n                onClick={() => navigate(0)}\r\n                className=\"Button\"\r\n            >\r\n                <Link to={`/u/${list.owner}/list/${params.id}/review`}>Review this list again</Link>\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PostReview","import React, { useState, useEffect, memo } from \"react\";\r\nimport dayjs from 'dayjs';\r\nimport relativeTime from 'dayjs/plugin/relativeTime';\r\n  dayjs.extend(relativeTime);\r\n\r\n/**\r\n * JSX <span> component displaying sessionStart.fromNow();\r\n */\r\nconst Timer = memo(({ start }) => {\r\n    const [timer, setTimer] = useState(null);\r\n    const [elapsed, setElapsed] = useState(0);\r\n\r\n    useEffect(() => {\r\n        const timerInterval = setInterval(() => setElapsed(Math.round(Math.floor(Date.now() - start)/1000)), 1000)\r\n        return () => clearInterval(timerInterval)\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        setTimer(dayjs(start).fromNow())\r\n    }, [elapsed])\r\n\r\n    return (\r\n        <span title={`${dayjs(start).format('hh:mm:ss A')}`} className=\"Timer\">\r\n            <strong>{timer}</strong>\r\n        </span>\r\n    )\r\n})\r\n\r\nexport default Timer","import React, { memo } from \"react\";\r\nimport Timer from './Timer';\r\nimport './style/ReviewInfo.scss';\r\n\r\nconst ReviewInfo = memo(({ start, numTerms, n, progress }) => {\r\n\r\n    return (\r\n        <details className=\"Review__info\">\r\n            <summary>\r\n                <span className=\"Review__info--header\">\r\n                    <span>Session information</span>\r\n                </span>\r\n            </summary>\r\n\r\n            <div className=\"Review__info--dynamic\">\r\n                <div className=\"Review__info--completion\">\r\n                    Session completion: {progress}%.\r\n                    <div>\r\n                        You started this session <Timer start={start} />.\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"Review__info--hideable\">\r\n                <div>\r\n                    Number of terms in this list: <strong>{numTerms}</strong>.\r\n                </div>\r\n                <div>\r\n                    Pass each term <strong>{n} time{n !== 1 ? 's' : ''}</strong> to complete the session.\r\n                </div>\r\n            </div>\r\n\r\n        </details>\r\n    )\r\n})\r\n\r\nexport default ReviewInfo","import React, { memo, useEffect, useState, useRef, useContext, useReducer } from \"react\";\r\nimport { Link } from 'react-router-dom';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport dayjs from 'dayjs';\r\n\r\nimport { useRouteProps } from '../../hooks/routerHooks';\r\nimport { makeReviewList } from '../../helpers/reviewHelpers';\r\nimport { ReviewContext } from '../../context/ReviewContext';\r\nimport { useRequest } from '../../hooks/useRequest';\r\nimport { handleGetList, getList, handlePutList, putList } from '../../helpers/apiHandlers/listHandlers';\r\nimport { saturate } from '../../helpers/srs/saturation';\r\n\r\nimport ReviewCard from './ReviewCard';\r\nimport PreReview from './PreReview';\r\nimport PostReview from \"./PostReview\";\r\nimport ReviewInfo from \"./ReviewInfo\";\r\n\r\nimport './style/Review.scss';\r\n\r\nconst Review = memo((props) => {\r\n    const { params } = useRouteProps(),\r\n        [session, setSession] = useState(() => ({ start: new Date(), end: false })),\r\n        [list, setList] = useState(null),\r\n        [futureTerms, reduceFutureTerms] = useReducer(termReducer, null),\r\n        [currentCard, setCurrentCard] = useState(null),\r\n        [progress, setProgress] = useState(0),  // percentage of terms marked 'pass' in the session\r\n        { reviewContext } = useContext(ReviewContext),\r\n        { n, direction, started } = reviewContext.settings,\r\n        [backWasShown, setBackWasShown] = useState(null),\r\n        failRef = useRef(null), // refs for handleLeftRightArrowKeydown to target\r\n        passRef = useRef(null);\r\n    let timeout = useRef(null);\r\n\r\n    const { setRequest: setGetRequest } = useRequest({\r\n        handleResponse: (res, setResponse) => {\r\n            res = res.data\r\n\r\n            if (res.content && res.content.length > 0) {\r\n                setResponse(res);\r\n                setList(res)\r\n                reduceFutureTerms({\r\n                    type: 'init',\r\n                    payload: makeReviewList(res.content, n)\r\n                })\r\n            }\r\n        },\r\n        handleError: handleGetList().handleError\r\n    })\r\n    const { setRequest: setPutRequest } = useRequest({ ...handlePutList() })\r\n\r\n    useEffect(() => {  // get list from database and initialize futureTerms\r\n        setGetRequest(() => getList(params.username, { _id: params.id }))\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n                window.clearTimeout(timeout.current);\r\n        }\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (list) {\r\n            reduceFutureTerms({\r\n                type: 'init',\r\n                payload: makeReviewList(list.content, Number(n))\r\n            })\r\n        }\r\n    }, [n]) // including list in deps causes session to be malformed somehow (progress doesn't change when moving to a new term)\r\n\r\n    useEffect(() => {  // create new card to show, remove old and add new up/down key handler\r\n        if (list && futureTerms) {\r\n            let sessionLength = list.content.length * n;\r\n            let termsCompleted = sessionLength - futureTerms.length;\r\n            setProgress(Math.floor(100 * termsCompleted / sessionLength));\r\n        }\r\n\r\n        futureTerms?.length > 0 && setCurrentCard(\r\n            <ReviewCard\r\n                setBackWasShown={setBackWasShown}\r\n                key={uuidv4()}\r\n                direction={direction}\r\n                term={futureTerms[0]} />)\r\n\r\n        futureTerms?.length === 0 && endSession(list);\r\n\r\n        window.addEventListener('keydown', handleLeftRightArrowKeyDown)\r\n\r\n        return () => {\r\n            setCurrentCard(null)\r\n            window.removeEventListener('keydown', handleLeftRightArrowKeyDown)\r\n        }\r\n    }, [futureTerms, direction])\r\n\r\n    /**\r\n     * ArrowLeft/ArrowRight keydown event to simulate pressing the Pass/Fail buttons\r\n     * @param {*} e event object\r\n     */\r\n    function handleLeftRightArrowKeyDown(e) {\r\n        let ref;\r\n        switch (e.code) {\r\n            case 'ArrowLeft':\r\n                ref = failRef;\r\n                break;\r\n            case 'ArrowRight':\r\n                ref = passRef\r\n                break;\r\n            default:\r\n                return\r\n        }\r\n\r\n        if (ref.current) {\r\n            ref.current.focus()\r\n            ref.current.click();\r\n            timeout.current = (setTimeout(() => {  // highlight button for UX\r\n                setBackWasShown(false);\r\n                if (ref.current) {\r\n                    ref.current.blur()\r\n                }\r\n            }, 100)\r\n            )\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * case init: initialize futureTerms using list.content from database\r\n     * case pass/fail: Handle what happens to current term after pass/fail is chosen.\r\n     * @param {Array} terms     array of terms\r\n     * @param {Object} action   properties: type (init, pass, fail). if type 'init', send terms as action.payload\r\n     */\r\n    function termReducer(terms, action) {\r\n\r\n        switch (action.type) {\r\n            case 'init':\r\n                return action.payload\r\n            case 'pass':\r\n                return terms.slice(1,);  // remove the term\r\n            case 'fail':\r\n                let newIndex = Math.floor((terms.length + 1) * Math.random());\r\n\r\n                let newTerms = [...terms];\r\n                let currentTerm = newTerms.shift();\r\n                newTerms.splice(newIndex, 0, currentTerm);\r\n                return newTerms\r\n            default:\r\n                return terms\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Find current term in list.content, update its history, and setList with updated list.content\r\n     * @param {object} term     should always be futureTerms[0]\r\n     * @param {string} passfail 'pass'/'fail'\r\n     * @return {object}         copy of newly set list state\r\n     */\r\n    function updateSessionHistory(term, passfail) {\r\n        const content = [...list.content];\r\n        let idx = content.findIndex(i => i.to === term.to && i.from === term.from)\r\n\r\n        if (!content[idx].history || content[idx].history.length === 0) {\r\n            content[idx].history = [{\r\n                date: session.start,\r\n                content: [],\r\n                direction\r\n            }]\r\n        }\r\n        if (content[idx].history.length > 0) {\r\n            let histLen = content[idx].history.length\r\n            let lastHist = content[idx].history[histLen - 1];\r\n\r\n            if (dayjs(lastHist.date) < dayjs(session.start)) {\r\n                content[idx].history.push({\r\n                    date: session.start,\r\n                    content: [passfail],\r\n                    direction\r\n                })\r\n            } else {\r\n                content[idx].history[histLen - 1].content.push(passfail)\r\n            }\r\n        }\r\n        let newList = { ...list, content: [...content] };\r\n        setList(newList);\r\n        return newList\r\n    }\r\n\r\n    /**\r\n     * Handle clicking the pass or fail button\r\n     * @param {*} e javascript event\r\n     * @param {string} passfail 'pass'/'fail'\r\n     */\r\n    function handlePassFailClick(e, passfail) {\r\n        e.preventDefault();\r\n        updateSessionHistory(futureTerms[0], passfail);\r\n        reduceFutureTerms({ type: passfail })\r\n        setBackWasShown(false);\r\n    }\r\n\r\n    /**\r\n     * Append this session's information to the list, determine each term's saturation level, and update list in database.\r\n     * @param {Array} list list state\r\n     */\r\n    function endSession(list) {\r\n        let end = new Date();\r\n        setSession({ ...session, end });\r\n\r\n        list.sessions.push({\r\n            start: session.start,\r\n            end,\r\n            numTerms: list.content.length,\r\n            termsReviewed: Number(n) * list.content.length,\r\n            n: Number(n),\r\n            direction\r\n        });\r\n\r\n        list.lastReviewed = end;\r\n\r\n        list.content = list.content.map(term => {\r\n            const newTerm = { ...term };\r\n            newTerm.saturation = { ...newTerm.saturation, [direction]: saturate(newTerm, direction) };\r\n            return newTerm\r\n        });\r\n\r\n        setPutRequest(() => putList(params.username, { _id: params.id, owner: list.owner }, list))\r\n    }\r\n\r\n    return (\r\n        <div className=\"PageWrapper Review\">\r\n            { list &&\r\n                <>\r\n                    <div className=\"PageHeader Review__title\">\r\n                        <div> Reviewing<span className=\"Review__title--name\"><em>{list.name}</em></span> </div>\r\n                        <div> <Link className=\"Button\" to={`/u/${params.username}/list/${params.id}`}>Back to list</Link> </div>\r\n                    </div>\r\n                </>\r\n            }\r\n\r\n            { list && !started\r\n                ?\r\n                <PreReview />\r\n                :\r\n                <>\r\n                    { !session.end && currentCard &&\r\n                        <>\r\n                            {currentCard}\r\n\r\n                            { backWasShown\r\n                                ?\r\n                                <>\r\n                                    <div className=\"Review__buttons\">\r\n                                        <input\r\n                                            ref={failRef}\r\n                                            onClick={(e) => { if (backWasShown) handlePassFailClick(e, 'fail') }}\r\n                                            disabled={!backWasShown}\r\n                                            className=\"Review__button\"\r\n                                            id=\"Review__button--fail\"\r\n                                            type=\"button\"\r\n                                            value=\"Fail\"\r\n                                        />\r\n                                        <input\r\n                                            ref={passRef}\r\n                                            onClick={(e) => { if (backWasShown) handlePassFailClick(e, 'pass') }}\r\n                                            disabled={!backWasShown}\r\n                                            className=\"Review__button\"\r\n                                            id=\"Review__button--pass\"\r\n                                            type=\"button\"\r\n                                            value=\"Pass\"\r\n                                        />\r\n                                    </div>\r\n\r\n                                </>\r\n                                :\r\n                                <div className=\"Review__prevent\">\r\n                                    Cannot move on to the next term until you've seen the back of the card.\r\n                                </div>\r\n                            }\r\n                            <div className=\"Review__progress--wrapper\">\r\n                                <div \r\n                                    className=\"Review__progress--bar\" \r\n                                    style={{ width: `${progress}%` }}\r\n                                />\r\n                            </div>\r\n\r\n                            { session.start &&\r\n                                <ReviewInfo\r\n                                    start={session.start}\r\n                                    numTerms={list.content.length}\r\n                                    n={n}\r\n                                    progress={progress}\r\n                                />\r\n                            }\r\n\r\n                        </>\r\n                    }\r\n\r\n                    { session.end &&\r\n                        <>\r\n                            <PostReview\r\n                                sessionStart={session.start}\r\n                                sessionEnd={session.end}\r\n                                list={list}\r\n                            />\r\n                        </>\r\n                    }\r\n                </>\r\n            }\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default Review;\r\n\r\n/*\r\n@todo?  set progress bar color based in session cycle. go to 100% n time with various colors, instead of slowly progress a single bar\r\n        makes it feel like progress is faster\r\n\r\n@todo postsession: let user know session has been stored in db\r\n\r\n@note: list loads with n = 2 terms by default, but is rebuilt when n changes. could be cleaned up into a single case, but I need time to work that out. functions for now.\r\n\r\n@todo? buttons are shown based on !!backWasShown, but this means flippign to next card instantly removes them, so I won't get the little 100ms light-up effect \r\n*/\r\n","import React, { useState, createContext } from \"react\";\r\n\r\nexport const ListContext = createContext(null);\r\n\r\nexport const ListProvider = (props) => {\r\n    const [listContextValue, setListContextValue] = useState(() => {});\r\n\r\n    return (\r\n        <ListContext.Provider value={{listContextValue, setListContextValue}}>\r\n            {props.children}\r\n        </ListContext.Provider>\r\n    )\r\n}","import dayjs from 'dayjs';\r\nimport relativeTime from 'dayjs/plugin/relativeTime';\r\nimport advancedFormat from 'dayjs/plugin/advancedFormat'\r\n  dayjs.extend(advancedFormat)\r\n  dayjs.extend(relativeTime);\r\n\r\n/**\r\n * Return time to or from the given date\r\n * @param {Date} date date to which relative distance should be returned\r\n * @returns {String} e.g. '2 days ago'\r\n */\r\nexport function timeSince(date) {\r\n    return dayjs(date).fromNow();\r\n}\r\n\r\n/**\r\n * Converts a date to a formatted string\r\n * @param {Date} date Date to format\r\n * @param {String} format dayjs parse format\r\n */\r\nexport function formatDate(date, format) {\r\n    return dayjs(date).format(format);\r\n}","import React, { useState, memo, Fragment } from \"react\";\r\nimport './style/TermHistory.scss'\r\nimport dayjs from 'dayjs';\r\nimport { timeSince } from '../../helpers/time';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nconst TermHistory = memo(({ history }) => {\r\n    const [expand, setExpand] = useState(false);\r\n\r\n    const histEl = makeHistoryElement(history);\r\n\r\n    function makeHistoryElement(history) {\r\n        return history.map(el =>\r\n        (\r\n            <Fragment key={uuidv4()}>\r\n                <div className=\"TermHistory__session\">\r\n                    <div\r\n                        title={dayjs(el.date).format('MMMM DD, YYYY (HH:mm)')}\r\n                        className=\"TermHistory__date\"\r\n                    >\r\n                        {timeSince(el.date)}\r\n                    </div>\r\n\r\n                    <div\r\n                        key={uuidv4()}\r\n                        className=\"TermHistory__history\">\r\n                        { el.content.map((i, index) =>\r\n                            <span\r\n                                key={`passfail-${i}-${index}`}\r\n                                style={{\r\n                                    width: \"20px\",\r\n                                    height: \"20px\",\r\n                                    display: \"inline-block\",\r\n                                    margin: \"0.2rem\",\r\n                                    borderRadius: \"50%\",\r\n                                    backgroundColor: i === 'pass' ? 'seagreen' : 'orangered'\r\n                                }}\r\n                            > </span>\r\n                         )\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </Fragment>\r\n        )\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n\r\n            <div className=\"TermHistory\">\r\n                <div className=\"TermHistory__header\">\r\n                    <div\r\n                        className=\"TermHistory__desc\">\r\n                        You've reviewed this term {histEl.length} time{histEl.length === 1 ? '' : 's'}\r\n                    </div>\r\n                    {histEl.length > 1 &&\r\n                        <button\r\n                            className=\"TermHistory__expand\"\r\n                            onClick={() => setExpand(!expand)}\r\n                        >\r\n                            {!expand ? 'Expand' : 'Collapse'}\r\n                        </button>\r\n                    }\r\n                </div>\r\n                <div className=\"TermHistory__content\">\r\n                    {expand ? histEl.reverse() : histEl[histEl.length - 1]}\r\n                </div>\r\n            </div>\r\n\r\n        </>\r\n    )\r\n})\r\n\r\nexport default TermHistory","import React, { memo } from \"react\";\r\nimport { colorBySaturation } from '../../helpers/list.api';\r\n\r\nconst SaturationIcon = memo(({ direction, classes, saturation }) => {\r\n    const saturationIconStyle = {\r\n        width: '20px',\r\n        height: '20px',\r\n        padding: '0rem',\r\n        borderRadius: '50%',\r\n        backgroundColor: colorBySaturation(saturation) || '#333',\r\n        boxShadow: \"0 0 1rem black\",\r\n        border: \"2px solid transparent\",\r\n    }\r\n\r\n    function makeTooltip(direction, saturation) {\r\n        if (!(typeof saturation) === 'Number') {\r\n            return 'Not enough reviews to judge memorization. Get on it!';\r\n        }\r\n    \r\n        if (saturation < 2) {\r\n            return `${direction}: Review soon!`;\r\n        }\r\n    \r\n        return `${direction}: No need to review yet`;\r\n    }\r\n\r\n    return (\r\n        <span \r\n            title={direction ? makeTooltip(direction, saturation) : ''} \r\n            style={saturationIconStyle} \r\n            className={classes} \r\n        />\r\n    )\r\n})\r\n\r\nexport default SaturationIcon","import React, { useEffect } from \"react\";\r\n\r\nimport TermHistory from './TermHistory';\r\nimport SaturationIcon from './SaturationIcon';\r\nimport './style/TermModal.scss';\r\n\r\nconst TermModal = ({ handleConfirmClick, setOpen, term, handleTermEdit, confirmingDelete, setConfirmingDelete }) => {\r\n    function closeModal(e) {\r\n        if (e.currentTarget === e.target) {\r\n            setOpen(false);\r\n        }\r\n    }\r\n\r\n    function handleKeydown(e) {\r\n        if (e.code === \"Escape\") {\r\n            setOpen(false);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        window.addEventListener('keydown', handleKeydown)\r\n        return () => window.removeEventListener('keydown', handleKeydown)\r\n    }, [])\r\n\r\n    const inputStyle = {\r\n        backgroundColor: confirmingDelete ? 'orangered' : '',\r\n        boxShadow: !confirmingDelete ? '' : '0 0 1rem black',\r\n        border: confirmingDelete ? '2px solid black' : ''\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div onClick={closeModal} className=\"TermModal__wrapper\"></div>\r\n            <div className=\"TermModal\">\r\n                <section>\r\n                    <div className=\"TermModal__header\">\r\n                        <header>Term details</header>\r\n                        <button title=\"Close modal\" onClick={() => setOpen(false)}>x</button>\r\n                    </div>\r\n\r\n                    <label htmlFor=\"front\">Front:</label>\r\n                    <div className=\"TermModal__side\">\r\n\r\n                        <input\r\n                            tabIndex=\"1\"\r\n                            name=\"front\"\r\n                            disabled={confirmingDelete}\r\n                            title=\"Click to edit\"\r\n                            style={inputStyle}\r\n                            className=\"TermModal__input\"\r\n                            onBlur={handleTermEdit} className=\"\" side=\"from\" type=\"text\" defaultValue={term.from}\r\n                        />\r\n                        <span className=\"TermModal__side--saturation\">\r\n                            <SaturationIcon direction='forwards' saturation={term.saturation?.forwards} />\r\n                        </span>\r\n                    </div>\r\n\r\n                    <label htmlFor=\"back\">Back:</label>\r\n                    <div className=\"TermModal__side\">\r\n\r\n                        <input\r\n                            name=\"back\"\r\n                            tabIndex=\"2\"\r\n                            disabled={confirmingDelete}\r\n                            title=\"Click to edit\"\r\n                            style={inputStyle}\r\n                            className=\"TermModal__input\"\r\n                            onBlur={handleTermEdit} className=\"\" side=\"to\" type=\"text\" defaultValue={term.to}\r\n                        />\r\n                        <span className=\"TermModal__side--saturation\">\r\n                            <SaturationIcon direction={'backwards'} saturation={term.saturation?.backwards} />\r\n                        </span>\r\n                    </div>\r\n\r\n                </section>\r\n\r\n            <section>\r\n                <header> History </header>\r\n                <TermHistory history={term.history} />\r\n            </section>\r\n\r\n            <div className=\"TermModal__delete--wrapper\">\r\n                {!confirmingDelete\r\n                    ?\r\n                    <button onClick={() => setConfirmingDelete(true)} className=\"TermModal__delete\">Delete this term</button>\r\n\r\n                    :\r\n                    <>\r\n                        <div className=\"TermModal__delete--confirm\">Delete?</div>\r\n                        <button onClick={(e) => handleConfirmClick(e, { type: 'delete' })} className=\"TermModal__delete--confirm-yes\">Yes</button>\r\n                        <button onClick={() => setConfirmingDelete(false)} className=\"TermModal__delete--confirm-no\">No</button>\r\n                    </>\r\n\r\n                }\r\n            </div>\r\n        </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TermModal","import React, { memo, useContext, useState, useEffect } from \"react\";\r\nimport { ListContext } from '../../context/ListContext';\r\n\r\nimport TermModal from './TermModal';\r\nimport SaturationIcon from './SaturationIcon';\r\n\r\nimport { useRequest } from '../../hooks/useRequest';\r\nimport { putList, handlePutList } from '../../helpers/apiHandlers/listHandlers'\r\n\r\nimport './style/ListTerm.scss'\r\n\r\n/**\r\n * ListTerm component\r\n * @param {object}  props: handleTermDelete (passed down function), term (list.content entry), idx (Number)\r\n */\r\nconst ListTerm = memo(({ handleTermDelete, term: termFromProps, idx }) => {\r\n    const [term, setTerm] = useState(() => (termFromProps)),\r\n        [confirmingDelete, setConfirmingDelete] = useState(false),\r\n        { listContextValue, setListContextValue } = useContext(ListContext),\r\n        { setRequest: setPutRequest } = useRequest({...handlePutList()}),\r\n        [open, setOpen] = useState(false);\r\n\r\n    useEffect(() => { // cleanup\r\n        return () => {\r\n            setConfirmingDelete(false);\r\n        }\r\n    }, [])\r\n\r\n    /**\r\n     * Remove term from the list.\r\n     * Triggered on deletion confirmation.\r\n     * \r\n     * @todo        remove term from database entirely from this hook? or is there another 'send changes to database' layer on the /list/:id page?\r\n     * @param {object} action    currently only expects {type: 'delete'}\r\n     */\r\n    const handleConfirmClick = (e, action) => {\r\n        e.preventDefault();\r\n        setConfirmingDelete(false);\r\n        setOpen(false);\r\n        if (action.type === 'delete') {\r\n            handleTermDelete(idx);\r\n        }\r\n    }\r\n\r\n    /**\r\n    * @param   {string}    field   'from'/'to', related to term.to and term.from properties (term is passed from props)\r\n    * @todo update actual list itself, also update listContextValue, and then push new list state to db\r\n    */\r\n    const handleTermEdit = (e) => {\r\n        let side = e.currentTarget.getAttribute('side');\r\n        if (e.target.value && term[side] !== e.target.value) {\r\n            let newTerm = { ...term, [side]: e.target.value }\r\n            setTerm(newTerm)\r\n            let newListContent = [...listContextValue.content];\r\n            newListContent[idx] = { ...newTerm };\r\n            let newList = { ...listContextValue, content: [...newListContent] }\r\n            setListContextValue(newList);\r\n            setPutRequest(() => putList(listContextValue.owner, { _id: listContextValue._id, owner: listContextValue.owner }, newList))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"ListTerm\">\r\n            <li className=\"Term\" title=\"Click to expand\" onClick={() => setOpen(true)}>\r\n                    <span className=\"Term__index\">{idx+1}</span>\r\n                    <span className=\"Term__from\">{term.from}</span>\r\n                    <span className=\"Term__to\">{term.to}</span>\r\n                    <SaturationIcon classes={\"Term__saturation\"} direction=\"forwards\" saturation={term.saturation?.forwards}/>\r\n                    <SaturationIcon classes={\"Term__saturation\"} direction=\"backwards\" saturation={term.saturation?.backwards}/>\r\n                </li>\r\n            { open && \r\n                <TermModal \r\n                    handleConfirmClick={handleConfirmClick}\r\n                    setOpen={setOpen} \r\n                    term={term} \r\n                    handleTermEdit={handleTermEdit} \r\n                    confirmingDelete={confirmingDelete}\r\n                    setConfirmingDelete={setConfirmingDelete}\r\n                />\r\n            }\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default ListTerm\r\n\r\n/* FIXME: deleting only term in a list doesn't update visible terms (but does update the database entry, so problem lies in a key or a render based on .length > 0) */","import React from \"react\";\r\n\r\nconst SetPicker = (props) => {\r\n    \r\n    return (\r\n        <div className=\"SetPicker\">\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SetPicker\r\n\r\nconst SetList = () => {\r\n    // load user's sets, display in an absolutely positioned ul\r\n    // filter input from SetPicker by typing or clicking\r\n    return (\r\n        <ul\r\n            className=\"SetList\"\r\n        >\r\n            <li>set name here</li>\r\n        </ul>\r\n    )\r\n}","import React, { useState, useEffect, memo } from \"react\";\r\nimport { colorMap, colorBySaturation } from \"../../helpers/list.api\";\r\nimport SaturationIcon from './SaturationIcon';\r\nimport './style/SaturationFilter.scss';\r\n\r\nconst SaturationFilter = memo(({filter, setFilter}) => {\r\n    const [saturationFilter, setSaturationFilter] = useState(null);\r\n    const [focus, setFocus] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (saturationFilter) {\r\n            setFilter(({...filter, saturation: saturationFilter}))\r\n        }\r\n    }, [saturationFilter, setFilter])\r\n\r\n    let icons = Object.keys(colorMap)\r\n        .map(level => {\r\n            return (\r\n                <React.Fragment key={`saturation-wrapper-${level}`}>\r\n                    <div\r\n                        onClick={() => {\r\n                            setSaturationFilter(level);\r\n                            setTimeout(() => { setFocus(false) }, 0);\r\n                        }}\r\n                        className=\"SaturationFilter__icon--wrapper\"\r\n                    >\r\n                        <SaturationIcon\r\n                            classes=\"SaturationFilter__icon\"\r\n                            key={`saturation-filter-level-${level}`}\r\n                            saturation={level}\r\n                        />\r\n                    </div>\r\n                </React.Fragment>\r\n            )\r\n        }\r\n        )\r\n\r\n    return (\r\n        <>\r\n            <div\r\n                className=\"SaturationFilter\"\r\n            >\r\n                {!focus\r\n                    ?\r\n                    <button\r\n                        onClick={() => setFocus(true)}\r\n                        className=\"SaturationFilter__label\"\r\n                        style={{\r\n                            boxShadow: `0 8px 0 -7px ${saturationFilter ? colorBySaturation(saturationFilter) : '#333'}, 0 0 1rem black`,\r\n                            border: `2px solid ${saturationFilter ? colorBySaturation(saturationFilter) : '#333'}`,\r\n                        }}\r\n                    >\r\n                        Filter by saturation level\r\n                        </button>\r\n                    :\r\n                    <div className=\"SaturationFilter__filter\">\r\n                        <div\r\n                            className=\"SaturationFilter__icons\"\r\n                            style={{ border: `2px solid ${saturationFilter ? colorBySaturation(saturationFilter) : '#333'}` }}\r\n                        >\r\n                            {icons}\r\n                        </div>\r\n                        \r\n                        {/* ----- WIP: implement filter by direction ----- */}\r\n                        {/* <div \r\n                            style={{ \r\n                                border: `2px solid ${filter ? colorBySaturation(filter) : '#333'}`,\r\n                                borderTop: 'none',\r\n                            }}\r\n                            className=\"SaturationFilter__options\"\r\n                        >\r\n                            <div className=\"SaturationFilter__options--block\">\r\n                                <label \r\n                                    className=\"SaturationFilter__options--label\"\r\n                                    htmlFor=\"direction\"\r\n                                >\r\n                                    Direction\r\n                                </label>\r\n                                <select className=\"SaturationFilter__options--select\">\r\n                                    <option \r\n                                        className=\"SaturationFilter__options--option\"\r\n                                        value=\"forwards\">forwards</option>\r\n                                    <option \r\n                                        className=\"SaturationFilter__options--option\"\r\n                                        value=\"backwards\">backwards</option>\r\n                                </select>\r\n                            </div>\r\n                        </div> */}\r\n\r\n                    </div>\r\n                }\r\n\r\n\r\n            </div>\r\n        </>\r\n    )\r\n})\r\n\r\nexport default SaturationFilter","import React, { memo, useContext, useState, useEffect } from \"react\";\r\nimport { Link } from 'react-router-dom';\r\nimport { ListContext } from '../../context/ListContext';\r\nimport { formatDate } from '../../helpers/time';\r\nimport { handleGetList, getList, putList, handlePutList, handleDeleteList, deleteList } from '../../helpers/apiHandlers/listHandlers';\r\nimport { useRouteProps } from '../../hooks/routerHooks';\r\nimport { useRequest } from '../../hooks/useRequest';\r\nimport ListTerm from './ListTerm';\r\nimport SetPicker from './SetPicker';\r\nimport SaturationFilter from './SaturationFilter';\r\nimport './style/List.scss';\r\n\r\nconst List = memo((props) => {\r\n    const [list, setList] = useState(null),\r\n        [filter, setFilter] = useState({}),\r\n        [terms, setTerms] = useState(null),\r\n        { params, location } = useRouteProps(),\r\n        { setListContextValue } = useContext(ListContext),\r\n        { response: getResponse, setRequest: setGetRequest } = useRequest({ ...handleGetList() }),\r\n        { setRequest: setPutRequest } = useRequest({ ...handlePutList() }),\r\n        { response: deleteResponse, setRequest: setDeleteRequest } = useRequest({ ...handleDeleteList() });\r\n\r\n    useEffect(() => {  // retrieve list on component load\r\n        setGetRequest(() => getList(params.username, { _id: params.id }))\r\n    }, [])\r\n\r\n    useEffect(() => {  // set list and list context when list is returned from API\r\n        if (getResponse) {\r\n            setList(getResponse);\r\n            setListContextValue(getResponse);\r\n        }\r\n    }, [getResponse])\r\n\r\n    useEffect(() => {\r\n        if (list && list.content) { updateTerms() };      /*  updateTerms needs to be called only AFTER list has been put into state, since this depends on list */\r\n    }, [list])\r\n\r\n    function updateTerms() {\r\n        setTerms(list.content.map((term, idx) => {\r\n            let termProps = {\r\n                handleTermDelete,\r\n                key: `list-term-${term.to}-${term.from}`,\r\n                idx: idx,\r\n                term\r\n            };\r\n\r\n            return (\r\n                {\r\n                    saturation: term.saturation,\r\n                    element: <ListTerm {...termProps} />,\r\n                }\r\n            )\r\n\r\n        }));\r\n    }\r\n\r\n    function handleTermDelete(idx) {\r\n        const updatedList = { ...list }\r\n        updatedList.content.splice(idx, 1);\r\n        updatedList.numTerms = updatedList.content.length\r\n        setList(updatedList);\r\n        setListContextValue(updatedList)\r\n\r\n        setPutRequest(() => putList(params.username, { _id: updatedList._id, owner: updatedList.owner }, updatedList))\r\n    };\r\n\r\n    function handleDelete() {\r\n        setDeleteRequest(() => deleteList(params.username, { _id: params.id }))\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div className=\"PageWrapper\">\r\n                <div className=\"List\">\r\n                    {deleteResponse && JSON.stringify(deleteResponse)}\r\n\r\n                    {list &&\r\n                        <>\r\n                            <div className=\"PageHeader\">{list.name} ({list.from} to {list.to})</div>\r\n                            <button className=\"Button\"><Link to={`${location.pathname}/review`}>Review</Link></button>\r\n                            <button className=\"Button danger\" onClick={() => handleDelete()}>Delete this list</button>\r\n\r\n                            <section\r\n                                className=\"List__header\"\r\n                                style={{\r\n                                    gridTemplateColumns: list.sets ? '3fr 1fr' : '2fr 1fr'\r\n                                }}\r\n                            >\r\n                                <section className=\"List__info\">\r\n                                    <header className=\"List__section--header\">List info</header>\r\n                                    <p className=\"List__info--item\">\r\n                                        There {list.content.length === 1 ? 'is' : 'are'} <span className=\"List__info--datum\">{list.numTerms}</span> term{list.content.length === 1 ? '' : 's'} in this list.\r\n                                    </p>\r\n                                    {list.lastReviewed\r\n                                        ?\r\n                                        <>\r\n                                            <p className=\"List__info--item\">\r\n                                                You've reviewed this list <span className=\"List__info--datum\">{list.sessions.length} time{list.sessions.length !== 1 ? 's' : ''}</span>,\r\n\r\n                                            </p>\r\n                                            <p className=\"List__info--item\">\r\n                                                Your most recent review was <span className=\"List__info--datum\">{formatDate(list.lastReviewed, 'hh:mma, MMMM Do')}</span>.\r\n                                            </p>\r\n                                        </>\r\n                                        :\r\n                                        <p className=\"List__info--item\" style={{ width: 'max-content', backgroundColor: 'blueviolet' }}>You haven't reviewed this list yet. Get on it!</p>\r\n                                    }\r\n                                </section>\r\n                                <section className=\"List__sets\">\r\n                                    <header className=\"List__section--header\">\r\n                                        Sets\r\n                                    </header>\r\n                                    <SetPicker />\r\n                                    {!list.sets && <p>This list is not part of any sets.</p>}\r\n                                </section>\r\n\r\n                            </section>\r\n\r\n\r\n                            <section className=\"List__content\">\r\n                                <ul className=\"List__terms\">\r\n                                    <div>\r\n                                        <div className=\"List__terms--header\">\r\n                                            <span className=\"List__section--header\">Terms</span>\r\n                                            <div className=\"List__terms--saturationfilter\">\r\n                                                {list.sessions?.length > 0 &&\r\n                                                    < SaturationFilter\r\n                                                    filter={filter}\r\n                                                    setFilter={setFilter}\r\n                                                />\r\n                                                }\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                    {terms\r\n                                        ?.filter(term => {\r\n                                            if (Object.keys(filter).length > 0) {\r\n                                                if (!term.saturation) { return true }\r\n                                                return term.saturation?.forwards == filter?.saturation || term.saturation?.backwards == filter?.saturation\r\n                                            } else {\r\n                                                return true\r\n                                            }\r\n                                        })\r\n                                        ?.map(term => term?.element)\r\n                                    }\r\n                                </ul>\r\n                            </section>\r\n\r\n                        </>\r\n                    }\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n})\r\n\r\nexport default List","import React from 'react';\r\nimport { useRouteProps } from '../../hooks/routerHooks';\r\nimport './style/User.scss';\r\n\r\nconst User = () => {\r\n    const { params } = useRouteProps();\r\n    const username = params.username;\r\n\r\n    return (\r\n        <div className=\"PageWrapper\">\r\n            <div className=\"User\">\r\n                <div className=\"PageHeader UserHeader\">User page for /u/{username}</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default User;","import React, { memo } from \"react\";\r\nimport { Link } from 'react-router-dom';\r\nimport { useRouteProps } from \"../../hooks/routerHooks\";\r\nimport './style/ListsItem.scss'\r\nimport { timeSince } from '../../helpers/time';\r\nimport dayjs from 'dayjs';\r\n\r\nconst ListsItem = memo(({ list }) => {\r\n    const { params } = useRouteProps();\r\n\r\n    const timeSinceLastReview = (list) => {\r\n        if (!list.lastReviewed) { return null }\r\n\r\n        return dayjs(new Date()) - dayjs(list.lastReviewed)\r\n    }\r\n\r\n    const colorByLastReviewDate = (timeSince) => {\r\n        let day = 3600*24*1000\r\n        if (!timeSince) {\r\n            return '#333'\r\n        } if (timeSince < day) {\r\n            return 'seagreen'\r\n        } if (timeSince < 2*day) {\r\n            return 'teal'\r\n        } if (timeSince < 3*day) {\r\n            return 'yellowgreen'\r\n        } if (timeSince < 7*day) {\r\n            return 'orange'\r\n        } \r\n        return 'orangered'\r\n    }\r\n\r\n\r\n    return (\r\n        <div style={{borderColor: colorByLastReviewDate(timeSinceLastReview(list))}}className=\"ListsItem\">\r\n            <div className=\"ListsItem__name\">\r\n                <Link className=\"Link\" to={`/u/${params.username}/list/${list._id}`}>{list.name}</Link>\r\n            </div>\r\n            <div className=\"ListsItem__from\">{list.from}</div>\r\n            <div className=\"ListsItem__to\">{list.to}</div>\r\n            <div className=\"ListsItem__numTerms\">{list.numTerms} terms in this list</div>\r\n        { list.sessions.length > 0 && \r\n            <div className=\"ListsItem__since\">\r\n                <em>last reviewed {timeSince(list.sessions[list.sessions.length-1].end)}</em>\r\n            </div> \r\n        }\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default ListsItem","import React, { memo, useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useRouteProps } from 'hooks/routerHooks';\r\nimport { useRequest } from 'hooks/useRequest';\r\nimport { handleError, handleResponse } from 'helpers/apiHandlers/apiHandlers';\r\nimport { getLists } from 'helpers/apiHandlers/listHandlers'\r\nimport ListsItem from './ListsItem';\r\n\r\nimport './style/Lists.scss';\r\n\r\n\r\nconst Lists = memo((props) => {\r\n    const\r\n        [filter, setFilter] = useState(''),\r\n        [listsElement, setListsElement] = useState(null),\r\n        [sortBy, setSortBy] = useState('created'),\r\n        { params } = useRouteProps(),\r\n        { response: lists, setRequest } = useRequest({ handleError, handleResponse })\r\n    \r\n    useEffect(() => {  // request Lists on component load\r\n        setRequest(() => getLists(params.username))\r\n    }, [])\r\n\r\n    useEffect(() => { if (lists) { setListsElement(makeListsElement(lists)) } }, [lists])\r\n\r\n    function handleFilterChange(e) {\r\n        let val = e.currentTarget.value;\r\n        setFilter(val.length > 0 ? val : '');\r\n    }\r\n\r\n    function handleSelectChange(e) {\r\n        setSortBy(e.currentTarget.value);\r\n    }\r\n\r\n    function makeListsElement(lists) {\r\n        return lists.map(l => ({\r\n            name: l.name,\r\n            lastReviewed: l.lastReviewed,\r\n            created: l.created,\r\n            element: <ListsItem key={l._id} list={l} />\r\n        }));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            { lists?.length > 0 &&\r\n                <div className=\"PageWrapper\">\r\n                    <div className=\"PageHeader\">Lists by <Link className=\"Link\" to={`/u/${params.username}`}>/u/{params.username}</Link></div>\r\n                    <button className=\"Button\"><Link to={`/u/${params.username}/lists/new`}>Make a new list</Link></button>\r\n\r\n                    <div className=\"Lists__header\">\r\n                        <div className=\"Lists__filter\">\r\n                            <label htmlFor=\"filter\" id=\"Lists__filter--label\">Filter lists by name</label>\r\n                            <input\r\n                                autoFocus\r\n                                onChange={handleFilterChange}\r\n                                placeholder=\"e.g. 'vocabulary'\"\r\n                                id=\"Lists__filter\"\r\n                                type=\"text\"\r\n                                name=\"filter\"\r\n                                value={filter}\r\n                            />\r\n                        </div>\r\n                        <div className=\"Lists__sort\">\r\n                            <label id=\"Lists__sort--label\" htmlFor=\"sort\">Sort lists by</label>\r\n                            <select onChange={handleSelectChange} value={sortBy} name=\"sort\">\r\n                                <option value=\"name\">name</option>\r\n                                <option value=\"created\">creation date</option>\r\n                                <option value=\"lastReviewed\">last review date</option>\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"Lists\">\r\n                        {listsElement &&\r\n                            listsElement\r\n                                .filter(l => l.name.toLowerCase().includes(filter.toLowerCase()))\r\n                                .sort((first, second) => first[sortBy] < second[sortBy] ? -1 : 1)  // TODO: sort by lowercase, sort out undefined cases (lastReviewed may be undefined\r\n                                .map(l => l.element)\r\n                        }\r\n                    </div>\r\n                </div>\r\n\r\n            }\r\n\r\n            { lists?.length === 0 &&\r\n                <div className=\"PageWrapper\">\r\n                    <div className=\"PageHeader\">Lists by <Link className=\"Link\" to={`/u/${params.username}`}>/u/{params.username}</Link></div>\r\n                    <div className=\"Lists__new\">\r\n                        It appears you don't have any lists.\r\n                    </div>\r\n                    <button className=\"Button\"><Link to={`/u/${params.username}/lists/new`}>Make a new list</Link></button>\r\n\r\n                </div>\r\n            }\r\n        </>\r\n    )\r\n})\r\n\r\nexport default Lists;","import React, { memo } from 'react';\r\nimport './style/NewList.scss'\r\n\r\nconst NewListTerm = memo(({ index, formOutput, setFormOutput }) => {\r\n    const handleTermBlur = (e, idx) => {\r\n        let copy = { ...formOutput }\r\n        if (!copy.content[idx] && e.target.value) {\r\n            copy.content[idx] = { to: \"\", from: \"\" };\r\n        }\r\n        if (e.target.value && e.target.value !== copy.content[idx][e.target.name]) {\r\n            copy.content[idx][e.target.name] = e.target.value\r\n            setFormOutput({ ...formOutput, content: copy.content })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"NewList__term\">\r\n            <div className=\"NewList__term--index\">{index+1}</div>\r\n            <input className=\"NewList__term--input\" onBlur={(e) => handleTermBlur(e, index)} type=\"text\" name=\"from\" />\r\n            <input className=\"NewList__term--input\" onBlur={(e) => handleTermBlur(e, index)} type=\"text\" name=\"to\" />\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default NewListTerm;","import React, { useState, useEffect, memo } from 'react';\r\nimport { useRouteProps } from '../../hooks/routerHooks';\r\nimport { useLogState } from '../../hooks/state'\r\nimport { postList, handlePostList } from '../../helpers/apiHandlers/listHandlers';\r\nimport { useRequest } from '../../hooks/useRequest';\r\nimport NewListTerm from './NewListTerm';\r\nimport './style/NewList.scss';\r\n\r\nconst NewList = memo((props) => {\r\n    const { params } = useRouteProps();\r\n    const [numTerms, setNumTerms] = useState(10)  // @TODO: allow user to set default number of terms when making new list\r\n    const [formOutput, setFormOutput] = useState(() => ({\r\n        name: \"\",\r\n        from: \"\",\r\n        to: \"\",\r\n        content: new Array(numTerms),\r\n        created: null,\r\n        numTerms: 0,\r\n    }))\r\n    const [termInputs, setTermInputs] = useState([]);\r\n\r\n    const { response: postResponse, setRequest: setPostRequest } = useRequest({...handlePostList()});\r\n\r\n    useLogState('postresponse', postResponse)\r\n\r\n    useEffect(() => {\r\n        setTermInputs(makeTermInputElements(formOutput, numTerms))\r\n    }, [formOutput, numTerms])\r\n\r\n    function makeTermInputElements(formOutput, numTerms) {\r\n        let termElements = []\r\n        for (let i = 0; i < numTerms; i++) {\r\n            termElements.push(\r\n                <NewListTerm key={`term-${i + 1}`} index={i} formOutput={formOutput} setFormOutput={setFormOutput} />\r\n            )\r\n        }\r\n        return termElements\r\n    }\r\n\r\n    const handleAddRows = e => {\r\n        setNumTerms(numTerms + 10);\r\n    }\r\n\r\n\r\n    const handleBlur = e => {;\r\n        if (e.currentTarget.value !== formOutput[e.currentTarget.name]) {\r\n            setFormOutput({ ...formOutput, [e.currentTarget.name]: e.currentTarget.value })\r\n        }\r\n    }\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        setPostRequest(() => postList(params.username, {\r\n            owner: params.username, // @TODO: replace\r\n            ...formOutput,\r\n            content: formOutput.content.filter(i => i !== null)\r\n        }))\r\n\r\n    }\r\n\r\n    return (\r\n        <div className=\"NewList\">\r\n            <div className=\"PageHeader\">\r\n                New List\r\n            </div>\r\n\r\n            <form className=\"NewList__form\">\r\n                <input className=\"NewList__form--name\" onBlur={handleBlur} type=\"text\" name=\"name\" placeholder=\"List name\" />\r\n                <input className=\"NewList__form--language\" onBlur={handleBlur} type=\"text\" name=\"from\" placeholder=\"Original language\" />\r\n                <input className=\"NewList__form--language\" onBlur={handleBlur} type=\"text\" name=\"to\" placeholder=\"Translated language\" />\r\n\r\n\r\n                <div className=\"NewList__terms\">\r\n                    <input className=\"Form__button\" onClick={handleAddRows} type=\"button\" value=\"Add rows\" />\r\n\r\n                    {termInputs.length > 0 &&\r\n                        <>\r\n                            <div className=\"NewList__terms--header\">\r\n                                <span></span>\r\n                                {formOutput &&\r\n                                    <>\r\n                                        <span className=\"Terms__header--side\">{formOutput.from}</span>\r\n                                        <span className=\"Terms__header--side\">{formOutput.to}</span>\r\n                                    </>\r\n                                }\r\n                            </div>\r\n                            {termInputs}\r\n                        </>\r\n                    }\r\n                </div>\r\n\r\n                <input className=\"Form__button\" onClick={handleSubmit} type=\"button\" value=\"Create list\" />\r\n            </form>\r\n\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default NewList\r\n","import React, { useEffect, useMemo } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { handleError, handleResponse } from \"helpers/apiHandlers/apiHandlers\";\r\nimport { getSets } from \"helpers/apiHandlers/setHandlers\";\r\nimport { useRouteProps } from \"hooks/routerHooks\";\r\nimport { useRequest } from \"hooks/useRequest\";\r\nimport './style/Sets.scss'\r\n\r\nconst Sets = (props) => {\r\n    const { params } = useRouteProps(),\r\n        { response, setRequest } = useRequest({ handleResponse, handleError }),\r\n        sets = useMemo(() => response, [response]);\r\n\r\n    useEffect(() => {\r\n        setRequest(() => getSets(params.username, { owner: params.username }))\r\n    }, [])\r\n\r\n    return (\r\n        <div className=\"PageWrapper\">\r\n            <div className=\"Sets\">\r\n                <header className=\"PageHeader\">\r\n                    Sets by <Link className=\"Link\" to={`/u/${params.username}`}>/u/{params.username}</Link>\r\n                </header>\r\n\r\n                <section className=\"Banner__link\">\r\n                    <Link className=\"Sets__link\" to=\"new\">New Set</Link>\r\n                </section>\r\n\r\n                <section>\r\n                    {sets && JSON.stringify(sets)}\r\n                </section>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sets","import axios from 'axios';\r\n\r\n// ----- Set-related requests -----\r\n/**\r\n * Get request for a single set\r\n * @param {String} username username string\r\n * @param {Object} query mongoose query object\r\n */\r\nexport const getSet = (username, query) => {\r\n    return () => axios.get(`/db/u/${username}/set`, { params: query })\r\n}\r\n\r\n/**\r\n * Post request for a newly created set\r\n * @param {String} username username string\r\n * @param {Object} body new Set object\r\n */\r\nexport const postSet = (username, body) => {\r\n    return () => axios.post(`/db/u/${username}/set`, { newSet: body })\r\n    \r\n}\r\n\r\n/**\r\n * Put request to update a single set\r\n * @param {String} username username string\r\n * @param {Object} query mongoose query object\r\n * @param {Object} body fields (with their corresponding new values) to be updated\r\n */\r\nexport const putSet = (username, query, body) => {\r\n    return () => axios.put(`/db/u/${username}/set`, { data: { query, body } })\r\n}\r\n\r\n/**\r\n * Delete request for a single set\r\n * @param {String} username username string\r\n * @param {Object} query mongoose query object\r\n */\r\nexport const deleteSet = (username, query) => {\r\n    return () => axios.delete(`/db/u/${username}/set`, { params: query })\r\n}\r\n\r\nexport const getSets = (username, query) => {\r\n    return () => axios.get(`/db/u/${username}/sets`, { params: query})\r\n}","import React, { memo, useState, useMemo, useEffect } from \"react\";\r\nimport { handleError, handleResponse } from \"../../helpers/apiHandlers/apiHandlers\";\r\nimport { getLists } from \"../../helpers/apiHandlers/listHandlers\";\r\nimport { useRequest } from \"../../hooks/useRequest\";\r\nimport { useRouteProps } from '../../hooks/routerHooks';\r\nimport './style/Picker.scss';\r\n// import { useLogState } from \"../../hooks/state\";\r\n\r\nconst Picker = memo(({ chosen }) => {\r\n    const { params } = useRouteProps(),\r\n\r\n        // @note: currently I've hardcoded lists, since I'm initially trying to implement this in Sets, where we need to pick lists\r\n        // eventually, 'lists' will become an prop (e.g. 'inputArray')\r\n            { response: getListsResponse, setRequest: setGetListsRequest } = useRequest({ handleError, handleResponse }),\r\n            lists = useMemo(() => getListsResponse, [getListsResponse]),\r\n            options = useMemo(() => lists && makeItems(lists), [lists]),\r\n\r\n        [filter, setFilter] = useState(''),\r\n        [isFocused, setIsFocused] = useState(false),\r\n        [picked, setPicked] = chosen;\r\n\r\n    function handleClick(e) {\r\n        e.persist();\r\n        setPicked(picked => [...picked, {name: e.target?.innerText, id: e.target?.getAttribute('_id')}])\r\n\r\n    }\r\n    function makeItems(input) {\r\n        return input?.map(item => (\r\n            {\r\n                name: item.name,\r\n                id: item._id,\r\n                element: <PickerElement key={item._id} handleClick={handleClick} id={item._id} name={item.name} />\r\n            }\r\n        ));\r\n    }\r\n\r\n    useEffect(() => {\r\n        setGetListsRequest(() => getLists(params.username))\r\n    }, [])\r\n\r\n    return (\r\n        <div \r\n            className=\"Picker\"\r\n        >\r\n            <input\r\n                onChange={(e) => setFilter(e.target.value)}\r\n                onFocus={() => setIsFocused(true)}\r\n                onBlur={() => setTimeout(() => setIsFocused(false), 100)}  // without delay, doesn't capture the click, since isFocused goes to false immediately\r\n                type=\"text\"\r\n                className=\"Picker__filter\"\r\n                defaultValue={filter}\r\n                placeholder=\"filter lists\"\r\n            />\r\n\r\n            <div className=\"Picker__elements--wrapper\">\r\n                    <div \r\n                        className=\"Picker__elements\"\r\n                    >\r\n                        {isFocused && filter && \r\n                            options\r\n                                ?.filter(i => i.name.toLowerCase().includes(filter.toLowerCase()))\r\n                                // .filter(i => i)  // filter out already picked lists\r\n                                .slice(0,)\r\n                                .map(i => i.element)}\r\n                    </div>\r\n                \r\n            </div>\r\n            \r\n            {picked &&\r\n                <div className=\"Picker__chosen\">\r\n                    {picked.map(i => <div key={`picked-${i.name}`}>{i.name}</div>)}\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default Picker\r\n\r\nconst PickerElement = memo(({ name, id, handleClick}) => {\r\n    return (\r\n        <div \r\n            _id={id}\r\n            onClick={handleClick}\r\n            className=\"PickerElement\"\r\n        >\r\n            {name}\r\n        </div>\r\n    )\r\n})","import React, { useState, useEffect, useMemo } from \"react\";\r\nimport { handleError, handleResponse } from \"../../helpers/apiHandlers/apiHandlers\";\r\nimport { postSet } from '../../helpers/apiHandlers/setHandlers';\r\nimport { useRequest } from \"../../hooks/useRequest\";\r\nimport { useRouteProps } from '../../hooks/routerHooks';\r\nimport Picker from './Picker';\r\nimport './style/NewSet.scss';\r\n// import { useLogState } from \"../../hooks/state\";\r\n\r\nconst NewSet = (props) => {\r\n    const [newSet, setNewSet] = useState({}),\r\n        [pickedLists, setPickedLists] = useState([]),\r\n        { params } = useRouteProps(),\r\n        { response: postResponse, setRequest: setPostRequest } = useRequest({ handleError, handleResponse });\r\n\r\n    // useLogState('newSet', newSet)\r\n\r\n    useEffect(() => {\r\n        if (pickedLists.length > 0) {\r\n            setNewSet(newSet => ({ ...newSet, lists: pickedLists.map(i => i.id) }))\r\n        }\r\n    }, [pickedLists, setNewSet])\r\n\r\n    function handleSubmit() {\r\n        setPostRequest(() => postSet(params.username, { \r\n            ...newSet,\r\n            owner: params.username,\r\n        }))\r\n    }\r\n\r\n    function handleBlur(e) {\r\n        e.persist();\r\n\r\n        if ((e.target.value || e.target.innerText) || newSet[e.target.getAttribute('name')]) {\r\n            setNewSet(newSet => (\r\n                {\r\n                    ...newSet,\r\n                    [e.target.getAttribute('name')]: e.target.value || e.target.innerText\r\n                }\r\n            ));\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"NewSet\">\r\n            <form className=\"NewSet__form\">\r\n                <div className=\"NewSet__header\">New set</div>\r\n\r\n                {!postResponse \r\n                    ?\r\n                    <>\r\n\r\n                        <div className=\"NewSet__form--fields\">\r\n                            <div className=\"NewSet__field--name\">\r\n                                <label\r\n                                    className=\"NewSet__label\"\r\n                                    htmlFor=\"name\"\r\n                                >\r\n                                    Name\r\n                            </label>\r\n                                <input\r\n                                    onBlur={handleBlur}\r\n                                    tabIndex=\"1\"\r\n                                    spellCheck=\"false\"\r\n                                    className=\"NewSet__name\"\r\n                                    type=\"text\"\r\n                                    name=\"name\"\r\n                                />\r\n                            </div>\r\n\r\n                            <div className=\"NewSet__field--desc\">\r\n\r\n                                <label\r\n                                    className=\"NewSet__label\"\r\n                                    htmlFor=\"description\"\r\n                                >\r\n                                    Description\r\n                            </label>\r\n\r\n                                <div\r\n                                    onBlur={handleBlur}\r\n                                    tabIndex=\"2\"\r\n                                    contentEditable\r\n                                    spellCheck=\"false\"\r\n                                    name=\"description\"\r\n                                    cols=\"30\"\r\n                                    rows=\"5\"\r\n                                    className=\"NewSet__description\"\r\n                                    suppressContentEditableWarning={true}\r\n                                />\r\n                            </div>\r\n\r\n                            <div className=\"NewSet__field--lists\">\r\n                                <div className=\"NewSet__lists\">\r\n                                    <label\r\n                                        htmlFor=\"lists\"\r\n                                        className=\"NewSet__label\"\r\n                                    >\r\n                                        Lists to include in the set\r\n                                </label>\r\n\r\n                                    <Picker\r\n                                        chosen={[pickedLists, setPickedLists]}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n\r\n                        </div>\r\n\r\n                        <input\r\n                            onClick={handleSubmit}\r\n                            className=\"NewSet__submit\"\r\n                            type=\"button\"\r\n                            value=\"Create set\"\r\n                        />\r\n                    </>\r\n                    :\r\n                    JSON.stringify(postResponse)\r\n                }\r\n\r\n\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NewSet","/**\r\n * Testing nested grids\r\n */\r\n// import React from \"react\";\r\n// import './Test.css'\r\n\r\n// const Test = (props) => {\r\n\r\n//     return (\r\n//         <div className=\"Test\">\r\n//             <div className=\"Line\">\r\n//                 <div className=\"Line__name\">Jeff</div>\r\n//                 <div className=\"Line__content\">\r\n//                     <div className=\"Button\"></div>\r\n//                     <div className=\"Button\"></div>\r\n//                 </div>\r\n//                 <div className=\"Line__end\">End</div>\r\n//             </div>\r\n//         </div>\r\n//     )\r\n// }\r\n\r\n// export default Test\r\n\r\n/**\r\n * Sandboxing ListsOverviewList\r\n */\r\n\r\n//  import React, { useState, useEffect } from \"react\";\r\n// import { getListsByUser } from \"../helpers/db.api\";\r\n \r\n//  const Test = (props) => {\r\n//      const [lists, setLists] = useState(null);\r\n     \r\n//      useEffect(() => {\r\n//         getListsByUser('seerden')\r\n//             .then(r => setLists(r))\r\n//      }, [])\r\n//      return (\r\n//          <div className=\"Lists\">\r\n//            {lists && JSON.stringify(Object.keys(lists[0]))}  \r\n//          </div>\r\n//      )\r\n//  }\r\n \r\n//  export default Test\r\n\r\nimport React from \"react\";\r\nimport dayjs from 'dayjs'\r\nimport relativeTime from 'dayjs/plugin/relativeTime'\r\ndayjs.extend(relativeTime)\r\n\r\nconst Test = (props) => {\r\n    const yesterday = dayjs('2020-10-19');\r\n\r\n    return (\r\n        <div className=\"Test\">\r\n            {yesterday.fromNow()}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Test","import React, { memo } from \"react\";\r\nimport { Link } from 'react-router-dom';\r\nimport './style/Home.scss';\r\n\r\nconst Home = memo((props) => {\r\n\r\n    return (\r\n        <div className=\"PageWrapper\">\r\n            <div className=\"Home\">\r\n                <div className=\"PageHeader\">\r\n                    Home\r\n                </div>\r\n\r\n                <div className=\"Home__description\">\r\n                    <section>\r\n                        <header className=\"Home__header\">About</header>\r\n                        <p className=\"Home__paragraph\">\r\n                            <span>\r\n                                Mana is a <a className=\"Home__link\" href=\"https://en.wikipedia.org/wiki/Spaced_repetition\">spaced-repetition</a> language learning application I built to streamline the language studying I do in my own free time,\r\n                                but of course anyone who shares my studying mindset and can benefit from this application is welcome to partake!</span>\r\n                            <span>\r\n                                Spaced-repetition learning principles are quite straightforward: each (vocabulary) term is implemented as a virtual flash card. Learning intervals are chosen based on your preferences, and on how well you know each term.\r\n                                This way, things you know won't come up as often in review, placing the focus on what you <em>don't</em> know, thereby increasing retention, and saving a lot of time.\r\n\r\n\r\n                            </span>\r\n                            <span>\r\n                                Besides the benefits of having an application made specifically for my learning preferences, building the application has served me very well in refining my web development skillset, and hence the project has become one my fullstack web development portfolio projects.\r\n                                The source code is available on my <a className=\"Home__link\" href=\"https://github.com/seerden/mana\">GitHub</a>.\r\n                            </span>\r\n                        </p>\r\n                    </section>\r\n\r\n                    <section>\r\n                        <header className=\"Home__header\">Getting started</header>\r\n                        <p className=\"Home__paragraph\">\r\n                            <span>\r\n                                If you're just taking a look at the application, please click <a className=\"Home__link\" href=\"/\">here</a> to be logged in as a temporary user.\r\n                                You'll see a number of lists having been created already, including some review activity, so you can fully explore the functionality the application has to offer.\r\n                                Changes you make will persist to the database, but the temporary account and all its content will be removed after two hours.\r\n\r\n                                If you like what you've experienced within that time, go ahead and make an actual account!\r\n                            </span>\r\n\r\n\r\n                        </p>\r\n                    </section>\r\n                    <section>\r\n                        <header className=\"Home__header\">\r\n                            Register\r\n                        </header>\r\n                    </section>\r\n                    <p className=\"Home__paragraph\">\r\n                        <span>\r\n                            If you're ready to make an account, click <Link className=\"Home__link\" to=\"/register\">here</Link> to register. It's free, and no personal information will be requested or stored.\r\n                        </span>\r\n                    </p>\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default Home","import React, { useState } from \"react\";\r\nimport { handleFormBlur } from '../../hooks/state';\r\nimport { postUser } from '../../helpers/apiHandlers/apiHandlers';\r\nimport './style/Register.scss';\r\n\r\nconst Register = (props) => {\r\n    const [response, setResponse] = useState(null);\r\n    const [newUser, setNewUser] = useState({ username: null, password: null });\r\n\r\n    function handleSubmit(newUser) {\r\n        postUser(newUser)\r\n            .then(r => setResponse(r))\r\n            .catch(err => console.log(err.response.status));\r\n    }\r\n\r\n    return (\r\n        <div className=\"PageWrapper\">\r\n            <div className=\"Register\">\r\n                {!response &&\r\n                    <>\r\n                        <div className=\"PageHeader\">Register a new account</div>\r\n                        <form className=\"Register__form\">\r\n                            <label htmlFor=\"username\">Username</label>\r\n                            <input\r\n                                onBlur={e => handleFormBlur(e, newUser, setNewUser)}\r\n                                type=\"text\"\r\n                                name=\"username\"\r\n                            />\r\n\r\n                            <label htmlFor=\"password\">Password</label>\r\n                            <input\r\n                                onBlur={e => handleFormBlur(e, newUser, setNewUser)}\r\n                                type=\"password\"\r\n                                name=\"password\"\r\n                            />\r\n\r\n                            <input\r\n                                onClick={() => handleSubmit(newUser)}\r\n                                className=\"Register__button\"\r\n                                type=\"button\"\r\n                                value=\"Register\"\r\n                            />\r\n                        </form>\r\n                    </>\r\n                }\r\n\r\n                {response &&\r\n                    <div>\r\n                        {JSON.stringify(response)}\r\n                    </div>\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Register","import React, { memo } from 'react';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\n\nimport './style/App.scss';\n\nimport PrivateRoute from '../wrappers/PrivateRoute';\nimport Private from '../wrappers/Private';\nimport Header from './layout/Header';\nimport Footer from './layout/Footer';\nimport Review from './review/Review';\nimport List from './list/List';\nimport User from './user/User';\nimport Lists from './lists/Lists';\nimport NewList from './newlist/NewList';\nimport Sets from './sets/Sets';\nimport NewSet from './sets/NewSet';\nimport Test from './Test';\nimport Home from './Home';\nimport Register from './register/Register';\nimport Login from './login/Login';\n\nimport { LoginProvider } from '../context/LoginContext';\nimport { ListProvider } from '../context/ListContext';\nimport { ReviewProvider } from '../context/ReviewContext';\n\nconst App = memo(() => {\n    return (\n        <>\n            <div className=\"App__wrapper\">\n                <LoginProvider>\n                    <Router>\n                        <Header />\n                        <div className=\"App\">\n                            <ListProvider>\n                                <Routes>\n                                    {/* test route */}\n                                    <Route path=\"/test\" element={<Test />} />\n\n                                    {/* home route */}\n                                    <Route path=\"/\" element={<Home />} />\n\n                                    <Route path=\"/register\" element={<Register />} />\n                                    <Route path=\"/login\" element={<Login />} />\n\n\n                                    {/* user routes */}\n                                    <Route path=\"/u/:username\">\n                                        <PrivateRoute path=\"/\" component={User} />\n\n                                        {/* Routes related to multiple lists */}\n                                        <Route path=\"/lists\">\n                                            <PrivateRoute path=\"/\" component={Lists} />\n                                            <PrivateRoute path=\"/new\" component={NewList} />\n                                        </Route>\n\n                                        {/* Routes related to individual list */}\n                                        <Route path=\"/list\">\n                                            <Route path=\"/:id\">\n                                                <Route path=\"/review\" element={\n                                                    <ReviewProvider>\n                                                        <Private component={Review} />\n                                                    </ReviewProvider>\n                                                }\n                                                />\n\n                                                <PrivateRoute path=\"/\" component={List} />\n                                            </Route>\n\n\n                                        </Route>\n                                        \n                                        {/* Routes related to sets */}\n                                        <Route path=\"/sets\">\n                                            <PrivateRoute path=\"/\" component={Sets} />\n                                            <PrivateRoute path=\"/new\" component={NewSet} />\n                                        </Route>\n\n\n                                    </Route>\n                                    {/* catchall 404 route */}\n                                    <Route path=\"*\" element={<div>404</div>} />\n                                </Routes>\n                            </ListProvider>\n                        </div>\n                        <Footer />\n                    </Router>\n                </LoginProvider>\n            </div>\n\n        </>\n    )\n})\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss'\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}