# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type ErrorOrSuccess {
  error: String
  success: String
}

type Id {
  _id: String!
}

input IdInput {
  _id: String!
}

type List {
  _id: ID!
  created: DateTime!
  from: String!
  lastReviewed: DateTime!
  name: String!
  owner: String!
  reviewDates: ListState
  sessions: [ReviewSession!]
  setMembership: [String!]!
  terms(populate: Boolean): [Term!]!
  to: [String!]!
}

type ListState {
  backwards: [DateTime!]!
  forwards: [DateTime!]!
}

input ListUpdateActionInput {
  type: String!
}

input ListUpdatePayloadInput {
  name: String
}

type MaybeList {
  error: String
  list: List
}

type MaybeReviewSession {
  error: String
  savedReviewSession: ReviewSession
}

type MaybeUser {
  error: String
  user: User
}

type Mutation {
  """
  Add a list document to the database, append its ._id to its parent user's .lists array
  """
  createList(newList: NewListFromClientInput!): MaybeList!
  createReviewSession(newReviewSession: ReviewSessionBaseInput!, termUpdateArray: [TermUpdateObject!]!): MaybeReviewSession!
  createTerms(terms: [NewTermFromClient!]!): ErrorOrSuccess!
  createUser(password: String!, username: String!): MaybeUser!
  deleteList(listId: String!): SuccessOrError!
  deleteTermsFromList(ids: [String!]!, listId: String!, remainingTermIds: [String!]): ErrorOrSuccess!
  editTerms(updateObj: [TermEditObject!]!): Int!

  """Login mutation"""
  login(password: String!, username: String!): MaybeUser!
  updateList(action: ListUpdateActionInput!, listId: String!, payload: ListUpdatePayloadInput!): MaybeList!
  updateTerms(updateObj: [TermUpdateObject!]!): Int!
}

input NewListFromClientInput {
  from: String!
  name: String!
  owner: String!
  terms: [NewListTermInput!]!
  to: String!
}

input NewListTermInput {
  from: String!
  to: String!
}

"""
New term created client-side, excludes history and saturation fields, since those don't exist yet for the term
"""
input NewTermFromClient {
  from: String!
  languages: TermLanguagesInput!
  listMembership: [String!]!
  owner: String!
  saturation: TermSaturationInput!
  to: String!
}

type Query {
  """Query lists by id"""
  listsById(ids: [String!]!, populate: [String!]): [List!]!

  """Find lists by user"""
  listsByUser(owner: String!, populate: [String!]): [List!]!

  """Returns currently logged in user. """
  me: MaybeUser!
  reviewSessionsByUser(owner: String!): [ReviewSession!]!
  users: [User!]!
}

type ReviewDate {
  end: DateTime!
  start: DateTime!
}

input ReviewDateInput {
  end: DateTime!
  start: DateTime!
}

type ReviewSession {
  _id: ID!
  date: ReviewDate!
  listIds: [Id!]
  owner: String!
  passfail: [String!]!
  settings: ReviewSettings!
  terms: ReviewSessionTerms!
  timePerCard: [Int!]!
}

input ReviewSessionBaseInput {
  date: ReviewDateInput!
  listIds: [IdInput!]
  owner: String!
  passfail: [String!]!
  settings: ReviewSettingsInput!
  terms: ReviewSessionTermsInput!
  timePerCard: [Int!]!
}

type ReviewSessionTerms {
  listId: String!
  termIds: [String!]!
}

input ReviewSessionTermsInput {
  listId: String!
  termIds: [String!]!
}

type ReviewSettings {
  direction: String!
  ended: Boolean!
  n: Float!
  sessionEnd: DateTime!
  sessionStart: DateTime!
  started: Boolean!
}

input ReviewSettingsInput {
  direction: String!
  ended: Boolean!
  n: Float!
  sessionEnd: DateTime!
  sessionStart: DateTime!
  started: Boolean!
}

type SuccessOrError {
  error: Boolean
  success: Boolean
}

type Term {
  _id: ID!
  from: String!
  history: [TermHistory!]
  languages: TermLanguages
  listMembership: [List!]
  owner: String!
  saturation: TermSaturation!
  to: String!
}

input TermEditObject {
  _id: String!
  from: String
  to: String
}

type TermHistory {
  content: [String!]!
  date: DateTime!
  direction: String!
}

input TermHistoryInput {
  content: [String!]!
  date: DateTime!
  direction: String!
}

type TermLanguages {
  from: String
  to: String
}

input TermLanguagesInput {
  from: String
  to: String
}

type TermSaturation {
  backwards: Float
  forwards: Float
}

input TermSaturationInput {
  backwards: Float
  forwards: Float
}

input TermUpdateObject {
  _id: String!
  history: TermHistoryInput
  saturation: TermSaturationInput
}

type User {
  _id: String!
  currentSession: String!
  lists: [List!]
  password: String!
  username: String!
}
