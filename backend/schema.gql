# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type ErrorOrSuccess {
  error: String
  success: String
}

type List {
  _id: ID!
  created: DateTime!
  from: String!
  lastReviewed: DateTime!
  name: String!
  owner: String!
  sessions: [ReviewSession!]!
  setMembership: [String!]!
  state: ListState!
  terms(populate: Boolean): [TermsUnion!]
  to: [String!]!
}

type ListState {
  backwards: String!
  forwards: String!
}

type MaybeUser {
  error: String
  user: User
}

type Mutation {
  createTerms(terms: [NewTermFromClient!]!): ErrorOrSuccess!
  createUser(password: String!, username: String!): MaybeUser!
  editTerms(updateObj: [TermEditObject!]!): Int!
  login(password: String!, username: String!): MaybeUser!
  updateTerms(updateObj: [TermUpdateObject!]!): Int!
}

"""    New term created client-side, excludes history and saturation fields     since those don't exist yet for the term
"""
input NewTermFromClient {
  from: String!
  languages: TermLanguagesInput!
  listMembership: [String!]!
  owner: String!
  saturation: TermSaturationInput!
  to: String!
}

type Query {
  """Query lists by id"""
  listsById(ids: [String!]!, populate: [String!]!): [List!]!

  """Find lists by user"""
  listsByUser(owner: String!, populate: [String!]): [List!]!
  me: MaybeUser!
  users: [User!]!
}

type ReviewSession {
  date: [DateTime!]!
  listIds: [List!]
  owner: String!
  settings: ReviewSettings!
  terms: ReviewSessionTerms!
}

type ReviewSessionTerms {
  listId: List!
  termIds: Term!
}

type ReviewSettings {
  direction: String!
  ended: Boolean!
  n: Float!
  sessionEnd: DateTime!
  sessionStart: DateTime!
  started: Boolean!
}

type Term {
  _id: String!
  from: String!
  history: [TermHistory!]
  languages: TermLanguages!
  listMembership: [List!]!
  owner: String!
  saturation: TermSaturation!
  to: String!
}

input TermEditObject {
  _id: String!
  from: String
  to: String
}

type TermHistory {
  content: [String!]!
  date: DateTime!
  direction: String!
}

input TermHistoryInput {
  content: [String!]!
  date: DateTime!
  direction: String!
}

type TermId {
  _id: String!
}

type TermLanguages {
  from: String!
  to: String!
}

input TermLanguagesInput {
  from: String!
  to: String!
}

type TermSaturation {
  backwards: Float
  forwards: Float
}

input TermSaturationInput {
  backwards: Float
  forwards: Float
}

input TermUpdateObject {
  _id: String!
  history: TermHistoryInput
  saturation: TermSaturationInput
}

union TermsUnion = Term | TermId

type User {
  _id: ID!
  currentSession: String!
  lists: [String!]
  password: String!
  username: String!
}
