# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type List {
  created_at: Float!
  from_language: String!
  last_reviewed: Float
  list_id: Float!
  name: String!
  terms(populate: Boolean): [Term]!
  to_language: String!
  user_id: Float!
}

type ListAndTerms {
  list: List!
  terms: [Term]!
}

input ListLanguageUpdateInput {
  from_language: String
  list_id: Int!
  to_language: String
}

input ListUpdatePayloadInput {
  name: String!
}

type Message {
  message: String!
}

type Mutation {
  createList(newList: NewListWithTermsInput!): ListAndTerms!
  createSession(entries: [ReviewSessionEntryInput!]!, session: ReviewSessionWithoutUserIdInput!): SessionAndEntries!
  createTerms(terms: [TermWithoutIdInput!]!): [Term!]!
  createUser(userInput: UserInput!): User!
  deleteList(listIds: [Int!]!): ListAndTerms!
  deleteTerms(termIds: [Int!]!): [Term!]!
  deleteUser: User!
  login(password: String!, username: String!): User!
  logout: Message!
  updateList(list_id: Float!, payload: ListUpdatePayloadInput!): List
  updateListLanguage(payload: ListLanguageUpdateInput!): List
  updatePassword(currentPassword: String!, newPassword: String!): User!
  updateTermValues(updateOptions: [TermUpdateInput!]!): [Term!]!
  updateUsername(username: String!): User!
}

input NewListWithTermsInput {
  from_language: String!
  name: String!
  terms: [TermWithoutIdsInput!]!
  to_language: String!
}

type Query {
  listsById(list_ids: [Int!]!): [List!]!
  listsByUser: [List!]!
  me: User
  queryTermsForReview(reviewParams: ReviewParamsInput!): [Term!]!
  sessionEntriesByTermIds(termIds: [Int!]!): [TermIdWithEntries!]!
  sessionsById(sessionIds: [Int!]!, user_id: Float!): [ReviewSession]!
  sessionsByUser(user_id: Float!): [ReviewSession]!
  users: [User!]!
}

input ReviewParamsInput {
  list_ids: [Float]
  set_ids: [Float]
  term_ids: [Float]
}

type ReviewSession {
  direction: String!
  end_date: Float
  list_ids: [Int]
  n: Int!
  review_session_id: Float!
  saturation_threshold: Int
  set_ids: [Int]
  start_date: Float!
  user_id: Int!
}

type ReviewSessionEntry {
  created_at: Float!
  direction: String!
  passfail: String!
  review_entry_id: Int!
  review_session_id: Int!
  term_id: Int!
  time_on_card: Int!
}

input ReviewSessionEntryInput {
  created_at: Float!
  direction: String!
  passfail: String!
  term_id: Int!
  time_on_card: Int!
}

input ReviewSessionWithoutUserIdInput {
  direction: String!
  end_date: Float
  list_ids: [Int]
  n: Int!
  saturation_threshold: Int
  set_ids: [Int]
  start_date: Float!
}

type SessionAndEntries {
  entries: [ReviewSessionEntry!]!
  session: ReviewSession!
}

type Term {
  from_language: String!
  from_value: String!
  history(populate: Boolean): [[ReviewSessionEntry!]!]
  list_id: Int!
  saturation(populate: Boolean): TermSaturation
  term_id: Int!
  to_language: String!
  to_value: String!
  user_id: Int!
}

type TermIdWithEntries {
  entries: [ReviewSessionEntry!]!
  term_id: Int!
}

type TermSaturation {
  backwards: Int
  forwards: Int
  last_updated: Float!
  term_id: Int!
}

input TermUpdateInput {
  from_value: String
  term_id: Int!
  to_value: String
}

input TermWithoutIdInput {
  from_language: String!
  from_value: String!
  list_id: Int!
  to_language: String!
  to_value: String!
  user_id: Int!
}

input TermWithoutIdsInput {
  from_language: String!
  from_value: String!
  to_language: String!
  to_value: String!
}

type User {
  created_at: Float!
  password: String!
  user_id: Float!
  username: String!
}

input UserInput {
  password: String!
  username: String!
}
